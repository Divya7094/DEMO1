2025-05-12 11:10:44.131 +05:30 [INF] Application is shutting down...
2025-05-12 11:10:52.384 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 11:10:52.535 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 11:10:52.556 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 11:10:52.561 +05:30 [INF] Hosting environment: Development
2025-05-12 11:10:52.565 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 11:11:05.551 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/ - null null
2025-05-12 11:11:05.854 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/ - 404 0 null 314.8106ms
2025-05-12 11:11:05.931 +05:30 [INF] Request reached the end of the middleware pipeline without being handled by application code. Request path: GET http://localhost:5251/, Response status code: 404
2025-05-12 11:11:12.609 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/swagger/index.html - null null
2025-05-12 11:11:12.801 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/swagger/index.html - 200 null text/html;charset=utf-8 192.9268ms
2025-05-12 11:11:13.123 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/swagger/v1/swagger.json - null null
2025-05-12 11:11:13.303 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 180.083ms
2025-05-12 11:21:08.642 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 11:21:08.662 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:21:08.669 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 27.4498ms
2025-05-12 11:21:08.685 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 11:21:08.785 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 5:51:08 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 11:21:08.843 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 5:51:08 AM'.
2025-05-12 11:21:08.846 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:21:08.849 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:21:08.889 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 11:21:09.030 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 11:21:09.035 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 11:21:09.039 +05:30 [WRN] User file not found. Returning an empty list.
2025-05-12 11:21:09.050 +05:30 [INF] Executing UnauthorizedObjectResult, writing value of type '<>f__AnonymousType0`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 11:21:09.098 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 196.9505ms
2025-05-12 11:21:09.103 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:21:09.107 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 401 null application/json; charset=utf-8 421.7207ms
2025-05-12 11:21:24.508 +05:30 [INF] Application is shutting down...
2025-05-12 11:21:29.202 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 11:21:29.338 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 11:21:29.358 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 11:21:29.362 +05:30 [INF] Hosting environment: Development
2025-05-12 11:21:29.365 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 11:21:37.758 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 11:21:37.826 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:21:37.835 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 79.7608ms
2025-05-12 11:21:37.848 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 11:21:37.925 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 5:51:37 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 11:21:37.949 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 5:51:37 AM'.
2025-05-12 11:21:37.952 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:21:37.956 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:21:37.978 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 11:21:38.053 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 11:21:38.057 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 11:21:38.058 +05:30 [WRN] User file not found. Returning an empty list.
2025-05-12 11:21:38.061 +05:30 [INF] Executing UnauthorizedObjectResult, writing value of type '<>f__AnonymousType0`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 11:21:38.086 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 100.445ms
2025-05-12 11:21:38.090 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:21:38.093 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 401 null application/json; charset=utf-8 245.355ms
2025-05-12 11:21:49.072 +05:30 [INF] Application is shutting down...
2025-05-12 11:21:56.577 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 11:21:56.740 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 11:21:56.746 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 11:21:56.748 +05:30 [INF] Hosting environment: Development
2025-05-12 11:21:56.749 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 11:22:00.877 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 11:22:00.938 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:22:00.949 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 72.7992ms
2025-05-12 11:22:00.961 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 11:22:01.041 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 5:52:01 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 11:22:01.069 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 5:52:01 AM'.
2025-05-12 11:22:01.077 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:22:01.082 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:22:01.105 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 11:22:01.198 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 11:22:01.203 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 11:22:01.207 +05:30 [WRN] User file not found. Returning an empty list.
2025-05-12 11:22:01.212 +05:30 [INF] Executing UnauthorizedObjectResult, writing value of type '<>f__AnonymousType0`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 11:22:01.275 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 159.8344ms
2025-05-12 11:22:01.278 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:22:01.282 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 401 null application/json; charset=utf-8 321.1301ms
2025-05-12 11:22:04.295 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 11:22:04.312 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 5:52:04 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 11:22:04.339 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 5:52:04 AM'.
2025-05-12 11:22:04.346 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:22:04.353 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:22:04.362 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 11:22:04.371 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 11:22:04.378 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 11:22:04.381 +05:30 [WRN] User file not found. Returning an empty list.
2025-05-12 11:22:04.386 +05:30 [INF] Executing UnauthorizedObjectResult, writing value of type '<>f__AnonymousType0`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 11:22:04.396 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 27.8616ms
2025-05-12 11:22:04.401 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:22:04.407 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 401 null application/json; charset=utf-8 111.5864ms
2025-05-12 11:22:21.428 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 11:22:21.448 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:22:21.455 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 27.276ms
2025-05-12 11:22:21.465 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 11:22:21.478 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 5:52:21 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 11:22:21.520 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 5:52:21 AM'.
2025-05-12 11:22:21.537 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:22:21.543 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:22:21.552 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 11:22:21.559 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 11:22:21.565 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 11:22:21.570 +05:30 [WRN] User file not found. Returning an empty list.
2025-05-12 11:22:21.573 +05:30 [INF] Executing UnauthorizedObjectResult, writing value of type '<>f__AnonymousType0`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 11:22:21.578 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 19.9295ms
2025-05-12 11:22:21.587 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:22:21.591 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 401 null application/json; charset=utf-8 125.5447ms
2025-05-12 11:27:22.424 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 11:27:22.435 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:27:22.438 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 13.4056ms
2025-05-12 11:27:22.447 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 11:27:22.458 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 5:57:22 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 11:27:22.489 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 5:57:22 AM'.
2025-05-12 11:27:22.498 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:27:22.501 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:27:22.506 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 11:27:22.519 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 11:27:22.523 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 11:27:22.532 +05:30 [WRN] User file not found. Returning an empty list.
2025-05-12 11:27:22.537 +05:30 [INF] Executing UnauthorizedObjectResult, writing value of type '<>f__AnonymousType0`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 11:27:22.544 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 24.9155ms
2025-05-12 11:27:22.555 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:27:22.558 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 401 null application/json; charset=utf-8 111.1356ms
2025-05-12 11:28:26.257 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Auth/register - null null
2025-05-12 11:28:26.267 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:28:26.270 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Auth/register - 204 null null 13.4914ms
2025-05-12 11:28:26.277 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Auth/register - application/json 52
2025-05-12 11:28:26.284 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 5:58:26 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 11:28:26.299 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 5:58:26 AM'.
2025-05-12 11:28:26.304 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:28:26.313 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Register (WisVest)'
2025-05-12 11:28:26.326 +05:30 [INF] Route matched with {action = "Register", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Register(UserRegisterRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 11:28:26.350 +05:30 [INF] Checking if user with email arun1234@gmail.com exists.
2025-05-12 11:28:26.356 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 11:28:26.358 +05:30 [WRN] User file not found. Returning an empty list.
2025-05-12 11:28:26.595 +05:30 [INF] Attempting to add a new user.
2025-05-12 11:28:26.599 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 11:28:26.602 +05:30 [WRN] User file not found. Returning an empty list.
2025-05-12 11:28:26.605 +05:30 [INF] Attempting to save all users to JSON file.
2025-05-12 11:28:26.637 +05:30 [ERR] Error occurred while saving users.
System.ArgumentNullException: Value cannot be null. (Parameter 'path')
   at System.ArgumentNullException.Throw(String paramName)
   at System.ArgumentNullException.ThrowIfNull(Object argument, String paramName)
   at System.ArgumentException.ThrowNullOrEmptyException(String argument, String paramName)
   at System.IO.File.Validate(String path, Encoding encoding)
   at System.IO.File.WriteAllText(String path, String contents)
   at WisVestAPI.Services.UserService.SaveAllUsers(List`1 users) in C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main\Services\UserService.cs:line 54
2025-05-12 11:28:26.677 +05:30 [INF] User added successfully with ID 1.
2025-05-12 11:28:26.680 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType0`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 11:28:26.685 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Register (WisVest) in 345.1603ms
2025-05-12 11:28:26.697 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Register (WisVest)'
2025-05-12 11:28:26.705 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Auth/register - 200 null application/json; charset=utf-8 428.6506ms
2025-05-12 11:28:39.547 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 11:28:39.556 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:28:39.561 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 14.5094ms
2025-05-12 11:28:39.571 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 52
2025-05-12 11:28:39.579 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 5:58:39 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 11:28:39.600 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 5:58:39 AM'.
2025-05-12 11:28:39.606 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:28:39.613 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:28:39.617 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 11:28:39.628 +05:30 [INF] Fetching user with email arun1234@gmail.com.
2025-05-12 11:28:39.632 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 11:28:39.634 +05:30 [WRN] User file not found. Returning an empty list.
2025-05-12 11:28:39.638 +05:30 [INF] Executing UnauthorizedObjectResult, writing value of type '<>f__AnonymousType0`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 11:28:39.650 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 21.9419ms
2025-05-12 11:28:39.655 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:28:39.660 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 401 null application/json; charset=utf-8 89.1948ms
2025-05-12 11:29:28.969 +05:30 [INF] Application is shutting down...
2025-05-12 11:29:46.028 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 11:29:46.198 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 11:29:46.203 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 11:29:46.205 +05:30 [INF] Hosting environment: Development
2025-05-12 11:29:46.207 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 11:29:49.831 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 11:29:49.989 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:29:50.011 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 183.5796ms
2025-05-12 11:29:50.033 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 52
2025-05-12 11:29:50.247 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 5:59:50 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 11:29:50.300 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 5:59:50 AM'.
2025-05-12 11:29:50.307 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:29:50.316 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:29:50.379 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 11:29:50.584 +05:30 [INF] Fetching user with email arun1234@gmail.com.
2025-05-12 11:29:50.590 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 11:29:50.593 +05:30 [WRN] User file not found. Returning an empty list.
2025-05-12 11:29:50.601 +05:30 [INF] Executing UnauthorizedObjectResult, writing value of type '<>f__AnonymousType0`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 11:29:50.660 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 266.5103ms
2025-05-12 11:29:50.663 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:29:50.665 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 401 null application/json; charset=utf-8 632.9346ms
2025-05-12 11:31:53.760 +05:30 [INF] Application is shutting down...
2025-05-12 11:31:59.916 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 11:32:00.165 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 11:32:00.184 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 11:32:00.188 +05:30 [INF] Hosting environment: Development
2025-05-12 11:32:00.190 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 11:32:02.867 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 11:32:02.979 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:32:02.990 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 125.4423ms
2025-05-12 11:32:03.001 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 11:32:03.131 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 6:02:03 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 11:32:03.159 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 6:02:03 AM'.
2025-05-12 11:32:03.163 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:32:03.183 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:32:03.228 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 11:32:03.367 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 11:32:03.369 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 11:32:03.370 +05:30 [WRN] User file not found. Returning an empty list.
2025-05-12 11:32:03.376 +05:30 [INF] Executing UnauthorizedObjectResult, writing value of type '<>f__AnonymousType0`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 11:32:03.433 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 192.9597ms
2025-05-12 11:32:03.440 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:32:03.444 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 401 null application/json; charset=utf-8 443.3446ms
2025-05-12 11:33:04.503 +05:30 [INF] Application is shutting down...
2025-05-12 11:33:10.042 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 11:33:10.375 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 11:33:10.381 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 11:33:10.383 +05:30 [INF] Hosting environment: Development
2025-05-12 11:33:10.384 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 11:33:13.616 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 11:33:13.727 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:33:13.737 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 123.7964ms
2025-05-12 11:33:13.755 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 11:33:13.839 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 6:03:13 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 11:33:13.861 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 6:03:13 AM'.
2025-05-12 11:33:13.865 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:33:13.868 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:33:13.892 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 11:33:13.980 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 11:33:13.988 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 11:33:13.992 +05:30 [WRN] User file not found. Returning an empty list.
2025-05-12 11:33:14.002 +05:30 [INF] Executing UnauthorizedObjectResult, writing value of type '<>f__AnonymousType0`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 11:33:14.047 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 147.9067ms
2025-05-12 11:33:14.050 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:33:14.053 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 401 null application/json; charset=utf-8 298.2134ms
2025-05-12 11:36:32.445 +05:30 [INF] Application is shutting down...
2025-05-12 11:36:37.812 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 11:36:38.045 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 11:36:38.050 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 11:36:38.052 +05:30 [INF] Hosting environment: Development
2025-05-12 11:36:38.054 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 11:36:40.083 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 11:36:40.147 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:36:40.158 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 76.1386ms
2025-05-12 11:36:40.171 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 11:36:40.269 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 6:06:40 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 11:36:40.293 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/9/2025 1:57:10 PM', Current time (UTC): '5/12/2025 6:06:40 AM'.
2025-05-12 11:36:40.296 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:36:40.302 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:36:40.326 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 11:36:40.412 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 11:36:40.428 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 11:36:40.433 +05:30 [INF] Users loaded successfully from JSON file.
2025-05-12 11:36:40.662 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 11:36:40.690 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 356.7766ms
2025-05-12 11:36:40.692 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:36:40.694 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 523.5925ms
2025-05-12 11:37:07.442 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 11:37:07.452 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:37:07.454 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 12.2654ms
2025-05-12 11:37:07.459 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 104
2025-05-12 11:37:07.476 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:37:07.482 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 11:37:07.490 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 11:37:07.527 +05:30 [INF] Starting allocation calculation...
2025-05-12 11:37:07.561 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 11:37:07.563 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 11:37:07.573 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 11:37:07.575 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 11:37:07.577 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 11:37:07.578 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 11:37:07.590 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 11:37:07.642 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 11:37:07.660 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 11:37:07.662 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 11:37:07.665 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 11:37:07.668 +05:30 [INF] Sub-allocations for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 11:37:07.673 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 11:37:07.676 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 11:37:07.678 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 11:37:07.680 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 11:37:07.683 +05:30 [INF] Added sub-assets for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 11:37:07.735 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 11:37:07.746 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 11:37:07.761 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 266.4953ms
2025-05-12 11:37:07.769 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 11:37:07.779 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 319.8643ms
2025-05-12 11:37:07.809 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=Short - null null
2025-05-12 11:37:07.817 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:37:07.820 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=Short - 204 null null 11.637ms
2025-05-12 11:37:07.828 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=Short - application/json 472
2025-05-12 11:37:07.835 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:37:07.839 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 11:37:07.849 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, System.String) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 11:37:07.891 +05:30 [INF] Starting product allocation calculation.
2025-05-12 11:37:07.895 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-12 11:37:07.901 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-12 11:37:08.018 +05:30 [INF] Product data loaded successfully.
2025-05-12 11:37:08.023 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-12 11:37:08.028 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.25, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: Short.
2025-05-12 11:37:08.032 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.034 +05:30 [INF] Calculated investment amount: 516.53.
2025-05-12 11:37:08.037 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.75, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: Short.
2025-05-12 11:37:08.041 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.043 +05:30 [INF] Calculated investment amount: 482.19.
2025-05-12 11:37:08.046 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-12 11:37:08.049 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.79, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: Short.
2025-05-12 11:37:08.055 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.057 +05:30 [INF] Calculated investment amount: 378.47.
2025-05-12 11:37:08.060 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.21, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: Short.
2025-05-12 11:37:08.066 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.067 +05:30 [INF] Calculated investment amount: 341.69.
2025-05-12 11:37:08.069 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-12 11:37:08.074 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.63, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: Short.
2025-05-12 11:37:08.080 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.085 +05:30 [INF] Calculated investment amount: 356.26.
2025-05-12 11:37:08.088 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.37, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: Short.
2025-05-12 11:37:08.095 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.098 +05:30 [INF] Calculated investment amount: 341.03.
2025-05-12 11:37:08.102 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-12 11:37:08.107 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.59, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: Short.
2025-05-12 11:37:08.113 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.117 +05:30 [INF] Calculated investment amount: 416.33.
2025-05-12 11:37:08.119 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.41, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: Short.
2025-05-12 11:37:08.125 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.128 +05:30 [INF] Calculated investment amount: 401.53.
2025-05-12 11:37:08.131 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-12 11:37:08.136 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.87, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: Short.
2025-05-12 11:37:08.139 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.140 +05:30 [INF] Calculated investment amount: 514.63.
2025-05-12 11:37:08.142 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.13, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: Short.
2025-05-12 11:37:08.145 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.147 +05:30 [INF] Calculated investment amount: 534.42.
2025-05-12 11:37:08.149 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-12 11:37:08.152 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.42, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: Short.
2025-05-12 11:37:08.154 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.156 +05:30 [INF] Calculated investment amount: 397.12.
2025-05-12 11:37:08.158 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.58, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: Short.
2025-05-12 11:37:08.161 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.162 +05:30 [INF] Calculated investment amount: 409.94.
2025-05-12 11:37:08.165 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-12 11:37:08.168 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 10000, AnnualReturn: 7.8, InvestmentHorizon: Short.
2025-05-12 11:37:08.172 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.176 +05:30 [INF] Calculated investment amount: 190.18.
2025-05-12 11:37:08.178 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.79, TargetAmount: 10000, AnnualReturn: 6.3, InvestmentHorizon: Short.
2025-05-12 11:37:08.181 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.183 +05:30 [INF] Calculated investment amount: 158.41.
2025-05-12 11:37:08.185 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-12 11:37:08.187 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.42, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: Short.
2025-05-12 11:37:08.190 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.191 +05:30 [INF] Calculated investment amount: 119.08.
2025-05-12 11:37:08.193 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.58, TargetAmount: 10000, AnnualReturn: 10.3, InvestmentHorizon: Short.
2025-05-12 11:37:08.195 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.197 +05:30 [INF] Calculated investment amount: 129.87.
2025-05-12 11:37:08.200 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-12 11:37:08.202 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.65, TargetAmount: 10000, AnnualReturn: 8.5, InvestmentHorizon: Short.
2025-05-12 11:37:08.204 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.237 +05:30 [INF] Calculated investment amount: 140.16.
2025-05-12 11:37:08.239 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.35, TargetAmount: 10000, AnnualReturn: 7, InvestmentHorizon: Short.
2025-05-12 11:37:08.242 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.243 +05:30 [INF] Calculated investment amount: 117.91.
2025-05-12 11:37:08.246 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-12 11:37:08.252 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 10000, AnnualReturn: 5.2, InvestmentHorizon: Short.
2025-05-12 11:37:08.255 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.256 +05:30 [INF] Calculated investment amount: 276.5.
2025-05-12 11:37:08.258 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: Short.
2025-05-12 11:37:08.261 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.264 +05:30 [INF] Calculated investment amount: 266.67.
2025-05-12 11:37:08.267 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-12 11:37:08.272 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.8, TargetAmount: 10000, AnnualReturn: 3.5, InvestmentHorizon: Short.
2025-05-12 11:37:08.279 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.282 +05:30 [INF] Calculated investment amount: 261.38.
2025-05-12 11:37:08.286 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.2, TargetAmount: 10000, AnnualReturn: 4, InvestmentHorizon: Short.
2025-05-12 11:37:08.293 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.296 +05:30 [INF] Calculated investment amount: 295.86.
2025-05-12 11:37:08.300 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-12 11:37:08.304 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.89, TargetAmount: 10000, AnnualReturn: 5.1, InvestmentHorizon: Short.
2025-05-12 11:37:08.310 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.313 +05:30 [INF] Calculated investment amount: 352.16.
2025-05-12 11:37:08.319 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.11, TargetAmount: 10000, AnnualReturn: 5.4, InvestmentHorizon: Short.
2025-05-12 11:37:08.326 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.329 +05:30 [INF] Calculated investment amount: 369.96.
2025-05-12 11:37:08.333 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-12 11:37:08.339 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.81, TargetAmount: 10000, AnnualReturn: 8.9, InvestmentHorizon: Short.
2025-05-12 11:37:08.344 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.349 +05:30 [INF] Calculated investment amount: 152.62.
2025-05-12 11:37:08.354 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.94, TargetAmount: 10000, AnnualReturn: 9.5, InvestmentHorizon: Short.
2025-05-12 11:37:08.361 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.365 +05:30 [INF] Calculated investment amount: 161.8.
2025-05-12 11:37:08.367 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-12 11:37:08.371 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.2, TargetAmount: 10000, AnnualReturn: 6.7, InvestmentHorizon: Short.
2025-05-12 11:37:08.378 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.382 +05:30 [INF] Calculated investment amount: 105.4.
2025-05-12 11:37:08.384 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.3, TargetAmount: 10000, AnnualReturn: 7.3, InvestmentHorizon: Short.
2025-05-12 11:37:08.389 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.392 +05:30 [INF] Calculated investment amount: 112.91.
2025-05-12 11:37:08.396 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-12 11:37:08.402 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.91, TargetAmount: 10000, AnnualReturn: 10.2, InvestmentHorizon: Short.
2025-05-12 11:37:08.408 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.412 +05:30 [INF] Calculated investment amount: 157.28.
2025-05-12 11:37:08.415 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.84, TargetAmount: 10000, AnnualReturn: 9.8, InvestmentHorizon: Short.
2025-05-12 11:37:08.420 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:37:08.423 +05:30 [INF] Calculated investment amount: 152.62.
2025-05-12 11:37:08.439 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":6.25,"InvestmentAmount":516.53},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":5.75,"InvestmentAmount":482.19}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":4.79,"InvestmentAmount":378.47},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":4.21,"InvestmentAmount":341.69}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":4.63,"InvestmentAmount":356.26},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":4.37,"InvestmentAmount":341.03}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":4.59,"InvestmentAmount":416.33},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":4.41,"InvestmentAmount":401.53}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":5.87,"InvestmentAmount":514.63},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":6.13,"InvestmentAmount":534.42}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":4.42,"InvestmentAmount":397.12},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":4.58,"InvestmentAmount":409.94}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":2.21,"InvestmentAmount":190.18},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":1.79,"InvestmentAmount":158.41}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":1.42,"InvestmentAmount":119.08},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":1.58,"InvestmentAmount":129.87}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":1.65,"InvestmentAmount":140.16},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":1.35,"InvestmentAmount":117.91}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":3.06,"InvestmentAmount":276.5},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":2.94,"InvestmentAmount":266.67}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":2.8,"InvestmentAmount":261.38},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":3.2,"InvestmentAmount":295.86}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":3.89,"InvestmentAmount":352.16},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":4.11,"InvestmentAmount":369.96}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":1.81,"InvestmentAmount":152.62},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":1.94,"InvestmentAmount":161.8}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":1.2,"InvestmentAmount":105.4},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":1.3,"InvestmentAmount":112.91}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":1.91,"InvestmentAmount":157.28},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":1.84,"InvestmentAmount":152.62}}}}
2025-05-12 11:37:08.493 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 11:37:08.504 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 650.077ms
2025-05-12 11:37:08.508 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 11:37:08.511 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=Short - 200 null application/json; charset=utf-8 682.6961ms
2025-05-12 11:56:47.140 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 11:56:47.145 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:56:47.147 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 6.9981ms
2025-05-12 11:56:47.151 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 11:56:47.156 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:56:47.158 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:56:47.160 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 11:56:47.165 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 11:56:47.166 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 11:56:47.169 +05:30 [INF] Users loaded successfully from JSON file.
2025-05-12 11:56:47.285 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 11:56:47.288 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 124.5994ms
2025-05-12 11:56:47.290 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 11:56:47.292 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 140.3771ms
2025-05-12 11:57:04.852 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 11:57:04.857 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:57:04.859 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 6.3764ms
2025-05-12 11:57:04.884 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 109
2025-05-12 11:57:04.893 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:57:04.898 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 11:57:04.900 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 11:57:04.908 +05:30 [INF] Starting allocation calculation...
2025-05-12 11:57:04.911 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 11:57:04.912 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 11:57:04.914 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 11:57:04.916 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 11:57:04.918 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 11:57:04.922 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-12 11:57:04.924 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-12 11:57:04.927 +05:30 [INF] Sub-allocations for equity: {"Large Cap":10,"Mid Cap":7.5,"Small Cap":7.5}
2025-05-12 11:57:04.930 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 11:57:04.932 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":2,"Energy":1.5,"Agriculture":1.5}
2025-05-12 11:57:04.933 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-12 11:57:04.936 +05:30 [INF] Sub-allocations for realEstate: {"REITs":0,"Residential Prop":0,"Commercial Prop":0}
2025-05-12 11:57:04.940 +05:30 [INF] Added sub-assets for equity: {"Large Cap":10,"Mid Cap":7.5,"Small Cap":7.5}
2025-05-12 11:57:04.941 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 11:57:04.943 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":2,"Energy":1.5,"Agriculture":1.5}
2025-05-12 11:57:04.945 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-12 11:57:04.948 +05:30 [INF] Added sub-assets for realEstate: {"REITs":0,"Residential Prop":0,"Commercial Prop":0}
2025-05-12 11:57:04.950 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":25,"subAssets":{"Large Cap":10,"Mid Cap":7.5,"Small Cap":7.5}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":5,"subAssets":{"Precious Metals":2,"Energy":1.5,"Agriculture":1.5}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":0,"subAssets":{"REITs":0,"Residential Prop":0,"Commercial Prop":0}}}
2025-05-12 11:57:04.954 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 11:57:04.957 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 50.6782ms
2025-05-12 11:57:04.960 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 11:57:04.961 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 77.278ms
2025-05-12 11:57:04.974 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Short - null null
2025-05-12 11:57:04.981 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:57:04.984 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Short - 204 null null 10.3431ms
2025-05-12 11:57:04.993 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Short - application/json 473
2025-05-12 11:57:04.998 +05:30 [INF] CORS policy execution successful.
2025-05-12 11:57:05.000 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 11:57:05.005 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, System.String) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 11:57:05.012 +05:30 [INF] Starting product allocation calculation.
2025-05-12 11:57:05.013 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-12 11:57:05.016 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-12 11:57:05.123 +05:30 [INF] Product data loaded successfully.
2025-05-12 11:57:05.124 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-12 11:57:05.126 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.21, TargetAmount: 100000, AnnualReturn: 10, InvestmentHorizon: Short.
2025-05-12 11:57:05.128 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.129 +05:30 [INF] Calculated investment amount: 4305.79.
2025-05-12 11:57:05.130 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.79, TargetAmount: 100000, AnnualReturn: 9.2, InvestmentHorizon: Short.
2025-05-12 11:57:05.133 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.135 +05:30 [INF] Calculated investment amount: 4016.89.
2025-05-12 11:57:05.136 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-12 11:57:05.151 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.99, TargetAmount: 100000, AnnualReturn: 12.5, InvestmentHorizon: Short.
2025-05-12 11:57:05.159 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.164 +05:30 [INF] Calculated investment amount: 3152.59.
2025-05-12 11:57:05.166 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.51, TargetAmount: 100000, AnnualReturn: 11, InvestmentHorizon: Short.
2025-05-12 11:57:05.174 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.177 +05:30 [INF] Calculated investment amount: 2848.79.
2025-05-12 11:57:05.179 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-12 11:57:05.181 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.86, TargetAmount: 100000, AnnualReturn: 14, InvestmentHorizon: Short.
2025-05-12 11:57:05.183 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.184 +05:30 [INF] Calculated investment amount: 2970.14.
2025-05-12 11:57:05.186 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.64, TargetAmount: 100000, AnnualReturn: 13.2, InvestmentHorizon: Short.
2025-05-12 11:57:05.190 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.192 +05:30 [INF] Calculated investment amount: 2840.59.
2025-05-12 11:57:05.193 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-12 11:57:05.195 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.59, TargetAmount: 100000, AnnualReturn: 5, InvestmentHorizon: Short.
2025-05-12 11:57:05.198 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.199 +05:30 [INF] Calculated investment amount: 4163.27.
2025-05-12 11:57:05.201 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.41, TargetAmount: 100000, AnnualReturn: 4.8, InvestmentHorizon: Short.
2025-05-12 11:57:05.204 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.206 +05:30 [INF] Calculated investment amount: 4015.28.
2025-05-12 11:57:05.207 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-12 11:57:05.208 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.87, TargetAmount: 100000, AnnualReturn: 6.8, InvestmentHorizon: Short.
2025-05-12 11:57:05.210 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.211 +05:30 [INF] Calculated investment amount: 5146.31.
2025-05-12 11:57:05.213 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.13, TargetAmount: 100000, AnnualReturn: 7.1, InvestmentHorizon: Short.
2025-05-12 11:57:05.215 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.216 +05:30 [INF] Calculated investment amount: 5344.19.
2025-05-12 11:57:05.217 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-12 11:57:05.220 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.42, TargetAmount: 100000, AnnualReturn: 5.5, InvestmentHorizon: Short.
2025-05-12 11:57:05.222 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.223 +05:30 [INF] Calculated investment amount: 3971.16.
2025-05-12 11:57:05.224 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.58, TargetAmount: 100000, AnnualReturn: 5.7, InvestmentHorizon: Short.
2025-05-12 11:57:05.226 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.227 +05:30 [INF] Calculated investment amount: 4099.35.
2025-05-12 11:57:05.229 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-12 11:57:05.230 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.11, TargetAmount: 100000, AnnualReturn: 7.8, InvestmentHorizon: Short.
2025-05-12 11:57:05.233 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.234 +05:30 [INF] Calculated investment amount: 955.18.
2025-05-12 11:57:05.236 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.89, TargetAmount: 100000, AnnualReturn: 6.3, InvestmentHorizon: Short.
2025-05-12 11:57:05.238 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.239 +05:30 [INF] Calculated investment amount: 787.63.
2025-05-12 11:57:05.241 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-12 11:57:05.242 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.71, TargetAmount: 100000, AnnualReturn: 9.2, InvestmentHorizon: Short.
2025-05-12 11:57:05.245 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.247 +05:30 [INF] Calculated investment amount: 595.41.
2025-05-12 11:57:05.249 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.79, TargetAmount: 100000, AnnualReturn: 10.3, InvestmentHorizon: Short.
2025-05-12 11:57:05.251 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.253 +05:30 [INF] Calculated investment amount: 649.35.
2025-05-12 11:57:05.254 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-12 11:57:05.256 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.82, TargetAmount: 100000, AnnualReturn: 8.5, InvestmentHorizon: Short.
2025-05-12 11:57:05.258 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.260 +05:30 [INF] Calculated investment amount: 696.55.
2025-05-12 11:57:05.261 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.68, TargetAmount: 100000, AnnualReturn: 7, InvestmentHorizon: Short.
2025-05-12 11:57:05.264 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.265 +05:30 [INF] Calculated investment amount: 593.94.
2025-05-12 11:57:05.267 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-12 11:57:05.268 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.12, TargetAmount: 100000, AnnualReturn: 5.2, InvestmentHorizon: Short.
2025-05-12 11:57:05.271 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.272 +05:30 [INF] Calculated investment amount: 5529.93.
2025-05-12 11:57:05.273 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.88, TargetAmount: 100000, AnnualReturn: 5, InvestmentHorizon: Short.
2025-05-12 11:57:05.276 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.277 +05:30 [INF] Calculated investment amount: 5333.33.
2025-05-12 11:57:05.278 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-12 11:57:05.280 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.6, TargetAmount: 100000, AnnualReturn: 3.5, InvestmentHorizon: Short.
2025-05-12 11:57:05.282 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.283 +05:30 [INF] Calculated investment amount: 5227.66.
2025-05-12 11:57:05.284 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.4, TargetAmount: 100000, AnnualReturn: 4, InvestmentHorizon: Short.
2025-05-12 11:57:05.286 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.287 +05:30 [INF] Calculated investment amount: 5917.16.
2025-05-12 11:57:05.289 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-12 11:57:05.290 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.77, TargetAmount: 100000, AnnualReturn: 5.1, InvestmentHorizon: Short.
2025-05-12 11:57:05.292 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.294 +05:30 [INF] Calculated investment amount: 7034.21.
2025-05-12 11:57:05.296 +05:30 [INF] Calculating investment amount with PercentageSplit: 8.23, TargetAmount: 100000, AnnualReturn: 5.4, InvestmentHorizon: Short.
2025-05-12 11:57:05.298 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.299 +05:30 [INF] Calculated investment amount: 7408.3.
2025-05-12 11:57:05.300 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-12 11:57:05.301 +05:30 [INF] Calculating investment amount with PercentageSplit: 0, TargetAmount: 100000, AnnualReturn: 8.9, InvestmentHorizon: Short.
2025-05-12 11:57:05.315 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.320 +05:30 [INF] Calculated investment amount: 0.
2025-05-12 11:57:05.325 +05:30 [INF] Calculating investment amount with PercentageSplit: 0, TargetAmount: 100000, AnnualReturn: 9.5, InvestmentHorizon: Short.
2025-05-12 11:57:05.331 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.333 +05:30 [INF] Calculated investment amount: 0.
2025-05-12 11:57:05.334 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-12 11:57:05.337 +05:30 [INF] Calculating investment amount with PercentageSplit: 0, TargetAmount: 100000, AnnualReturn: 6.7, InvestmentHorizon: Short.
2025-05-12 11:57:05.340 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.341 +05:30 [INF] Calculated investment amount: 0.
2025-05-12 11:57:05.343 +05:30 [INF] Calculating investment amount with PercentageSplit: 0, TargetAmount: 100000, AnnualReturn: 7.3, InvestmentHorizon: Short.
2025-05-12 11:57:05.346 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.347 +05:30 [INF] Calculated investment amount: 0.
2025-05-12 11:57:05.349 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-12 11:57:05.351 +05:30 [INF] Calculating investment amount with PercentageSplit: 0, TargetAmount: 100000, AnnualReturn: 10.2, InvestmentHorizon: Short.
2025-05-12 11:57:05.354 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.356 +05:30 [INF] Calculated investment amount: 0.
2025-05-12 11:57:05.357 +05:30 [INF] Calculating investment amount with PercentageSplit: 0, TargetAmount: 100000, AnnualReturn: 9.8, InvestmentHorizon: Short.
2025-05-12 11:57:05.360 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 11:57:05.361 +05:30 [INF] Calculated investment amount: 0.
2025-05-12 11:57:05.363 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":5.21,"InvestmentAmount":4305.79},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":4.79,"InvestmentAmount":4016.89}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":3.99,"InvestmentAmount":3152.59},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":3.51,"InvestmentAmount":2848.79}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":3.86,"InvestmentAmount":2970.14},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":3.64,"InvestmentAmount":2840.59}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":4.59,"InvestmentAmount":4163.27},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":4.41,"InvestmentAmount":4015.28}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":5.87,"InvestmentAmount":5146.31},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":6.13,"InvestmentAmount":5344.19}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":4.42,"InvestmentAmount":3971.16},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":4.58,"InvestmentAmount":4099.35}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":1.11,"InvestmentAmount":955.18},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":0.89,"InvestmentAmount":787.63}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":0.71,"InvestmentAmount":595.41},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":0.79,"InvestmentAmount":649.35}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":0.82,"InvestmentAmount":696.55},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":0.68,"InvestmentAmount":593.94}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":6.12,"InvestmentAmount":5529.93},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":5.88,"InvestmentAmount":5333.33}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":5.6,"InvestmentAmount":5227.66},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":6.4,"InvestmentAmount":5917.16}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":7.77,"InvestmentAmount":7034.21},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":8.23,"InvestmentAmount":7408.3}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":0,"InvestmentAmount":0},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":0,"InvestmentAmount":0}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":0,"InvestmentAmount":0},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":0,"InvestmentAmount":0}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":0,"InvestmentAmount":0},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":0,"InvestmentAmount":0}}}}
2025-05-12 11:57:05.413 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 11:57:05.417 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 407.7596ms
2025-05-12 11:57:05.420 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 11:57:05.422 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Short - 200 null application/json; charset=utf-8 428.779ms
2025-05-12 12:04:10.618 +05:30 [INF] Application is shutting down...
2025-05-12 12:04:19.867 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 12:04:20.099 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 12:04:20.105 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 12:04:20.107 +05:30 [INF] Hosting environment: Development
2025-05-12 12:04:20.109 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 12:04:39.023 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 12:04:39.291 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:04:39.306 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 289.4895ms
2025-05-12 12:04:39.330 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 105
2025-05-12 12:04:39.527 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:04:39.542 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:04:39.606 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:04:39.813 +05:30 [INF] Starting allocation calculation...
2025-05-12 12:04:39.882 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 12:04:39.885 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 12:04:39.909 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 12:04:39.914 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 12:04:39.917 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 12:04:39.920 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 12:04:39.937 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 12:04:39.976 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 12:04:39.981 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 12:04:39.987 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:04:39.991 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 12:04:39.996 +05:30 [INF] Sub-allocations for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 12:04:40.001 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 12:04:40.005 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 12:04:40.010 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:04:40.016 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 12:04:40.020 +05:30 [INF] Added sub-assets for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 12:04:40.080 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 12:04:40.093 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 12:04:40.114 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 495.3079ms
2025-05-12 12:04:40.118 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:04:40.127 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 797.3371ms
2025-05-12 12:04:40.139 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Short - null null
2025-05-12 12:04:40.150 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:04:40.153 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Short - 204 null null 13.8184ms
2025-05-12 12:04:40.161 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Short - application/json 472
2025-05-12 12:04:40.171 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:04:40.178 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 12:04:40.199 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, System.String) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:04:40.262 +05:30 [INF] Starting product allocation calculation.
2025-05-12 12:04:40.266 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-12 12:04:40.272 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-12 12:04:40.525 +05:30 [INF] Product data loaded successfully.
2025-05-12 12:04:40.534 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-12 12:04:40.544 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.25, TargetAmount: 100000, AnnualReturn: 10, InvestmentHorizon: Short.
2025-05-12 12:04:40.551 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.554 +05:30 [INF] Calculated investment amount: 5165.29.
2025-05-12 12:04:40.559 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.75, TargetAmount: 100000, AnnualReturn: 9.2, InvestmentHorizon: Short.
2025-05-12 12:04:40.567 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.572 +05:30 [INF] Calculated investment amount: 4821.95.
2025-05-12 12:04:40.577 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-12 12:04:40.582 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.79, TargetAmount: 100000, AnnualReturn: 12.5, InvestmentHorizon: Short.
2025-05-12 12:04:40.589 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.594 +05:30 [INF] Calculated investment amount: 3784.69.
2025-05-12 12:04:40.598 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.21, TargetAmount: 100000, AnnualReturn: 11, InvestmentHorizon: Short.
2025-05-12 12:04:40.606 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.609 +05:30 [INF] Calculated investment amount: 3416.93.
2025-05-12 12:04:40.614 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-12 12:04:40.620 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.63, TargetAmount: 100000, AnnualReturn: 14, InvestmentHorizon: Short.
2025-05-12 12:04:40.627 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.631 +05:30 [INF] Calculated investment amount: 3562.63.
2025-05-12 12:04:40.635 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.37, TargetAmount: 100000, AnnualReturn: 13.2, InvestmentHorizon: Short.
2025-05-12 12:04:40.641 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.645 +05:30 [INF] Calculated investment amount: 3410.27.
2025-05-12 12:04:40.650 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-12 12:04:40.654 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.59, TargetAmount: 100000, AnnualReturn: 5, InvestmentHorizon: Short.
2025-05-12 12:04:40.661 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.665 +05:30 [INF] Calculated investment amount: 4163.27.
2025-05-12 12:04:40.669 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.41, TargetAmount: 100000, AnnualReturn: 4.8, InvestmentHorizon: Short.
2025-05-12 12:04:40.675 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.679 +05:30 [INF] Calculated investment amount: 4015.28.
2025-05-12 12:04:40.683 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-12 12:04:40.687 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.87, TargetAmount: 100000, AnnualReturn: 6.8, InvestmentHorizon: Short.
2025-05-12 12:04:40.695 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.699 +05:30 [INF] Calculated investment amount: 5146.31.
2025-05-12 12:04:40.702 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.13, TargetAmount: 100000, AnnualReturn: 7.1, InvestmentHorizon: Short.
2025-05-12 12:04:40.710 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.714 +05:30 [INF] Calculated investment amount: 5344.19.
2025-05-12 12:04:40.718 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-12 12:04:40.723 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.42, TargetAmount: 100000, AnnualReturn: 5.5, InvestmentHorizon: Short.
2025-05-12 12:04:40.729 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.734 +05:30 [INF] Calculated investment amount: 3971.16.
2025-05-12 12:04:40.737 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.58, TargetAmount: 100000, AnnualReturn: 5.7, InvestmentHorizon: Short.
2025-05-12 12:04:40.744 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.748 +05:30 [INF] Calculated investment amount: 4099.35.
2025-05-12 12:04:40.753 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-12 12:04:40.758 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 100000, AnnualReturn: 7.8, InvestmentHorizon: Short.
2025-05-12 12:04:40.766 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.769 +05:30 [INF] Calculated investment amount: 1901.76.
2025-05-12 12:04:40.773 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.79, TargetAmount: 100000, AnnualReturn: 6.3, InvestmentHorizon: Short.
2025-05-12 12:04:40.779 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.783 +05:30 [INF] Calculated investment amount: 1584.11.
2025-05-12 12:04:40.788 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-12 12:04:40.794 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.42, TargetAmount: 100000, AnnualReturn: 9.2, InvestmentHorizon: Short.
2025-05-12 12:04:40.801 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.805 +05:30 [INF] Calculated investment amount: 1190.81.
2025-05-12 12:04:40.810 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.58, TargetAmount: 100000, AnnualReturn: 10.3, InvestmentHorizon: Short.
2025-05-12 12:04:40.816 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.819 +05:30 [INF] Calculated investment amount: 1298.69.
2025-05-12 12:04:40.824 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-12 12:04:40.828 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.65, TargetAmount: 100000, AnnualReturn: 8.5, InvestmentHorizon: Short.
2025-05-12 12:04:40.835 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.838 +05:30 [INF] Calculated investment amount: 1401.6.
2025-05-12 12:04:40.842 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.35, TargetAmount: 100000, AnnualReturn: 7, InvestmentHorizon: Short.
2025-05-12 12:04:40.848 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.853 +05:30 [INF] Calculated investment amount: 1179.14.
2025-05-12 12:04:40.857 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-12 12:04:40.862 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.06, TargetAmount: 100000, AnnualReturn: 5.2, InvestmentHorizon: Short.
2025-05-12 12:04:40.868 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.871 +05:30 [INF] Calculated investment amount: 2764.97.
2025-05-12 12:04:40.875 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.94, TargetAmount: 100000, AnnualReturn: 5, InvestmentHorizon: Short.
2025-05-12 12:04:40.882 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.885 +05:30 [INF] Calculated investment amount: 2666.67.
2025-05-12 12:04:40.888 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-12 12:04:40.893 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.8, TargetAmount: 100000, AnnualReturn: 3.5, InvestmentHorizon: Short.
2025-05-12 12:04:40.900 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.904 +05:30 [INF] Calculated investment amount: 2613.83.
2025-05-12 12:04:40.907 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.2, TargetAmount: 100000, AnnualReturn: 4, InvestmentHorizon: Short.
2025-05-12 12:04:40.914 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.918 +05:30 [INF] Calculated investment amount: 2958.58.
2025-05-12 12:04:40.922 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-12 12:04:40.927 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.89, TargetAmount: 100000, AnnualReturn: 5.1, InvestmentHorizon: Short.
2025-05-12 12:04:40.934 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.937 +05:30 [INF] Calculated investment amount: 3521.63.
2025-05-12 12:04:40.940 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.11, TargetAmount: 100000, AnnualReturn: 5.4, InvestmentHorizon: Short.
2025-05-12 12:04:40.947 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.952 +05:30 [INF] Calculated investment amount: 3699.65.
2025-05-12 12:04:40.956 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-12 12:04:40.962 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.81, TargetAmount: 100000, AnnualReturn: 8.9, InvestmentHorizon: Short.
2025-05-12 12:04:40.967 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.971 +05:30 [INF] Calculated investment amount: 1526.24.
2025-05-12 12:04:40.975 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.94, TargetAmount: 100000, AnnualReturn: 9.5, InvestmentHorizon: Short.
2025-05-12 12:04:40.983 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:40.987 +05:30 [INF] Calculated investment amount: 1617.98.
2025-05-12 12:04:40.992 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-12 12:04:40.997 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.2, TargetAmount: 100000, AnnualReturn: 6.7, InvestmentHorizon: Short.
2025-05-12 12:04:41.003 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:41.007 +05:30 [INF] Calculated investment amount: 1054.03.
2025-05-12 12:04:41.012 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.3, TargetAmount: 100000, AnnualReturn: 7.3, InvestmentHorizon: Short.
2025-05-12 12:04:41.020 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:41.024 +05:30 [INF] Calculated investment amount: 1129.13.
2025-05-12 12:04:41.029 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-12 12:04:41.035 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.91, TargetAmount: 100000, AnnualReturn: 10.2, InvestmentHorizon: Short.
2025-05-12 12:04:41.041 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:41.042 +05:30 [INF] Calculated investment amount: 1572.79.
2025-05-12 12:04:41.044 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.84, TargetAmount: 100000, AnnualReturn: 9.8, InvestmentHorizon: Short.
2025-05-12 12:04:41.051 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:04:41.054 +05:30 [INF] Calculated investment amount: 1526.21.
2025-05-12 12:04:41.096 +05:30 [INF] Product allocations saved successfully to ProductAllocations.json
2025-05-12 12:04:41.102 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":6.25,"InvestmentAmount":5165.29},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":5.75,"InvestmentAmount":4821.95}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":4.79,"InvestmentAmount":3784.69},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":4.21,"InvestmentAmount":3416.93}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":4.63,"InvestmentAmount":3562.63},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":4.37,"InvestmentAmount":3410.27}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":4.59,"InvestmentAmount":4163.27},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":4.41,"InvestmentAmount":4015.28}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":5.87,"InvestmentAmount":5146.31},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":6.13,"InvestmentAmount":5344.19}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":4.42,"InvestmentAmount":3971.16},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":4.58,"InvestmentAmount":4099.35}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":2.21,"InvestmentAmount":1901.76},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":1.79,"InvestmentAmount":1584.11}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":1.42,"InvestmentAmount":1190.81},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":1.58,"InvestmentAmount":1298.69}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":1.65,"InvestmentAmount":1401.6},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":1.35,"InvestmentAmount":1179.14}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":3.06,"InvestmentAmount":2764.97},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":2.94,"InvestmentAmount":2666.67}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":2.8,"InvestmentAmount":2613.83},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":3.2,"InvestmentAmount":2958.58}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":3.89,"InvestmentAmount":3521.63},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":4.11,"InvestmentAmount":3699.65}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":1.81,"InvestmentAmount":1526.24},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":1.94,"InvestmentAmount":1617.98}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":1.2,"InvestmentAmount":1054.03},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":1.3,"InvestmentAmount":1129.13}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":1.91,"InvestmentAmount":1572.79},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":1.84,"InvestmentAmount":1526.21}}}}
2025-05-12 12:04:41.157 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:04:41.170 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 962.7237ms
2025-05-12 12:04:41.175 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 12:04:41.179 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Short - 200 null application/json; charset=utf-8 1018.1458ms
2025-05-12 12:05:28.493 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 12:05:28.514 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:05:28.521 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 27.8655ms
2025-05-12 12:05:28.550 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 109
2025-05-12 12:05:28.571 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:05:28.578 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:05:28.582 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:05:28.593 +05:30 [INF] Starting allocation calculation...
2025-05-12 12:05:28.602 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 12:05:28.605 +05:30 [INF] Looking up base allocation for key: High+Mod
2025-05-12 12:05:28.608 +05:30 [INF] Base allocation found: {"equity":60,"fixedIncome":20,"commodities":10,"cash":5,"realEstate":5}
2025-05-12 12:05:28.612 +05:30 [INF] Looking up age adjustment rules for key: 60+
2025-05-12 12:05:28.615 +05:30 [INF] Age adjustments found: {"equity":-20,"fixedIncome":15,"realEstate":-5,"cash":10}
2025-05-12 12:05:28.618 +05:30 [INF] Looking up goal tuning for goal: Big Purchase
2025-05-12 12:05:28.623 +05:30 [INF] Goal tuning found: {"balanced":true}
2025-05-12 12:05:28.634 +05:30 [INF] Sub-allocations for equity: {"Large Cap":7.5,"Mid Cap":10,"Small Cap":12.5}
2025-05-12 12:05:28.639 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":5,"Corp Bonds":20,"Fixed Dep":5}
2025-05-12 12:05:28.642 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":2.5,"Energy":6.25,"Agriculture":6.25}
2025-05-12 12:05:28.645 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":10,"Savings Acc":5,"T. Bill":5}
2025-05-12 12:05:28.650 +05:30 [INF] Sub-allocations for realEstate: {"REITs":1.11,"Residential Prop":1.11,"Commercial Prop":2.78}
2025-05-12 12:05:28.654 +05:30 [INF] Added sub-assets for equity: {"Large Cap":7.5,"Mid Cap":10,"Small Cap":12.5}
2025-05-12 12:05:28.658 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":5,"Corp Bonds":20,"Fixed Dep":5}
2025-05-12 12:05:28.662 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":2.5,"Energy":6.25,"Agriculture":6.25}
2025-05-12 12:05:28.667 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":10,"Savings Acc":5,"T. Bill":5}
2025-05-12 12:05:28.671 +05:30 [INF] Added sub-assets for realEstate: {"REITs":1.11,"Residential Prop":1.11,"Commercial Prop":2.78}
2025-05-12 12:05:28.676 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":7.5,"Mid Cap":10,"Small Cap":12.5}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":5,"Corp Bonds":20,"Fixed Dep":5}},"commodities":{"percentage":15,"subAssets":{"Precious Metals":2.5,"Energy":6.25,"Agriculture":6.25}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":10,"Savings Acc":5,"T. Bill":5}},"realEstate":{"percentage":5,"subAssets":{"REITs":1.11,"Residential Prop":1.11,"Commercial Prop":2.78}}}
2025-05-12 12:05:28.682 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 12:05:28.687 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 94.6304ms
2025-05-12 12:05:28.691 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:05:28.695 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 145.2666ms
2025-05-12 12:05:28.714 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=200000&investmentHorizon=Moderate - null null
2025-05-12 12:05:28.724 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:05:28.728 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=200000&investmentHorizon=Moderate - 204 null null 14.389ms
2025-05-12 12:05:28.740 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=200000&investmentHorizon=Moderate - application/json 486
2025-05-12 12:05:28.750 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:05:28.752 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 12:05:28.757 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, System.String) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:05:28.774 +05:30 [INF] Starting product allocation calculation.
2025-05-12 12:05:28.777 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-12 12:05:28.784 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-12 12:05:29.022 +05:30 [INF] Product data loaded successfully.
2025-05-12 12:05:29.026 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-12 12:05:29.031 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.91, TargetAmount: 200000, AnnualReturn: 10, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.037 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.040 +05:30 [INF] Calculated investment amount: 4855.6.
2025-05-12 12:05:29.043 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.59, TargetAmount: 200000, AnnualReturn: 9.2, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.050 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.053 +05:30 [INF] Calculated investment amount: 4623.93.
2025-05-12 12:05:29.056 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-12 12:05:29.060 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.32, TargetAmount: 200000, AnnualReturn: 12.5, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.067 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.070 +05:30 [INF] Calculated investment amount: 5904.44.
2025-05-12 12:05:29.074 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.68, TargetAmount: 200000, AnnualReturn: 11, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.079 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.083 +05:30 [INF] Calculated investment amount: 5554.7.
2025-05-12 12:05:29.087 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-12 12:05:29.092 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.43, TargetAmount: 200000, AnnualReturn: 14, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.098 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.102 +05:30 [INF] Calculated investment amount: 6679.08.
2025-05-12 12:05:29.105 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.07, TargetAmount: 200000, AnnualReturn: 13.2, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.111 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.114 +05:30 [INF] Calculated investment amount: 6531.1.
2025-05-12 12:05:29.118 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-12 12:05:29.123 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.55, TargetAmount: 200000, AnnualReturn: 5, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.128 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.132 +05:30 [INF] Calculated investment amount: 3995.98.
2025-05-12 12:05:29.135 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.45, TargetAmount: 200000, AnnualReturn: 4.8, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.141 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.144 +05:30 [INF] Calculated investment amount: 3876.05.
2025-05-12 12:05:29.149 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-12 12:05:29.153 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.78, TargetAmount: 200000, AnnualReturn: 6.8, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.159 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.162 +05:30 [INF] Calculated investment amount: 14077.08.
2025-05-12 12:05:29.166 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.22, TargetAmount: 200000, AnnualReturn: 7.1, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.172 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.175 +05:30 [INF] Calculated investment amount: 14505.53.
2025-05-12 12:05:29.178 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-12 12:05:29.184 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.46, TargetAmount: 200000, AnnualReturn: 5.5, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.191 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.194 +05:30 [INF] Calculated investment amount: 3764.46.
2025-05-12 12:05:29.197 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.54, TargetAmount: 200000, AnnualReturn: 5.7, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.203 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.207 +05:30 [INF] Calculated investment amount: 3850.25.
2025-05-12 12:05:29.210 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-12 12:05:29.215 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.38, TargetAmount: 200000, AnnualReturn: 7.8, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.221 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.225 +05:30 [INF] Calculated investment amount: 1895.9.
2025-05-12 12:05:29.228 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.12, TargetAmount: 200000, AnnualReturn: 6.3, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.234 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.238 +05:30 [INF] Calculated investment amount: 1650.37.
2025-05-12 12:05:29.241 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-12 12:05:29.245 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.95, TargetAmount: 200000, AnnualReturn: 9.2, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.251 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.254 +05:30 [INF] Calculated investment amount: 3799.61.
2025-05-12 12:05:29.258 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.3, TargetAmount: 200000, AnnualReturn: 10.3, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.263 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.266 +05:30 [INF] Calculated investment amount: 4042.65.
2025-05-12 12:05:29.268 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-12 12:05:29.273 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.43, TargetAmount: 200000, AnnualReturn: 8.5, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.281 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.284 +05:30 [INF] Calculated investment amount: 4562.21.
2025-05-12 12:05:29.287 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.82, TargetAmount: 200000, AnnualReturn: 7, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.294 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.298 +05:30 [INF] Calculated investment amount: 4021.24.
2025-05-12 12:05:29.301 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-12 12:05:29.306 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.1, TargetAmount: 200000, AnnualReturn: 5.2, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.313 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.316 +05:30 [INF] Calculated investment amount: 7916.29.
2025-05-12 12:05:29.319 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.9, TargetAmount: 200000, AnnualReturn: 5, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.326 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.330 +05:30 [INF] Calculated investment amount: 7678.56.
2025-05-12 12:05:29.334 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-12 12:05:29.338 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.33, TargetAmount: 200000, AnnualReturn: 3.5, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.344 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.348 +05:30 [INF] Calculated investment amount: 3923.59.
2025-05-12 12:05:29.351 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.67, TargetAmount: 200000, AnnualReturn: 4, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.357 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.361 +05:30 [INF] Calculated investment amount: 4389.09.
2025-05-12 12:05:29.364 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-12 12:05:29.368 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.43, TargetAmount: 200000, AnnualReturn: 5.1, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.375 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.378 +05:30 [INF] Calculated investment amount: 3789.86.
2025-05-12 12:05:29.382 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.57, TargetAmount: 200000, AnnualReturn: 5.4, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.388 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.390 +05:30 [INF] Calculated investment amount: 3951.48.
2025-05-12 12:05:29.392 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-12 12:05:29.396 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.54, TargetAmount: 200000, AnnualReturn: 8.9, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.400 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.403 +05:30 [INF] Calculated investment amount: 705.15.
2025-05-12 12:05:29.406 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.57, TargetAmount: 200000, AnnualReturn: 9.5, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.414 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.417 +05:30 [INF] Calculated investment amount: 724.16.
2025-05-12 12:05:29.421 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-12 12:05:29.424 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.53, TargetAmount: 200000, AnnualReturn: 6.7, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.428 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.431 +05:30 [INF] Calculated investment amount: 766.45.
2025-05-12 12:05:29.434 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.58, TargetAmount: 200000, AnnualReturn: 7.3, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.439 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.442 +05:30 [INF] Calculated investment amount: 815.57.
2025-05-12 12:05:29.445 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-12 12:05:29.450 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.42, TargetAmount: 200000, AnnualReturn: 10.2, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.454 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.456 +05:30 [INF] Calculated investment amount: 1747.47.
2025-05-12 12:05:29.458 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.36, TargetAmount: 200000, AnnualReturn: 9.8, InvestmentHorizon: Moderate.
2025-05-12 12:05:29.463 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:05:29.466 +05:30 [INF] Calculated investment amount: 1704.34.
2025-05-12 12:05:29.474 +05:30 [INF] Product allocations saved successfully to ProductAllocations.json
2025-05-12 12:05:29.477 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":3.91,"InvestmentAmount":4855.6},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":3.59,"InvestmentAmount":4623.93}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":5.32,"InvestmentAmount":5904.44},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":4.68,"InvestmentAmount":5554.7}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":6.43,"InvestmentAmount":6679.08},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":6.07,"InvestmentAmount":6531.1}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":2.55,"InvestmentAmount":3995.98},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":2.45,"InvestmentAmount":3876.05}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":9.78,"InvestmentAmount":14077.08},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":10.22,"InvestmentAmount":14505.53}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":2.46,"InvestmentAmount":3764.46},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":2.54,"InvestmentAmount":3850.25}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":1.38,"InvestmentAmount":1895.9},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":1.12,"InvestmentAmount":1650.37}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":2.95,"InvestmentAmount":3799.61},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":3.3,"InvestmentAmount":4042.65}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":3.43,"InvestmentAmount":4562.21},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":2.82,"InvestmentAmount":4021.24}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":5.1,"InvestmentAmount":7916.29},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":4.9,"InvestmentAmount":7678.56}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":2.33,"InvestmentAmount":3923.59},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":2.67,"InvestmentAmount":4389.09}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":2.43,"InvestmentAmount":3789.86},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":2.57,"InvestmentAmount":3951.48}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":0.54,"InvestmentAmount":705.15},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":0.57,"InvestmentAmount":724.16}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":0.53,"InvestmentAmount":766.45},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":0.58,"InvestmentAmount":815.57}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":1.42,"InvestmentAmount":1747.47},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":1.36,"InvestmentAmount":1704.34}}}}
2025-05-12 12:05:29.521 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:05:29.527 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 760.0425ms
2025-05-12 12:05:29.530 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 12:05:29.532 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=200000&investmentHorizon=Moderate - 200 null application/json; charset=utf-8 792.1564ms
2025-05-12 12:08:04.191 +05:30 [INF] Application is shutting down...
2025-05-12 12:08:09.277 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 12:08:09.720 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 12:08:09.740 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 12:08:09.746 +05:30 [INF] Hosting environment: Development
2025-05-12 12:08:09.756 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 12:08:13.113 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/swagger/index.html - null null
2025-05-12 12:08:13.535 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/swagger/index.html - 200 null text/html;charset=utf-8 424.5119ms
2025-05-12 12:08:13.872 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/swagger/v1/swagger.json - null null
2025-05-12 12:08:14.177 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 305.8215ms
2025-05-12 12:08:19.825 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:08:19.850 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 12:08:19.868 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 12:08:19.872 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 401 0 null 47.1335ms
2025-05-12 12:08:38.805 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 12:08:38.818 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:08:38.822 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 16.7018ms
2025-05-12 12:08:38.829 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 12:08:38.835 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:08:38.841 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 12:08:38.902 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 12:08:39.035 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 12:08:39.039 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 12:08:39.043 +05:30 [INF] Users loaded successfully from JSON file.
2025-05-12 12:08:39.373 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:08:39.423 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 508.7587ms
2025-05-12 12:08:39.429 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 12:08:39.434 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 604.7427ms
2025-05-12 12:08:44.060 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:08:44.068 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 12:08:44.071 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 12:08:44.076 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 401 0 null 15.8573ms
2025-05-12 12:09:08.701 +05:30 [INF] Application is shutting down...
2025-05-12 12:09:14.176 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 12:09:14.411 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 12:09:14.416 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 12:09:14.418 +05:30 [INF] Hosting environment: Development
2025-05-12 12:09:14.421 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 12:09:17.940 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:09:18.012 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:09:18.037 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:09:18.044 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:09:18.052 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:09:18.195 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:09:18.264 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 218.6795ms
2025-05-12 12:09:18.269 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:09:18.277 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 338.4406ms
2025-05-12 12:09:46.554 +05:30 [INF] Application is shutting down...
2025-05-12 12:09:51.207 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 12:09:51.395 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 12:09:51.400 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 12:09:51.402 +05:30 [INF] Hosting environment: Development
2025-05-12 12:09:51.404 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 12:09:53.965 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:09:54.033 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 12:09:54.040 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 12:09:54.047 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 401 0 null 84.1961ms
2025-05-12 12:14:27.430 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 12:14:27.447 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:14:27.452 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 23.3044ms
2025-05-12 12:14:27.459 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 105
2025-05-12 12:14:27.609 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:14:27.620 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:14:27.684 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:14:27.861 +05:30 [INF] Starting allocation calculation...
2025-05-12 12:14:27.932 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 12:14:27.934 +05:30 [INF] Looking up base allocation for key: High+Mod
2025-05-12 12:14:27.950 +05:30 [INF] Base allocation found: {"equity":60,"fixedIncome":20,"commodities":10,"cash":5,"realEstate":5}
2025-05-12 12:14:27.953 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 12:14:27.955 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 12:14:27.957 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 12:14:27.966 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 12:14:27.994 +05:30 [INF] Sub-allocations for equity: {"Large Cap":13.75,"Mid Cap":18.33,"Small Cap":22.92}
2025-05-12 12:14:27.998 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.17,"Corp Bonds":16.67,"Fixed Dep":4.17}
2025-05-12 12:14:28.002 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}
2025-05-12 12:14:28.007 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":0,"Savings Acc":0,"T. Bill":0}
2025-05-12 12:14:28.012 +05:30 [INF] Sub-allocations for realEstate: {"REITs":2.22,"Residential Prop":2.22,"Commercial Prop":5.56}
2025-05-12 12:14:28.017 +05:30 [INF] Added sub-assets for equity: {"Large Cap":13.75,"Mid Cap":18.33,"Small Cap":22.92}
2025-05-12 12:14:28.022 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.17,"Corp Bonds":16.67,"Fixed Dep":4.17}
2025-05-12 12:14:28.027 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}
2025-05-12 12:14:28.032 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":0,"Savings Acc":0,"T. Bill":0}
2025-05-12 12:14:28.036 +05:30 [INF] Added sub-assets for realEstate: {"REITs":2.22,"Residential Prop":2.22,"Commercial Prop":5.56}
2025-05-12 12:14:28.087 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":55,"subAssets":{"Large Cap":13.75,"Mid Cap":18.33,"Small Cap":22.92}},"fixedIncome":{"percentage":25,"subAssets":{"Gov Bonds":4.17,"Corp Bonds":16.67,"Fixed Dep":4.17}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}},"cash":{"percentage":0,"subAssets":{"Liquid Mutual Funds":0,"Savings Acc":0,"T. Bill":0}},"realEstate":{"percentage":10,"subAssets":{"REITs":2.22,"Residential Prop":2.22,"Commercial Prop":5.56}}}
2025-05-12 12:14:28.107 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 12:14:28.146 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 445.1865ms
2025-05-12 12:14:28.153 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:14:28.162 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 702.774ms
2025-05-12 12:14:28.185 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=Moderate - null null
2025-05-12 12:14:28.204 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:14:28.207 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=Moderate - 204 null null 22.5343ms
2025-05-12 12:14:28.218 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=Moderate - application/json 501
2025-05-12 12:14:28.226 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:14:28.233 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 12:14:28.244 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, System.String) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:14:28.285 +05:30 [INF] Starting product allocation calculation.
2025-05-12 12:14:28.288 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-12 12:14:28.292 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-12 12:14:28.428 +05:30 [INF] Product data loaded successfully.
2025-05-12 12:14:28.432 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-12 12:14:28.440 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.16, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.443 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.446 +05:30 [INF] Calculated investment amount: 444.58.
2025-05-12 12:14:28.449 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.59, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.453 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.454 +05:30 [INF] Calculated investment amount: 424.4.
2025-05-12 12:14:28.456 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-12 12:14:28.459 +05:30 [INF] Calculating investment amount with PercentageSplit: 9.75, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.462 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.465 +05:30 [INF] Calculated investment amount: 541.06.
2025-05-12 12:14:28.468 +05:30 [INF] Calculating investment amount with PercentageSplit: 8.58, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.472 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.474 +05:30 [INF] Calculated investment amount: 509.18.
2025-05-12 12:14:28.477 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-12 12:14:28.480 +05:30 [INF] Calculating investment amount with PercentageSplit: 11.8, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.484 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.486 +05:30 [INF] Calculated investment amount: 612.86.
2025-05-12 12:14:28.488 +05:30 [INF] Calculating investment amount with PercentageSplit: 11.12, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.492 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.495 +05:30 [INF] Calculated investment amount: 598.24.
2025-05-12 12:14:28.497 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-12 12:14:28.500 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.13, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.504 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.506 +05:30 [INF] Calculated investment amount: 166.89.
2025-05-12 12:14:28.508 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.04, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.511 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.514 +05:30 [INF] Calculated investment amount: 161.37.
2025-05-12 12:14:28.516 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-12 12:14:28.520 +05:30 [INF] Calculating investment amount with PercentageSplit: 8.16, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.525 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.529 +05:30 [INF] Calculated investment amount: 587.26.
2025-05-12 12:14:28.532 +05:30 [INF] Calculating investment amount with PercentageSplit: 8.51, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.536 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.538 +05:30 [INF] Calculated investment amount: 603.92.
2025-05-12 12:14:28.541 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-12 12:14:28.543 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.05, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.547 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.549 +05:30 [INF] Calculated investment amount: 156.85.
2025-05-12 12:14:28.551 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.12, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.555 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.558 +05:30 [INF] Calculated investment amount: 160.68.
2025-05-12 12:14:28.561 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-12 12:14:28.567 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.92, TargetAmount: 10000, AnnualReturn: 7.8, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.574 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.577 +05:30 [INF] Calculated investment amount: 63.2.
2025-05-12 12:14:28.582 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.75, TargetAmount: 10000, AnnualReturn: 6.3, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.589 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.594 +05:30 [INF] Calculated investment amount: 55.26.
2025-05-12 12:14:28.599 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-12 12:14:28.605 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.97, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.613 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.618 +05:30 [INF] Calculated investment amount: 126.87.
2025-05-12 12:14:28.622 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.2, TargetAmount: 10000, AnnualReturn: 10.3, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.629 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.633 +05:30 [INF] Calculated investment amount: 134.76.
2025-05-12 12:14:28.638 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-12 12:14:28.643 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.29, TargetAmount: 10000, AnnualReturn: 8.5, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.650 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.654 +05:30 [INF] Calculated investment amount: 152.3.
2025-05-12 12:14:28.658 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.88, TargetAmount: 10000, AnnualReturn: 7, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.665 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.669 +05:30 [INF] Calculated investment amount: 134.04.
2025-05-12 12:14:28.672 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-12 12:14:28.677 +05:30 [INF] Calculating investment amount with PercentageSplit: 0, TargetAmount: 10000, AnnualReturn: 5.2, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.685 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.689 +05:30 [INF] Calculated investment amount: 0.
2025-05-12 12:14:28.692 +05:30 [INF] Calculating investment amount with PercentageSplit: 0, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.699 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.703 +05:30 [INF] Calculated investment amount: 0.
2025-05-12 12:14:28.706 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-12 12:14:28.712 +05:30 [INF] Calculating investment amount with PercentageSplit: 0, TargetAmount: 10000, AnnualReturn: 3.5, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.722 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.726 +05:30 [INF] Calculated investment amount: 0.
2025-05-12 12:14:28.730 +05:30 [INF] Calculating investment amount with PercentageSplit: 0, TargetAmount: 10000, AnnualReturn: 4, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.736 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.739 +05:30 [INF] Calculated investment amount: 0.
2025-05-12 12:14:28.742 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-12 12:14:28.745 +05:30 [INF] Calculating investment amount with PercentageSplit: 0, TargetAmount: 10000, AnnualReturn: 5.1, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.749 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.753 +05:30 [INF] Calculated investment amount: 0.
2025-05-12 12:14:28.755 +05:30 [INF] Calculating investment amount with PercentageSplit: 0, TargetAmount: 10000, AnnualReturn: 5.4, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.760 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.763 +05:30 [INF] Calculated investment amount: 0.
2025-05-12 12:14:28.766 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-12 12:14:28.769 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.07, TargetAmount: 10000, AnnualReturn: 8.9, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.775 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.777 +05:30 [INF] Calculated investment amount: 69.86.
2025-05-12 12:14:28.780 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.15, TargetAmount: 10000, AnnualReturn: 9.5, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.786 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.788 +05:30 [INF] Calculated investment amount: 73.05.
2025-05-12 12:14:28.791 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-12 12:14:28.798 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.06, TargetAmount: 10000, AnnualReturn: 6.7, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.806 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.809 +05:30 [INF] Calculated investment amount: 76.64.
2025-05-12 12:14:28.813 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.16, TargetAmount: 10000, AnnualReturn: 7.3, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.820 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.824 +05:30 [INF] Calculated investment amount: 81.56.
2025-05-12 12:14:28.827 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-12 12:14:28.831 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.84, TargetAmount: 10000, AnnualReturn: 10.2, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.839 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.842 +05:30 [INF] Calculated investment amount: 174.75.
2025-05-12 12:14:28.846 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.72, TargetAmount: 10000, AnnualReturn: 9.8, InvestmentHorizon: Moderate.
2025-05-12 12:14:28.853 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 12:14:28.857 +05:30 [INF] Calculated investment amount: 170.43.
2025-05-12 12:14:28.894 +05:30 [INF] Product allocations saved successfully to ProductAllocations.json
2025-05-12 12:14:28.901 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":7.16,"InvestmentAmount":444.58},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":6.59,"InvestmentAmount":424.4}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":9.75,"InvestmentAmount":541.06},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":8.58,"InvestmentAmount":509.18}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":11.8,"InvestmentAmount":612.86},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":11.12,"InvestmentAmount":598.24}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":2.13,"InvestmentAmount":166.89},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":2.04,"InvestmentAmount":161.37}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":8.16,"InvestmentAmount":587.26},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":8.51,"InvestmentAmount":603.92}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":2.05,"InvestmentAmount":156.85},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":2.12,"InvestmentAmount":160.68}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":0.92,"InvestmentAmount":63.2},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":0.75,"InvestmentAmount":55.26}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":1.97,"InvestmentAmount":126.87},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":2.2,"InvestmentAmount":134.76}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":2.29,"InvestmentAmount":152.3},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":1.88,"InvestmentAmount":134.04}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":0,"InvestmentAmount":0},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":0,"InvestmentAmount":0}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":0,"InvestmentAmount":0},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":0,"InvestmentAmount":0}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":0,"InvestmentAmount":0},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":0,"InvestmentAmount":0}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":1.07,"InvestmentAmount":69.86},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":1.15,"InvestmentAmount":73.05}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":1.06,"InvestmentAmount":76.64},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":1.16,"InvestmentAmount":81.56}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":2.84,"InvestmentAmount":174.75},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":2.72,"InvestmentAmount":170.43}}}}
2025-05-12 12:14:28.949 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:14:28.959 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 708.5694ms
2025-05-12 12:14:28.963 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 12:14:28.966 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=Moderate - 200 null application/json; charset=utf-8 747.7105ms
2025-05-12 12:14:29.007 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:14:29.036 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:14:29.046 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 38.8834ms
2025-05-12 12:14:29.059 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:14:29.071 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:14:29.073 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:14:29.082 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:14:29.090 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:14:29.095 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:14:29.134 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:14:29.144 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 57.2349ms
2025-05-12 12:14:29.146 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:14:29.149 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 90.2547ms
2025-05-12 12:14:40.460 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:14:40.464 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:14:40.465 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 5.5936ms
2025-05-12 12:14:40.474 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:14:40.479 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:14:40.481 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:14:40.484 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:14:40.492 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:14:40.495 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:14:40.499 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:14:40.507 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 17.3751ms
2025-05-12 12:14:40.510 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:14:40.513 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 38.5004ms
2025-05-12 12:15:08.533 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 12:15:08.550 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:15:08.553 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 20.0113ms
2025-05-12 12:15:08.561 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 12:15:08.567 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:15:08.570 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 12:15:08.575 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 12:15:08.589 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 12:15:08.592 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 12:15:08.595 +05:30 [INF] Users loaded successfully from JSON file.
2025-05-12 12:15:08.854 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:15:08.866 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 287.1234ms
2025-05-12 12:15:08.870 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 12:15:08.875 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 313.5864ms
2025-05-12 12:15:34.507 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 12:15:34.519 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:15:34.522 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 14.9714ms
2025-05-12 12:15:34.530 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 109
2025-05-12 12:15:34.537 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:15:34.539 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:15:34.541 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:15:34.547 +05:30 [INF] Starting allocation calculation...
2025-05-12 12:15:34.553 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 12:15:34.557 +05:30 [INF] Looking up base allocation for key: Low+Long
2025-05-12 12:15:34.560 +05:30 [INF] Base allocation found: {"equity":30,"fixedIncome":45,"commodities":10,"cash":10,"realEstate":5}
2025-05-12 12:15:34.564 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-12 12:15:34.566 +05:30 [INF] Age adjustments found: {}
2025-05-12 12:15:34.569 +05:30 [INF] Looking up goal tuning for goal: Wealth Accumulation
2025-05-12 12:15:34.572 +05:30 [INF] Goal tuning found: {"equity_priority":true,"equity_boost":2,"equity_threshold":40}
2025-05-12 12:15:34.583 +05:30 [INF] Sub-allocations for equity: {"Large Cap":25,"Mid Cap":10,"Small Cap":5}
2025-05-12 12:15:34.587 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":21.25,"Corp Bonds":8.5,"Fixed Dep":12.75}
2025-05-12 12:15:34.592 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4.69,"Energy":1.88,"Agriculture":0.94}
2025-05-12 12:15:34.596 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":1.73,"Savings Acc":2.88,"T. Bill":2.88}
2025-05-12 12:15:34.601 +05:30 [INF] Sub-allocations for realEstate: {"REITs":1,"Residential Prop":1,"Commercial Prop":0.5}
2025-05-12 12:15:34.606 +05:30 [INF] Added sub-assets for equity: {"Large Cap":25,"Mid Cap":10,"Small Cap":5}
2025-05-12 12:15:34.610 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":21.25,"Corp Bonds":8.5,"Fixed Dep":12.75}
2025-05-12 12:15:34.614 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4.69,"Energy":1.88,"Agriculture":0.94}
2025-05-12 12:15:34.618 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":1.73,"Savings Acc":2.88,"T. Bill":2.88}
2025-05-12 12:15:34.623 +05:30 [INF] Added sub-assets for realEstate: {"REITs":1,"Residential Prop":1,"Commercial Prop":0.5}
2025-05-12 12:15:34.627 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":40,"subAssets":{"Large Cap":25,"Mid Cap":10,"Small Cap":5}},"fixedIncome":{"percentage":42.5,"subAssets":{"Gov Bonds":21.25,"Corp Bonds":8.5,"Fixed Dep":12.75}},"commodities":{"percentage":7.5,"subAssets":{"Precious Metals":4.69,"Energy":1.88,"Agriculture":0.94}},"cash":{"percentage":7.5,"subAssets":{"Liquid Mutual Funds":1.73,"Savings Acc":2.88,"T. Bill":2.88}},"realEstate":{"percentage":2.5,"subAssets":{"REITs":1,"Residential Prop":1,"Commercial Prop":0.5}}}
2025-05-12 12:15:34.633 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 12:15:34.639 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 93.419ms
2025-05-12 12:15:34.645 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:15:34.649 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 119.1265ms
2025-05-12 12:15:34.663 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=Long - null null
2025-05-12 12:15:34.674 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:15:34.678 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=Long - 204 null null 14.7443ms
2025-05-12 12:15:34.690 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=Long - application/json 499
2025-05-12 12:15:34.699 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:15:34.702 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 12:15:34.707 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, System.String) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:15:34.719 +05:30 [INF] Starting product allocation calculation.
2025-05-12 12:15:34.722 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-12 12:15:34.727 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-12 12:15:34.953 +05:30 [INF] Product data loaded successfully.
2025-05-12 12:15:34.956 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-12 12:15:34.961 +05:30 [INF] Calculating investment amount with PercentageSplit: 13.02, TargetAmount: 10000, AnnualReturn: 10, InvestmentHorizon: Long.
2025-05-12 12:15:34.966 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:34.970 +05:30 [INF] Calculated investment amount: 607.39.
2025-05-12 12:15:34.972 +05:30 [INF] Calculating investment amount with PercentageSplit: 11.98, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: Long.
2025-05-12 12:15:34.978 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:34.980 +05:30 [INF] Calculated investment amount: 592.48.
2025-05-12 12:15:34.986 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-12 12:15:34.991 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.32, TargetAmount: 10000, AnnualReturn: 12.5, InvestmentHorizon: Long.
2025-05-12 12:15:34.997 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.003 +05:30 [INF] Calculated investment amount: 207.34.
2025-05-12 12:15:35.007 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.68, TargetAmount: 10000, AnnualReturn: 11, InvestmentHorizon: Long.
2025-05-12 12:15:35.013 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.017 +05:30 [INF] Calculated investment amount: 203.08.
2025-05-12 12:15:35.021 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-12 12:15:35.027 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.57, TargetAmount: 10000, AnnualReturn: 14, InvestmentHorizon: Long.
2025-05-12 12:15:35.033 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.037 +05:30 [INF] Calculated investment amount: 90.09.
2025-05-12 12:15:35.042 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.43, TargetAmount: 10000, AnnualReturn: 13.2, InvestmentHorizon: Long.
2025-05-12 12:15:35.048 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.053 +05:30 [INF] Calculated investment amount: 90.12.
2025-05-12 12:15:35.056 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-12 12:15:35.061 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.84, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: Long.
2025-05-12 12:15:35.067 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.072 +05:30 [INF] Calculated investment amount: 733.69.
2025-05-12 12:15:35.076 +05:30 [INF] Calculating investment amount with PercentageSplit: 10.41, TargetAmount: 10000, AnnualReturn: 4.8, InvestmentHorizon: Long.
2025-05-12 12:15:35.082 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.088 +05:30 [INF] Calculated investment amount: 715.42.
2025-05-12 12:15:35.092 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-12 12:15:35.097 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.16, TargetAmount: 10000, AnnualReturn: 6.8, InvestmentHorizon: Long.
2025-05-12 12:15:35.105 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.109 +05:30 [INF] Calculated investment amount: 245.77.
2025-05-12 12:15:35.113 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.34, TargetAmount: 10000, AnnualReturn: 7.1, InvestmentHorizon: Long.
2025-05-12 12:15:35.120 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.124 +05:30 [INF] Calculated investment amount: 250.71.
2025-05-12 12:15:35.127 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-12 12:15:35.132 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.26, TargetAmount: 10000, AnnualReturn: 5.5, InvestmentHorizon: Long.
2025-05-12 12:15:35.138 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.142 +05:30 [INF] Calculated investment amount: 407.9.
2025-05-12 12:15:35.146 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.49, TargetAmount: 10000, AnnualReturn: 5.7, InvestmentHorizon: Long.
2025-05-12 12:15:35.153 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.156 +05:30 [INF] Calculated investment amount: 416.53.
2025-05-12 12:15:35.161 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-12 12:15:35.166 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.59, TargetAmount: 10000, AnnualReturn: 7.8, InvestmentHorizon: Long.
2025-05-12 12:15:35.173 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.178 +05:30 [INF] Calculated investment amount: 142.02.
2025-05-12 12:15:35.182 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.1, TargetAmount: 10000, AnnualReturn: 6.3, InvestmentHorizon: Long.
2025-05-12 12:15:35.189 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.192 +05:30 [INF] Calculated investment amount: 128.81.
2025-05-12 12:15:35.196 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-12 12:15:35.200 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.89, TargetAmount: 10000, AnnualReturn: 9.2, InvestmentHorizon: Long.
2025-05-12 12:15:35.206 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.210 +05:30 [INF] Calculated investment amount: 44.02.
2025-05-12 12:15:35.214 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.99, TargetAmount: 10000, AnnualReturn: 10.3, InvestmentHorizon: Long.
2025-05-12 12:15:35.224 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.227 +05:30 [INF] Calculated investment amount: 45.19.
2025-05-12 12:15:35.231 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-12 12:15:35.236 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.52, TargetAmount: 10000, AnnualReturn: 8.5, InvestmentHorizon: Long.
2025-05-12 12:15:35.242 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.245 +05:30 [INF] Calculated investment amount: 27.07.
2025-05-12 12:15:35.249 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.42, TargetAmount: 10000, AnnualReturn: 7, InvestmentHorizon: Long.
2025-05-12 12:15:35.255 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.258 +05:30 [INF] Calculated investment amount: 24.44.
2025-05-12 12:15:35.262 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-12 12:15:35.267 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.88, TargetAmount: 10000, AnnualReturn: 5.2, InvestmentHorizon: Long.
2025-05-12 12:15:35.272 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.274 +05:30 [INF] Calculated investment amount: 58.66.
2025-05-12 12:15:35.276 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.85, TargetAmount: 10000, AnnualReturn: 5, InvestmentHorizon: Long.
2025-05-12 12:15:35.282 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.285 +05:30 [INF] Calculated investment amount: 57.53.
2025-05-12 12:15:35.288 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-12 12:15:35.292 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.34, TargetAmount: 10000, AnnualReturn: 3.5, InvestmentHorizon: Long.
2025-05-12 12:15:35.297 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.300 +05:30 [INF] Calculated investment amount: 101.76.
2025-05-12 12:15:35.305 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.54, TargetAmount: 10000, AnnualReturn: 4, InvestmentHorizon: Long.
2025-05-12 12:15:35.311 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.314 +05:30 [INF] Calculated investment amount: 112.53.
2025-05-12 12:15:35.318 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-12 12:15:35.323 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.4, TargetAmount: 10000, AnnualReturn: 5.1, InvestmentHorizon: Long.
2025-05-12 12:15:35.329 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.333 +05:30 [INF] Calculated investment amount: 94.04.
2025-05-12 12:15:35.337 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.48, TargetAmount: 10000, AnnualReturn: 5.4, InvestmentHorizon: Long.
2025-05-12 12:15:35.343 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.346 +05:30 [INF] Calculated investment amount: 97.17.
2025-05-12 12:15:35.350 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-12 12:15:35.356 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.48, TargetAmount: 10000, AnnualReturn: 8.9, InvestmentHorizon: Long.
2025-05-12 12:15:35.362 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.366 +05:30 [INF] Calculated investment amount: 24.27.
2025-05-12 12:15:35.370 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.52, TargetAmount: 10000, AnnualReturn: 9.5, InvestmentHorizon: Long.
2025-05-12 12:15:35.376 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.380 +05:30 [INF] Calculated investment amount: 25.16.
2025-05-12 12:15:35.383 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-12 12:15:35.387 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.48, TargetAmount: 10000, AnnualReturn: 6.7, InvestmentHorizon: Long.
2025-05-12 12:15:35.393 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.396 +05:30 [INF] Calculated investment amount: 28.57.
2025-05-12 12:15:35.400 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.52, TargetAmount: 10000, AnnualReturn: 7.3, InvestmentHorizon: Long.
2025-05-12 12:15:35.406 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.410 +05:30 [INF] Calculated investment amount: 29.59.
2025-05-12 12:15:35.413 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-12 12:15:35.418 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.26, TargetAmount: 10000, AnnualReturn: 10.2, InvestmentHorizon: Long.
2025-05-12 12:15:35.422 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.425 +05:30 [INF] Calculated investment amount: 11.95.
2025-05-12 12:15:35.428 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.25, TargetAmount: 10000, AnnualReturn: 9.8, InvestmentHorizon: Long.
2025-05-12 12:15:35.434 +05:30 [INF] Parsed investment horizon: 8 years.
2025-05-12 12:15:35.439 +05:30 [INF] Calculated investment amount: 11.83.
2025-05-12 12:15:35.449 +05:30 [INF] Product allocations saved successfully to ProductAllocations.json
2025-05-12 12:15:35.455 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":13.02,"InvestmentAmount":607.39},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":11.98,"InvestmentAmount":592.48}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":5.32,"InvestmentAmount":207.34},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":4.68,"InvestmentAmount":203.08}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":2.57,"InvestmentAmount":90.09},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":2.43,"InvestmentAmount":90.12}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":10.84,"InvestmentAmount":733.69},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":10.41,"InvestmentAmount":715.42}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":4.16,"InvestmentAmount":245.77},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":4.34,"InvestmentAmount":250.71}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":6.26,"InvestmentAmount":407.9},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":6.49,"InvestmentAmount":416.53}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":2.59,"InvestmentAmount":142.02},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":2.1,"InvestmentAmount":128.81}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":0.89,"InvestmentAmount":44.02},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":0.99,"InvestmentAmount":45.19}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":0.52,"InvestmentAmount":27.07},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":0.42,"InvestmentAmount":24.44}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":0.88,"InvestmentAmount":58.66},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":0.85,"InvestmentAmount":57.53}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":1.34,"InvestmentAmount":101.76},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":1.54,"InvestmentAmount":112.53}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":1.4,"InvestmentAmount":94.04},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":1.48,"InvestmentAmount":97.17}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":0.48,"InvestmentAmount":24.27},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":0.52,"InvestmentAmount":25.16}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":0.48,"InvestmentAmount":28.57},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":0.52,"InvestmentAmount":29.59}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":0.26,"InvestmentAmount":11.95},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":0.25,"InvestmentAmount":11.83}}}}
2025-05-12 12:15:35.502 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:15:35.511 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 797.924ms
2025-05-12 12:15:35.517 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 12:15:35.521 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=Long - 200 null application/json; charset=utf-8 831.4083ms
2025-05-12 12:15:35.543 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:15:35.549 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:15:35.558 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 14.9674ms
2025-05-12 12:15:35.565 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:15:35.575 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:15:35.577 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:15:35.580 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:15:35.584 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:15:35.588 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:15:35.590 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:15:35.595 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 10.2509ms
2025-05-12 12:15:35.597 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:15:35.600 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 35.3102ms
2025-05-12 12:16:17.216 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:16:17.224 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:16:17.226 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 10.8092ms
2025-05-12 12:16:17.248 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:16:17.257 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:16:17.260 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:16:17.262 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:16:17.267 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:16:17.279 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:16:17.282 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:16:17.323 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 56.7366ms
2025-05-12 12:16:17.329 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:16:17.333 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 85.0919ms
2025-05-12 12:16:34.896 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 12:16:34.902 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:16:34.904 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 7.3842ms
2025-05-12 12:16:34.911 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 109
2025-05-12 12:16:34.917 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:16:34.919 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:16:34.921 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:16:34.926 +05:30 [INF] Starting allocation calculation...
2025-05-12 12:16:34.930 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 12:16:34.931 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 12:16:34.933 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 12:16:34.935 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 12:16:34.936 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 12:16:34.937 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-12 12:16:34.939 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-12 12:16:34.941 +05:30 [INF] Sub-allocations for equity: {"Large Cap":10,"Mid Cap":7.5,"Small Cap":7.5}
2025-05-12 12:16:34.944 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 12:16:34.947 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":2,"Energy":1.5,"Agriculture":1.5}
2025-05-12 12:16:34.949 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-12 12:16:34.951 +05:30 [INF] Sub-allocations for realEstate: {"REITs":0,"Residential Prop":0,"Commercial Prop":0}
2025-05-12 12:16:34.953 +05:30 [INF] Added sub-assets for equity: {"Large Cap":10,"Mid Cap":7.5,"Small Cap":7.5}
2025-05-12 12:16:34.955 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 12:16:34.957 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":2,"Energy":1.5,"Agriculture":1.5}
2025-05-12 12:16:34.959 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-12 12:16:34.962 +05:30 [INF] Added sub-assets for realEstate: {"REITs":0,"Residential Prop":0,"Commercial Prop":0}
2025-05-12 12:16:34.963 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":25,"subAssets":{"Large Cap":10,"Mid Cap":7.5,"Small Cap":7.5}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":5,"subAssets":{"Precious Metals":2,"Energy":1.5,"Agriculture":1.5}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":0,"subAssets":{"REITs":0,"Residential Prop":0,"Commercial Prop":0}}}
2025-05-12 12:16:34.966 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 12:16:34.969 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 45.4809ms
2025-05-12 12:16:34.972 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:16:34.974 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 62.8567ms
2025-05-12 12:16:34.985 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Short - null null
2025-05-12 12:16:34.989 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:16:34.991 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Short - 204 null null 6.2652ms
2025-05-12 12:16:35.000 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Short - application/json 473
2025-05-12 12:16:35.004 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:16:35.005 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 12:16:35.008 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, System.String) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:16:35.016 +05:30 [INF] Starting product allocation calculation.
2025-05-12 12:16:35.020 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-12 12:16:35.029 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-12 12:16:35.215 +05:30 [INF] Product data loaded successfully.
2025-05-12 12:16:35.217 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-12 12:16:35.220 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.21, TargetAmount: 100000, AnnualReturn: 10, InvestmentHorizon: Short.
2025-05-12 12:16:35.224 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.226 +05:30 [INF] Calculated investment amount: 4305.79.
2025-05-12 12:16:35.227 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.79, TargetAmount: 100000, AnnualReturn: 9.2, InvestmentHorizon: Short.
2025-05-12 12:16:35.230 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.232 +05:30 [INF] Calculated investment amount: 4016.89.
2025-05-12 12:16:35.233 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-12 12:16:35.236 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.99, TargetAmount: 100000, AnnualReturn: 12.5, InvestmentHorizon: Short.
2025-05-12 12:16:35.240 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.241 +05:30 [INF] Calculated investment amount: 3152.59.
2025-05-12 12:16:35.243 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.51, TargetAmount: 100000, AnnualReturn: 11, InvestmentHorizon: Short.
2025-05-12 12:16:35.246 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.248 +05:30 [INF] Calculated investment amount: 2848.79.
2025-05-12 12:16:35.250 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-12 12:16:35.253 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.86, TargetAmount: 100000, AnnualReturn: 14, InvestmentHorizon: Short.
2025-05-12 12:16:35.256 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.258 +05:30 [INF] Calculated investment amount: 2970.14.
2025-05-12 12:16:35.260 +05:30 [INF] Calculating investment amount with PercentageSplit: 3.64, TargetAmount: 100000, AnnualReturn: 13.2, InvestmentHorizon: Short.
2025-05-12 12:16:35.266 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.269 +05:30 [INF] Calculated investment amount: 2840.59.
2025-05-12 12:16:35.272 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-12 12:16:35.278 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.59, TargetAmount: 100000, AnnualReturn: 5, InvestmentHorizon: Short.
2025-05-12 12:16:35.284 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.288 +05:30 [INF] Calculated investment amount: 4163.27.
2025-05-12 12:16:35.291 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.41, TargetAmount: 100000, AnnualReturn: 4.8, InvestmentHorizon: Short.
2025-05-12 12:16:35.298 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.302 +05:30 [INF] Calculated investment amount: 4015.28.
2025-05-12 12:16:35.305 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-12 12:16:35.310 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.87, TargetAmount: 100000, AnnualReturn: 6.8, InvestmentHorizon: Short.
2025-05-12 12:16:35.316 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.319 +05:30 [INF] Calculated investment amount: 5146.31.
2025-05-12 12:16:35.322 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.13, TargetAmount: 100000, AnnualReturn: 7.1, InvestmentHorizon: Short.
2025-05-12 12:16:35.328 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.332 +05:30 [INF] Calculated investment amount: 5344.19.
2025-05-12 12:16:35.336 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-12 12:16:35.340 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.42, TargetAmount: 100000, AnnualReturn: 5.5, InvestmentHorizon: Short.
2025-05-12 12:16:35.483 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.487 +05:30 [INF] Calculated investment amount: 3971.16.
2025-05-12 12:16:35.490 +05:30 [INF] Calculating investment amount with PercentageSplit: 4.58, TargetAmount: 100000, AnnualReturn: 5.7, InvestmentHorizon: Short.
2025-05-12 12:16:35.496 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.499 +05:30 [INF] Calculated investment amount: 4099.35.
2025-05-12 12:16:35.501 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-12 12:16:35.505 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.11, TargetAmount: 100000, AnnualReturn: 7.8, InvestmentHorizon: Short.
2025-05-12 12:16:35.518 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.522 +05:30 [INF] Calculated investment amount: 955.18.
2025-05-12 12:16:35.527 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.89, TargetAmount: 100000, AnnualReturn: 6.3, InvestmentHorizon: Short.
2025-05-12 12:16:35.533 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.536 +05:30 [INF] Calculated investment amount: 787.63.
2025-05-12 12:16:35.539 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-12 12:16:35.544 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.71, TargetAmount: 100000, AnnualReturn: 9.2, InvestmentHorizon: Short.
2025-05-12 12:16:35.549 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.553 +05:30 [INF] Calculated investment amount: 595.41.
2025-05-12 12:16:35.556 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.79, TargetAmount: 100000, AnnualReturn: 10.3, InvestmentHorizon: Short.
2025-05-12 12:16:35.563 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.566 +05:30 [INF] Calculated investment amount: 649.35.
2025-05-12 12:16:35.569 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-12 12:16:35.573 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.82, TargetAmount: 100000, AnnualReturn: 8.5, InvestmentHorizon: Short.
2025-05-12 12:16:35.580 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.583 +05:30 [INF] Calculated investment amount: 696.55.
2025-05-12 12:16:35.587 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.68, TargetAmount: 100000, AnnualReturn: 7, InvestmentHorizon: Short.
2025-05-12 12:16:35.593 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.597 +05:30 [INF] Calculated investment amount: 593.94.
2025-05-12 12:16:35.601 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-12 12:16:35.606 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.12, TargetAmount: 100000, AnnualReturn: 5.2, InvestmentHorizon: Short.
2025-05-12 12:16:35.613 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.616 +05:30 [INF] Calculated investment amount: 5529.93.
2025-05-12 12:16:35.620 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.88, TargetAmount: 100000, AnnualReturn: 5, InvestmentHorizon: Short.
2025-05-12 12:16:35.627 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.630 +05:30 [INF] Calculated investment amount: 5333.33.
2025-05-12 12:16:35.633 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-12 12:16:35.637 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.6, TargetAmount: 100000, AnnualReturn: 3.5, InvestmentHorizon: Short.
2025-05-12 12:16:35.644 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.648 +05:30 [INF] Calculated investment amount: 5227.66.
2025-05-12 12:16:35.652 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.4, TargetAmount: 100000, AnnualReturn: 4, InvestmentHorizon: Short.
2025-05-12 12:16:35.658 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.662 +05:30 [INF] Calculated investment amount: 5917.16.
2025-05-12 12:16:35.666 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-12 12:16:35.670 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.77, TargetAmount: 100000, AnnualReturn: 5.1, InvestmentHorizon: Short.
2025-05-12 12:16:35.678 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.682 +05:30 [INF] Calculated investment amount: 7034.21.
2025-05-12 12:16:35.686 +05:30 [INF] Calculating investment amount with PercentageSplit: 8.23, TargetAmount: 100000, AnnualReturn: 5.4, InvestmentHorizon: Short.
2025-05-12 12:16:35.694 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.698 +05:30 [INF] Calculated investment amount: 7408.3.
2025-05-12 12:16:35.702 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-12 12:16:35.707 +05:30 [INF] Calculating investment amount with PercentageSplit: 0, TargetAmount: 100000, AnnualReturn: 8.9, InvestmentHorizon: Short.
2025-05-12 12:16:35.714 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.718 +05:30 [INF] Calculated investment amount: 0.
2025-05-12 12:16:35.721 +05:30 [INF] Calculating investment amount with PercentageSplit: 0, TargetAmount: 100000, AnnualReturn: 9.5, InvestmentHorizon: Short.
2025-05-12 12:16:35.730 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.735 +05:30 [INF] Calculated investment amount: 0.
2025-05-12 12:16:35.739 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-12 12:16:35.744 +05:30 [INF] Calculating investment amount with PercentageSplit: 0, TargetAmount: 100000, AnnualReturn: 6.7, InvestmentHorizon: Short.
2025-05-12 12:16:35.752 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.755 +05:30 [INF] Calculated investment amount: 0.
2025-05-12 12:16:35.759 +05:30 [INF] Calculating investment amount with PercentageSplit: 0, TargetAmount: 100000, AnnualReturn: 7.3, InvestmentHorizon: Short.
2025-05-12 12:16:35.765 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.769 +05:30 [INF] Calculated investment amount: 0.
2025-05-12 12:16:35.772 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-12 12:16:35.778 +05:30 [INF] Calculating investment amount with PercentageSplit: 0, TargetAmount: 100000, AnnualReturn: 10.2, InvestmentHorizon: Short.
2025-05-12 12:16:35.784 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.787 +05:30 [INF] Calculated investment amount: 0.
2025-05-12 12:16:35.791 +05:30 [INF] Calculating investment amount with PercentageSplit: 0, TargetAmount: 100000, AnnualReturn: 9.8, InvestmentHorizon: Short.
2025-05-12 12:16:35.798 +05:30 [INF] Parsed investment horizon: 2 years.
2025-05-12 12:16:35.801 +05:30 [INF] Calculated investment amount: 0.
2025-05-12 12:16:35.812 +05:30 [INF] Product allocations saved successfully to ProductAllocations.json
2025-05-12 12:16:35.816 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":5.21,"InvestmentAmount":4305.79},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":4.79,"InvestmentAmount":4016.89}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":3.99,"InvestmentAmount":3152.59},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":3.51,"InvestmentAmount":2848.79}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":3.86,"InvestmentAmount":2970.14},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":3.64,"InvestmentAmount":2840.59}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":4.59,"InvestmentAmount":4163.27},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":4.41,"InvestmentAmount":4015.28}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":5.87,"InvestmentAmount":5146.31},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":6.13,"InvestmentAmount":5344.19}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":4.42,"InvestmentAmount":3971.16},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":4.58,"InvestmentAmount":4099.35}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":1.11,"InvestmentAmount":955.18},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":0.89,"InvestmentAmount":787.63}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":0.71,"InvestmentAmount":595.41},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":0.79,"InvestmentAmount":649.35}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":0.82,"InvestmentAmount":696.55},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":0.68,"InvestmentAmount":593.94}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":6.12,"InvestmentAmount":5529.93},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":5.88,"InvestmentAmount":5333.33}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":5.6,"InvestmentAmount":5227.66},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":6.4,"InvestmentAmount":5917.16}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":7.77,"InvestmentAmount":7034.21},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":8.23,"InvestmentAmount":7408.3}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":0,"InvestmentAmount":0},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":0,"InvestmentAmount":0}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":0,"InvestmentAmount":0},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":0,"InvestmentAmount":0}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":0,"InvestmentAmount":0},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":0,"InvestmentAmount":0}}}}
2025-05-12 12:16:35.868 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:16:35.876 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 863.2991ms
2025-05-12 12:16:35.883 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 12:16:35.888 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Short - 200 null application/json; charset=utf-8 888.1319ms
2025-05-12 12:16:35.947 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:16:35.986 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:16:35.988 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 40.9116ms
2025-05-12 12:16:35.995 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:16:36.001 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:16:36.005 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:16:36.007 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:16:36.013 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:16:36.015 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:16:36.017 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:16:36.022 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 9.3869ms
2025-05-12 12:16:36.024 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:16:36.027 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 31.8744ms
2025-05-12 12:18:58.012 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 12:18:58.028 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:18:58.034 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 22.7785ms
2025-05-12 12:18:58.056 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 12:18:58.079 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:18:58.085 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 12:18:58.090 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 12:18:58.100 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 12:18:58.104 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 12:18:58.108 +05:30 [INF] Users loaded successfully from JSON file.
2025-05-12 12:18:58.345 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:18:58.351 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 253.9009ms
2025-05-12 12:18:58.357 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 12:18:58.361 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 304.796ms
2025-05-12 12:19:09.087 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 12:19:09.092 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:19:09.094 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 6.8658ms
2025-05-12 12:19:09.104 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 108
2025-05-12 12:19:09.107 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:19:09.109 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:19:09.111 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:19:09.117 +05:30 [INF] Starting allocation calculation...
2025-05-12 12:19:09.119 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 12:19:09.121 +05:30 [INF] Looking up base allocation for key: Mid+Mod
2025-05-12 12:19:09.123 +05:30 [INF] Base allocation found: {"equity":40,"fixedIncome":35,"commodities":10,"cash":10,"realEstate":5}
2025-05-12 12:19:09.125 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 12:19:09.127 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 12:19:09.128 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 12:19:09.131 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 12:19:09.135 +05:30 [INF] Sub-allocations for equity: {"Large Cap":14,"Mid Cap":10.5,"Small Cap":10.5}
2025-05-12 12:19:09.137 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":12,"Corp Bonds":16,"Fixed Dep":12}
2025-05-12 12:19:09.141 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:19:09.143 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":1.5,"Savings Acc":1.5,"T. Bill":2}
2025-05-12 12:19:09.145 +05:30 [INF] Sub-allocations for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 12:19:09.149 +05:30 [INF] Added sub-assets for equity: {"Large Cap":14,"Mid Cap":10.5,"Small Cap":10.5}
2025-05-12 12:19:09.151 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":12,"Corp Bonds":16,"Fixed Dep":12}
2025-05-12 12:19:09.153 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:19:09.155 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":1.5,"Savings Acc":1.5,"T. Bill":2}
2025-05-12 12:19:09.157 +05:30 [INF] Added sub-assets for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 12:19:09.159 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":35,"subAssets":{"Large Cap":14,"Mid Cap":10.5,"Small Cap":10.5}},"fixedIncome":{"percentage":40,"subAssets":{"Gov Bonds":12,"Corp Bonds":16,"Fixed Dep":12}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":5,"subAssets":{"Liquid Mutual Funds":1.5,"Savings Acc":1.5,"T. Bill":2}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 12:19:09.162 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 12:19:09.165 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 49.1155ms
2025-05-12 12:19:09.168 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:19:09.170 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 66.3286ms
2025-05-12 12:19:11.614 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 108
2025-05-12 12:19:11.639 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:19:11.644 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:19:11.653 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:19:11.664 +05:30 [INF] Starting allocation calculation...
2025-05-12 12:19:11.678 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 12:19:11.681 +05:30 [INF] Looking up base allocation for key: Mid+Mod
2025-05-12 12:19:11.687 +05:30 [INF] Base allocation found: {"equity":40,"fixedIncome":35,"commodities":10,"cash":10,"realEstate":5}
2025-05-12 12:19:11.689 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 12:19:11.691 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 12:19:11.692 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 12:19:11.694 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 12:19:11.697 +05:30 [INF] Sub-allocations for equity: {"Large Cap":14,"Mid Cap":10.5,"Small Cap":10.5}
2025-05-12 12:19:11.701 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":12,"Corp Bonds":16,"Fixed Dep":12}
2025-05-12 12:19:11.704 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:19:11.705 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":1.5,"Savings Acc":1.5,"T. Bill":2}
2025-05-12 12:19:11.707 +05:30 [INF] Sub-allocations for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 12:19:11.709 +05:30 [INF] Added sub-assets for equity: {"Large Cap":14,"Mid Cap":10.5,"Small Cap":10.5}
2025-05-12 12:19:11.711 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":12,"Corp Bonds":16,"Fixed Dep":12}
2025-05-12 12:19:11.713 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:19:11.716 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":1.5,"Savings Acc":1.5,"T. Bill":2}
2025-05-12 12:19:11.718 +05:30 [INF] Added sub-assets for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 12:19:11.720 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":35,"subAssets":{"Large Cap":14,"Mid Cap":10.5,"Small Cap":10.5}},"fixedIncome":{"percentage":40,"subAssets":{"Gov Bonds":12,"Corp Bonds":16,"Fixed Dep":12}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":5,"subAssets":{"Liquid Mutual Funds":1.5,"Savings Acc":1.5,"T. Bill":2}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 12:19:11.722 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 12:19:11.725 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 61.3755ms
2025-05-12 12:19:11.727 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:19:11.729 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 114.602ms
2025-05-12 12:19:12.331 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 108
2025-05-12 12:19:12.342 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:19:12.346 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:19:12.352 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:19:12.363 +05:30 [INF] Starting allocation calculation...
2025-05-12 12:19:12.371 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 12:19:12.374 +05:30 [INF] Looking up base allocation for key: Mid+Mod
2025-05-12 12:19:12.378 +05:30 [INF] Base allocation found: {"equity":40,"fixedIncome":35,"commodities":10,"cash":10,"realEstate":5}
2025-05-12 12:19:12.382 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 12:19:12.388 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 12:19:12.389 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 12:19:12.392 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 12:19:12.397 +05:30 [INF] Sub-allocations for equity: {"Large Cap":14,"Mid Cap":10.5,"Small Cap":10.5}
2025-05-12 12:19:12.403 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":12,"Corp Bonds":16,"Fixed Dep":12}
2025-05-12 12:19:12.407 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:19:12.412 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":1.5,"Savings Acc":1.5,"T. Bill":2}
2025-05-12 12:19:12.417 +05:30 [INF] Sub-allocations for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 12:19:12.420 +05:30 [INF] Added sub-assets for equity: {"Large Cap":14,"Mid Cap":10.5,"Small Cap":10.5}
2025-05-12 12:19:12.423 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":12,"Corp Bonds":16,"Fixed Dep":12}
2025-05-12 12:19:12.426 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:19:12.428 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":1.5,"Savings Acc":1.5,"T. Bill":2}
2025-05-12 12:19:12.437 +05:30 [INF] Added sub-assets for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 12:19:12.439 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":35,"subAssets":{"Large Cap":14,"Mid Cap":10.5,"Small Cap":10.5}},"fixedIncome":{"percentage":40,"subAssets":{"Gov Bonds":12,"Corp Bonds":16,"Fixed Dep":12}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":5,"subAssets":{"Liquid Mutual Funds":1.5,"Savings Acc":1.5,"T. Bill":2}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 12:19:12.442 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 12:19:12.445 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 82.8647ms
2025-05-12 12:19:12.448 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:19:12.452 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 120.722ms
2025-05-12 12:20:09.518 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 12:20:09.522 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:20:09.523 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 5.3371ms
2025-05-12 12:20:09.529 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 12:20:09.535 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:20:09.536 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:20:09.538 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:20:09.544 +05:30 [INF] Starting allocation calculation...
2025-05-12 12:20:09.548 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 12:20:09.549 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 12:20:09.552 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 12:20:09.553 +05:30 [INF] Looking up age adjustment rules for key: 60+
2025-05-12 12:20:09.555 +05:30 [INF] Age adjustments found: {"equity":-20,"fixedIncome":15,"realEstate":-5,"cash":10}
2025-05-12 12:20:09.558 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 12:20:09.561 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 12:20:09.564 +05:30 [INF] Sub-allocations for equity: {"Large Cap":0,"Mid Cap":0,"Small Cap":0}
2025-05-12 12:20:09.567 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":15,"Corp Bonds":20,"Fixed Dep":15}
2025-05-12 12:20:09.568 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:20:09.570 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":10.5,"Savings Acc":10.5,"T. Bill":14}
2025-05-12 12:20:09.572 +05:30 [INF] Sub-allocations for realEstate: {"REITs":1.88,"Residential Prop":1.25,"Commercial Prop":1.88}
2025-05-12 12:20:09.575 +05:30 [INF] Added sub-assets for equity: {"Large Cap":0,"Mid Cap":0,"Small Cap":0}
2025-05-12 12:20:09.578 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":15,"Corp Bonds":20,"Fixed Dep":15}
2025-05-12 12:20:09.580 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:20:09.583 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":10.5,"Savings Acc":10.5,"T. Bill":14}
2025-05-12 12:20:09.586 +05:30 [INF] Added sub-assets for realEstate: {"REITs":1.88,"Residential Prop":1.25,"Commercial Prop":1.88}
2025-05-12 12:20:09.588 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":0,"subAssets":{"Large Cap":0,"Mid Cap":0,"Small Cap":0}},"fixedIncome":{"percentage":50,"subAssets":{"Gov Bonds":15,"Corp Bonds":20,"Fixed Dep":15}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":35,"subAssets":{"Liquid Mutual Funds":10.5,"Savings Acc":10.5,"T. Bill":14}},"realEstate":{"percentage":5,"subAssets":{"REITs":1.88,"Residential Prop":1.25,"Commercial Prop":1.88}}}
2025-05-12 12:20:09.591 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 12:20:09.594 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 49.9497ms
2025-05-12 12:20:09.597 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:20:09.600 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 71.0157ms
2025-05-12 12:20:09.640 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:20:09.649 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:20:09.652 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 11.7191ms
2025-05-12 12:20:09.658 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:20:09.664 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:20:09.666 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:20:09.669 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:20:09.673 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:20:09.676 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:20:09.679 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:20:09.683 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 9.9649ms
2025-05-12 12:20:09.686 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:20:09.688 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 29.312ms
2025-05-12 12:20:38.108 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:20:38.116 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:20:38.118 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 10.1532ms
2025-05-12 12:20:38.129 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:20:38.135 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:20:38.140 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:20:38.145 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:20:38.155 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:20:38.163 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:20:38.167 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:20:38.176 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 21.248ms
2025-05-12 12:20:38.180 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:20:38.185 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 55.0999ms
2025-05-12 12:20:55.746 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 12:20:55.751 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:20:55.753 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 6.4163ms
2025-05-12 12:20:55.762 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 113
2025-05-12 12:20:55.767 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:20:55.768 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:20:55.770 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:20:55.779 +05:30 [INF] Starting allocation calculation...
2025-05-12 12:20:55.784 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 12:20:55.787 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 12:20:55.790 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 12:20:55.797 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 12:20:55.800 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 12:20:55.803 +05:30 [INF] Looking up goal tuning for goal: Wealth Accumulation
2025-05-12 12:20:55.806 +05:30 [INF] Goal tuning found: {"equity_priority":true,"equity_boost":2,"equity_threshold":40}
2025-05-12 12:20:55.815 +05:30 [INF] Sub-allocations for equity: {"Large Cap":16,"Mid Cap":12,"Small Cap":12}
2025-05-12 12:20:55.820 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9.75,"Corp Bonds":13,"Fixed Dep":9.75}
2025-05-12 12:20:55.824 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":3,"Energy":2.25,"Agriculture":2.25}
2025-05-12 12:20:55.829 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":5.25,"Savings Acc":5.25,"T. Bill":7}
2025-05-12 12:20:55.831 +05:30 [INF] Sub-allocations for realEstate: {"REITs":0.94,"Residential Prop":0.62,"Commercial Prop":0.94}
2025-05-12 12:20:55.833 +05:30 [INF] Added sub-assets for equity: {"Large Cap":16,"Mid Cap":12,"Small Cap":12}
2025-05-12 12:20:55.835 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9.75,"Corp Bonds":13,"Fixed Dep":9.75}
2025-05-12 12:20:55.838 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":3,"Energy":2.25,"Agriculture":2.25}
2025-05-12 12:20:55.842 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":5.25,"Savings Acc":5.25,"T. Bill":7}
2025-05-12 12:20:55.850 +05:30 [INF] Added sub-assets for realEstate: {"REITs":0.94,"Residential Prop":0.62,"Commercial Prop":0.94}
2025-05-12 12:20:55.854 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":40,"subAssets":{"Large Cap":16,"Mid Cap":12,"Small Cap":12}},"fixedIncome":{"percentage":32.5,"subAssets":{"Gov Bonds":9.75,"Corp Bonds":13,"Fixed Dep":9.75}},"commodities":{"percentage":7.5,"subAssets":{"Precious Metals":3,"Energy":2.25,"Agriculture":2.25}},"cash":{"percentage":17.5,"subAssets":{"Liquid Mutual Funds":5.25,"Savings Acc":5.25,"T. Bill":7}},"realEstate":{"percentage":2.5,"subAssets":{"REITs":0.94,"Residential Prop":0.62,"Commercial Prop":0.94}}}
2025-05-12 12:20:55.858 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 12:20:55.864 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 86.2724ms
2025-05-12 12:20:55.868 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:20:55.871 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 109.1776ms
2025-05-12 12:20:55.900 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:20:55.913 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:20:55.915 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 14.7654ms
2025-05-12 12:20:55.921 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:20:55.925 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:20:55.927 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:20:55.932 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:20:55.935 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:20:55.939 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:20:55.941 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:20:55.947 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 11.7427ms
2025-05-12 12:20:55.949 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:20:55.951 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 29.1782ms
2025-05-12 12:24:04.750 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:24:04.755 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:24:04.757 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 7.4122ms
2025-05-12 12:24:04.833 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:24:04.841 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:24:04.846 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:24:04.883 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:24:04.887 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:24:04.891 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:24:04.893 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:24:04.901 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 13.993ms
2025-05-12 12:24:04.905 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:24:04.908 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 74.6859ms
2025-05-12 12:24:30.828 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 12:24:30.835 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:24:30.836 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 7.7851ms
2025-05-12 12:24:30.842 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 104
2025-05-12 12:24:30.847 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:24:30.849 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:24:30.851 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:24:30.854 +05:30 [INF] Starting allocation calculation...
2025-05-12 12:24:30.856 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 12:24:30.857 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 12:24:30.858 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 12:24:30.860 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-12 12:24:30.861 +05:30 [INF] Age adjustments found: {}
2025-05-12 12:24:30.863 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 12:24:30.865 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 12:24:30.868 +05:30 [INF] Sub-allocations for equity: {"Large Cap":8,"Mid Cap":6,"Small Cap":6}
2025-05-12 12:24:30.870 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":10.5,"Corp Bonds":14,"Fixed Dep":10.5}
2025-05-12 12:24:30.872 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:24:30.873 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":7.5,"Savings Acc":7.5,"T. Bill":10}
2025-05-12 12:24:30.875 +05:30 [INF] Sub-allocations for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 12:24:30.877 +05:30 [INF] Added sub-assets for equity: {"Large Cap":8,"Mid Cap":6,"Small Cap":6}
2025-05-12 12:24:30.878 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":10.5,"Corp Bonds":14,"Fixed Dep":10.5}
2025-05-12 12:24:30.880 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:24:30.883 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":7.5,"Savings Acc":7.5,"T. Bill":10}
2025-05-12 12:24:30.885 +05:30 [INF] Added sub-assets for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 12:24:30.887 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":20,"subAssets":{"Large Cap":8,"Mid Cap":6,"Small Cap":6}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":10.5,"Corp Bonds":14,"Fixed Dep":10.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":25,"subAssets":{"Liquid Mutual Funds":7.5,"Savings Acc":7.5,"T. Bill":10}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 12:24:30.889 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 12:24:30.891 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 37.1054ms
2025-05-12 12:24:30.893 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:24:30.894 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 51.486ms
2025-05-12 12:24:30.921 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:24:30.959 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:24:30.962 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 41.5611ms
2025-05-12 12:24:30.976 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:24:30.981 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:24:30.983 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:24:30.985 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:24:30.988 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:24:30.990 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:24:30.992 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:24:30.997 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 9.0747ms
2025-05-12 12:24:30.999 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:24:31.001 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 25.2507ms
2025-05-12 12:27:41.850 +05:30 [INF] Application is shutting down...
2025-05-12 12:27:51.113 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 12:27:51.345 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 12:27:51.358 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 12:27:51.362 +05:30 [INF] Hosting environment: Development
2025-05-12 12:27:51.363 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 12:28:08.811 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 12:28:08.956 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:28:08.975 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 166.3665ms
2025-05-12 12:28:08.999 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 104
2025-05-12 12:28:09.192 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:28:09.208 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:28:09.270 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:28:09.483 +05:30 [INF] Starting allocation calculation...
2025-05-12 12:28:09.551 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 12:28:09.555 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 12:28:09.581 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 12:28:09.585 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 12:28:09.590 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 12:28:09.593 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 12:28:09.607 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 12:28:09.644 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 12:28:09.649 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 12:28:09.655 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:28:09.659 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 12:28:09.664 +05:30 [INF] Sub-allocations for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 12:28:09.668 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 12:28:09.673 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 12:28:09.678 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:28:09.684 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 12:28:09.690 +05:30 [INF] Added sub-assets for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 12:28:09.755 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 12:28:09.779 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 12:28:09.783 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 12:28:09.809 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 12:28:09.857 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 570.8901ms
2025-05-12 12:28:09.865 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:28:09.874 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 875.9296ms
2025-05-12 12:28:09.906 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:28:09.919 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:28:09.927 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 21.6746ms
2025-05-12 12:28:09.938 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:28:09.952 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:28:09.956 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:28:09.965 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:28:09.974 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:28:09.978 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:28:09.995 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:28:10.005 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 34.1933ms
2025-05-12 12:28:10.007 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:28:10.010 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 71.3926ms
2025-05-12 12:28:36.417 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 12:28:36.438 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:28:36.446 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 28.9712ms
2025-05-12 12:28:36.473 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 108
2025-05-12 12:28:36.496 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:28:36.506 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:28:36.512 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:28:36.522 +05:30 [INF] Starting allocation calculation...
2025-05-12 12:28:36.529 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 12:28:36.532 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 12:28:36.535 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 12:28:36.537 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-12 12:28:36.539 +05:30 [INF] Age adjustments found: {}
2025-05-12 12:28:36.540 +05:30 [INF] Looking up goal tuning for goal: Big Purchase
2025-05-12 12:28:36.543 +05:30 [INF] Goal tuning found: {"balanced":true}
2025-05-12 12:28:36.547 +05:30 [INF] Sub-allocations for equity: {"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}
2025-05-12 12:28:36.550 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 12:28:36.552 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}
2025-05-12 12:28:36.553 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}
2025-05-12 12:28:36.554 +05:30 [INF] Sub-allocations for realEstate: {"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}
2025-05-12 12:28:36.556 +05:30 [INF] Added sub-assets for equity: {"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}
2025-05-12 12:28:36.558 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 12:28:36.560 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}
2025-05-12 12:28:36.561 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}
2025-05-12 12:28:36.563 +05:30 [INF] Added sub-assets for realEstate: {"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}
2025-05-12 12:28:36.565 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":22.5,"subAssets":{"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":12.5,"subAssets":{"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}},"cash":{"percentage":27.5,"subAssets":{"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}},"realEstate":{"percentage":7.5,"subAssets":{"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}}}
2025-05-12 12:28:36.569 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 12:28:36.571 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":22.5,"subAssets":{"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":12.5,"subAssets":{"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}},"cash":{"percentage":27.5,"subAssets":{"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}},"realEstate":{"percentage":7.5,"subAssets":{"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}}}
2025-05-12 12:28:36.574 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 12:28:36.577 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 56.2171ms
2025-05-12 12:28:36.578 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:28:36.580 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 107.3158ms
2025-05-12 12:28:36.601 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:28:36.607 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:28:36.610 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 8.9191ms
2025-05-12 12:28:36.618 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:28:36.625 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:28:36.627 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:28:36.630 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:28:36.635 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:28:36.638 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:28:36.642 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:28:36.650 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 15.7695ms
2025-05-12 12:28:36.654 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:28:36.658 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 39.4054ms
2025-05-12 12:31:42.713 +05:30 [INF] Application is shutting down...
2025-05-12 12:38:19.356 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 12:38:19.482 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 12:38:19.498 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 12:38:19.502 +05:30 [INF] Hosting environment: Development
2025-05-12 12:38:19.508 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 12:38:22.487 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/swagger/index.html - null null
2025-05-12 12:38:22.679 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/swagger/index.html - 200 null text/html;charset=utf-8 192.919ms
2025-05-12 12:38:23.042 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/swagger/v1/swagger.json - null null
2025-05-12 12:38:23.178 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 135.9917ms
2025-05-12 12:38:27.947 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:38:27.974 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 12:38:27.984 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 12:38:27.988 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 401 0 null 41.4731ms
2025-05-12 12:38:45.717 +05:30 [INF] Application is shutting down...
2025-05-12 12:38:50.668 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 12:38:50.860 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 12:38:50.867 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 12:38:50.869 +05:30 [INF] Hosting environment: Development
2025-05-12 12:38:50.871 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 12:38:50.934 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:38:51.002 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:38:51.024 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:38:51.033 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:38:51.040 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:38:51.093 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:38:51.127 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 95.0123ms
2025-05-12 12:38:51.136 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:38:51.141 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 209.1105ms
2025-05-12 12:39:30.032 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 126
2025-05-12 12:39:30.044 +05:30 [INF] CORS policy execution failed.
2025-05-12 12:39:30.047 +05:30 [INF] Request origin http://localhost:5251 does not have permission to access the resource.
2025-05-12 12:39:30.051 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:39:30.061 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:39:30.123 +05:30 [INF] Starting allocation calculation...
2025-05-12 12:39:30.140 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 12:39:30.142 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 12:39:30.148 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 12:39:30.151 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 12:39:30.153 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 12:39:30.155 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 12:39:30.157 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 12:39:30.173 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 12:39:30.176 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 12:39:30.178 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:39:30.181 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 12:39:30.184 +05:30 [INF] Sub-allocations for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 12:39:30.186 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 12:39:30.188 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 12:39:30.189 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:39:30.191 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 12:39:30.192 +05:30 [INF] Added sub-assets for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 12:39:30.221 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 12:39:30.235 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 12:39:30.238 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 12:39:30.242 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 12:39:30.251 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 184.0055ms
2025-05-12 12:39:30.254 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:39:30.257 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 225.8458ms
2025-05-12 12:39:38.868 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:39:38.878 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:39:38.881 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:39:38.886 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:39:38.889 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:39:38.891 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:39:38.893 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 8.3553ms
2025-05-12 12:39:38.895 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:39:38.896 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 28.9059ms
2025-05-12 12:41:47.140 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 12:41:47.147 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:41:47.150 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 10.2258ms
2025-05-12 12:41:47.156 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 104
2025-05-12 12:41:47.269 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:41:47.271 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:41:47.273 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:41:47.280 +05:30 [INF] Starting allocation calculation...
2025-05-12 12:41:47.288 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 12:41:47.292 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 12:41:47.295 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 12:41:47.299 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 12:41:47.303 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 12:41:47.306 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 12:41:47.309 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 12:41:47.315 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 12:41:47.317 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 12:41:47.321 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:41:47.326 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 12:41:47.332 +05:30 [INF] Sub-allocations for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 12:41:47.335 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 12:41:47.338 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 12:41:47.342 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:41:47.345 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 12:41:47.348 +05:30 [INF] Added sub-assets for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 12:41:47.353 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 12:41:47.365 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 12:41:47.369 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 12:41:47.375 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 12:41:47.382 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 103.623ms
2025-05-12 12:41:47.387 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:41:47.391 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 234.185ms
2025-05-12 12:41:47.463 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:41:47.472 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:41:47.478 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:41:47.473 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:41:47.482 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 10.4703ms
2025-05-12 12:41:47.484 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 20.4389ms
2025-05-12 12:41:47.493 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:41:47.503 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:41:47.510 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:41:47.515 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:41:47.516 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:41:47.518 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:41:47.521 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:41:47.522 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:41:47.528 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:41:47.530 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:41:47.531 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:41:47.533 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 10.6481ms
2025-05-12 12:41:47.540 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:41:47.541 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:41:47.545 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 41.4844ms
2025-05-12 12:41:47.544 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:41:47.569 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:41:47.581 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 44.4582ms
2025-05-12 12:41:47.584 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:41:47.586 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 92.8811ms
2025-05-12 12:42:59.554 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:42:59.561 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:42:59.599 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:42:59.611 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:42:59.613 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 59.31ms
2025-05-12 12:42:59.617 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 56.0919ms
2025-05-12 12:42:59.632 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:42:59.636 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:42:59.640 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:42:59.646 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:42:59.647 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:42:59.648 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:42:59.649 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:42:59.651 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:42:59.654 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:42:59.657 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:42:59.659 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:42:59.661 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:42:59.661 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:42:59.664 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:42:59.665 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 11.6513ms
2025-05-12 12:42:59.671 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 14.5911ms
2025-05-12 12:42:59.672 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:42:59.677 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 40.8606ms
2025-05-12 12:42:59.674 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:42:59.690 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 57.2197ms
2025-05-12 12:43:07.378 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:43:07.380 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:43:07.399 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:43:07.401 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 20.0486ms
2025-05-12 12:43:07.402 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:43:07.434 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:43:07.439 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 60.6478ms
2025-05-12 12:43:07.444 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:43:07.473 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:43:07.474 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:43:07.484 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:43:07.486 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:43:07.489 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:43:07.490 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:43:07.492 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:43:07.494 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:43:07.501 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:43:07.502 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:43:07.504 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 13.9607ms
2025-05-12 12:43:07.518 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:43:07.520 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 85.1784ms
2025-05-12 12:43:07.507 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:43:07.584 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:43:07.616 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 116.2931ms
2025-05-12 12:43:07.642 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:43:07.666 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 193.1226ms
2025-05-12 12:43:25.273 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:43:25.274 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:43:25.278 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:43:25.281 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:43:25.282 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 9.3033ms
2025-05-12 12:43:25.284 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 9.8497ms
2025-05-12 12:43:25.289 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:43:25.294 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:43:25.298 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:43:25.301 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:43:25.302 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:43:25.303 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:43:25.305 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:43:25.307 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:43:25.310 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:43:25.313 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:43:25.315 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:43:25.317 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:43:25.317 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:43:25.318 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:43:25.322 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 12.1238ms
2025-05-12 12:43:25.326 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 13.4279ms
2025-05-12 12:43:25.328 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:43:25.331 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:43:25.332 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 42.8072ms
2025-05-12 12:43:25.334 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 40.1789ms
2025-05-12 12:46:17.995 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:46:17.995 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:46:18.004 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:46:18.012 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:46:18.013 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 18.9356ms
2025-05-12 12:46:18.015 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 20.4408ms
2025-05-12 12:46:18.056 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:46:18.057 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:46:18.068 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:46:18.077 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:46:18.080 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:46:18.084 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:46:18.091 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:46:18.095 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:46:18.101 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:46:18.107 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:46:18.113 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:46:18.115 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:46:18.117 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:46:18.120 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:46:18.124 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 23.7463ms
2025-05-12 12:46:18.128 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 20.6282ms
2025-05-12 12:46:18.132 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:46:18.136 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:46:18.141 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 84.42ms
2025-05-12 12:46:18.143 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 86.2285ms
2025-05-12 12:50:49.327 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 12:50:49.334 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:50:49.335 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 8.9117ms
2025-05-12 12:50:49.341 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 104
2025-05-12 12:50:49.346 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:50:49.348 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:50:49.350 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:50:49.355 +05:30 [INF] Starting allocation calculation...
2025-05-12 12:50:49.358 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 12:50:49.360 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 12:50:49.361 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 12:50:49.364 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 12:50:49.366 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 12:50:49.368 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 12:50:49.369 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 12:50:49.371 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 12:50:49.373 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 12:50:49.376 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:50:49.377 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 12:50:49.379 +05:30 [INF] Sub-allocations for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 12:50:49.381 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 12:50:49.384 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 12:50:49.386 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 12:50:49.388 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 12:50:49.390 +05:30 [INF] Added sub-assets for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 12:50:49.393 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 12:50:49.398 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 12:50:49.400 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 12:50:49.402 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 12:50:49.406 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 51.0013ms
2025-05-12 12:50:49.408 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:50:49.411 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 70.0239ms
2025-05-12 12:50:49.450 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:50:49.454 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:50:49.456 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:50:49.462 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:50:49.463 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 12.4231ms
2025-05-12 12:50:49.465 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 11.0742ms
2025-05-12 12:50:49.472 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:50:49.476 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:50:49.480 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:50:49.485 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:50:49.486 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:50:49.489 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:50:49.494 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:50:49.499 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:50:49.506 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:50:49.514 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:50:49.521 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:50:49.525 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:50:49.526 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:50:49.529 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:50:49.534 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 27.6589ms
2025-05-12 12:50:49.542 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 27.9531ms
2025-05-12 12:50:49.546 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:50:49.550 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:50:49.554 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 81.8932ms
2025-05-12 12:50:49.558 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 81.902ms
2025-05-12 12:50:54.574 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:50:54.574 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:50:54.593 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:50:54.602 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:50:54.604 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 29.6446ms
2025-05-12 12:50:54.607 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 32.4846ms
2025-05-12 12:50:54.616 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:50:54.623 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:50:54.632 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:50:54.644 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:50:54.645 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:50:54.647 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:50:54.650 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:50:54.653 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:50:54.656 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:50:54.662 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:50:54.667 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:50:54.672 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:50:54.672 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:50:54.675 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:50:54.679 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 23.2821ms
2025-05-12 12:50:54.687 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 24.295ms
2025-05-12 12:50:54.690 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:50:54.694 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:50:54.697 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 80.5874ms
2025-05-12 12:50:54.703 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 79.1437ms
2025-05-12 12:51:35.378 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:51:35.378 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:51:35.383 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:51:35.388 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:51:35.389 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 11.273ms
2025-05-12 12:51:35.390 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 12.5496ms
2025-05-12 12:51:35.395 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:51:35.404 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:51:35.412 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:51:35.417 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:51:35.418 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:51:35.420 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:51:35.422 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:51:35.425 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:51:35.430 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:51:35.435 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:51:35.441 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:51:35.444 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:51:35.445 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:51:35.448 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:51:35.455 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 25.3084ms
2025-05-12 12:51:35.461 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 25.5654ms
2025-05-12 12:51:35.465 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:51:35.470 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:51:35.474 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 78.641ms
2025-05-12 12:51:35.477 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 72.3735ms
2025-05-12 12:52:00.556 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:52:00.558 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:52:00.562 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:52:00.565 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:52:00.569 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 10.8458ms
2025-05-12 12:52:00.567 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 11.2965ms
2025-05-12 12:52:00.576 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:52:00.584 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:52:00.592 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:52:00.600 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:52:00.602 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:52:00.605 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:52:00.609 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:52:00.614 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:52:00.621 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:52:00.629 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:52:00.634 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:52:00.637 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:52:00.639 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:52:00.642 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:52:00.650 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 28.6349ms
2025-05-12 12:52:00.655 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 26.3971ms
2025-05-12 12:52:00.660 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:52:00.667 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:52:00.676 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 91.9764ms
2025-05-12 12:52:00.672 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 95.4436ms
2025-05-12 12:52:09.239 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:52:09.240 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:52:09.245 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:52:09.250 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:52:09.252 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 12.5828ms
2025-05-12 12:52:09.253 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 12.8997ms
2025-05-12 12:52:09.264 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:52:09.267 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:52:09.272 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:52:09.277 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:52:09.278 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:52:09.279 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:52:09.281 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:52:09.283 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:52:09.291 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:52:09.297 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:52:09.303 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:52:09.305 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:52:09.311 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:52:09.311 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:52:09.320 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 29.3453ms
2025-05-12 12:52:09.326 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 29.6565ms
2025-05-12 12:52:09.331 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:52:09.336 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:52:09.341 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 76.8639ms
2025-05-12 12:52:09.344 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 77.0207ms
2025-05-12 12:53:33.338 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:53:33.338 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:53:33.346 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:53:33.352 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:53:33.355 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 17.0165ms
2025-05-12 12:53:33.354 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 15.7294ms
2025-05-12 12:53:33.367 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:53:33.373 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:53:33.380 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:53:33.383 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:53:33.384 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:53:33.385 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:53:33.387 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:53:33.389 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:53:33.395 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:53:33.399 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:53:33.403 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:53:33.404 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:53:33.405 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:53:33.406 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:53:33.412 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 16.8195ms
2025-05-12 12:53:33.414 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 15.8957ms
2025-05-12 12:53:33.417 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:53:33.419 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:53:33.421 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 53.7685ms
2025-05-12 12:53:33.423 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 49.8989ms
2025-05-12 12:53:46.209 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:53:46.210 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:53:46.215 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:53:46.219 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:53:46.222 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 12.5511ms
2025-05-12 12:53:46.223 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 12.5785ms
2025-05-12 12:53:46.227 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:53:46.235 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:53:46.240 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:53:46.242 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:53:46.244 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:53:46.246 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:53:46.251 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:53:46.252 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:53:46.256 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:53:46.259 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:53:46.262 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:53:46.263 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:53:46.264 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:53:46.266 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:53:46.269 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 13.5781ms
2025-05-12 12:53:46.275 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 16.1132ms
2025-05-12 12:53:46.276 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:53:46.280 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:53:46.283 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 55.3529ms
2025-05-12 12:53:46.285 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 49.1072ms
2025-05-12 12:53:57.834 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:53:57.834 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:53:57.839 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:53:57.843 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:53:57.865 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 30.9581ms
2025-05-12 12:53:57.875 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 41.352ms
2025-05-12 12:53:57.887 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:53:57.896 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:53:57.907 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:53:57.915 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:53:57.917 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:53:57.923 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:53:57.927 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:53:57.930 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:53:57.939 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:53:57.947 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:53:57.954 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:53:57.957 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:53:57.959 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:53:57.961 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:53:57.968 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 28.9803ms
2025-05-12 12:53:57.974 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 27.092ms
2025-05-12 12:53:57.978 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:53:57.983 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:53:57.987 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 100.7034ms
2025-05-12 12:53:57.991 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 95.1647ms
2025-05-12 12:54:23.363 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:54:23.363 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:54:23.390 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:54:23.367 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:54:23.395 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 32.195ms
2025-05-12 12:54:23.397 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 34.6003ms
2025-05-12 12:54:23.440 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:54:23.440 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:54:23.444 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:54:23.447 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:54:23.449 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:54:23.451 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:54:23.453 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:54:23.454 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:54:23.460 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:54:23.463 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:54:23.468 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:54:23.469 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:54:23.470 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:54:23.472 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:54:23.477 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 17.2657ms
2025-05-12 12:54:23.485 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 21.8972ms
2025-05-12 12:54:23.490 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:54:23.495 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:54:23.498 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 58.7024ms
2025-05-12 12:54:23.502 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 62.1087ms
2025-05-12 12:54:35.007 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 12:54:35.012 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:54:35.014 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 6.8366ms
2025-05-12 12:54:35.021 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 12:54:35.027 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:54:35.028 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:54:35.030 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:54:35.033 +05:30 [INF] Starting allocation calculation...
2025-05-12 12:54:35.035 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 12:54:35.036 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 12:54:35.038 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 12:54:35.040 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-12 12:54:35.043 +05:30 [INF] Age adjustments found: {}
2025-05-12 12:54:35.044 +05:30 [INF] Looking up goal tuning for goal: Big Purchase
2025-05-12 12:54:35.046 +05:30 [INF] Goal tuning found: {"balanced":true}
2025-05-12 12:54:35.051 +05:30 [INF] Sub-allocations for equity: {"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}
2025-05-12 12:54:35.053 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 12:54:35.057 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}
2025-05-12 12:54:35.059 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}
2025-05-12 12:54:35.061 +05:30 [INF] Sub-allocations for realEstate: {"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}
2025-05-12 12:54:35.063 +05:30 [INF] Added sub-assets for equity: {"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}
2025-05-12 12:54:35.065 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 12:54:35.067 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}
2025-05-12 12:54:35.069 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}
2025-05-12 12:54:35.070 +05:30 [INF] Added sub-assets for realEstate: {"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}
2025-05-12 12:54:35.073 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":22.5,"subAssets":{"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":12.5,"subAssets":{"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}},"cash":{"percentage":27.5,"subAssets":{"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}},"realEstate":{"percentage":7.5,"subAssets":{"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}}}
2025-05-12 12:54:35.077 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 12:54:35.078 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":22.5,"subAssets":{"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":12.5,"subAssets":{"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}},"cash":{"percentage":27.5,"subAssets":{"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}},"realEstate":{"percentage":7.5,"subAssets":{"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}}}
2025-05-12 12:54:35.082 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 12:54:35.084 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 51.009ms
2025-05-12 12:54:35.086 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:54:35.088 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 66.7458ms
2025-05-12 12:54:35.108 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:54:35.112 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:54:35.114 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 6.2641ms
2025-05-12 12:54:35.118 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:54:35.122 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:54:35.123 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:54:35.125 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:54:35.129 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:54:35.131 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:54:35.133 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 9.4079ms
2025-05-12 12:54:35.136 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:54:35.142 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:54:35.145 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:54:35.151 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:54:35.154 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:54:35.156 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:54:35.159 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 23.4362ms
2025-05-12 12:54:35.162 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:54:35.164 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:54:35.168 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:54:35.170 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 52.2394ms
2025-05-12 12:54:35.174 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:54:35.179 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:54:35.183 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 14.4147ms
2025-05-12 12:54:35.185 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:54:35.187 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 45.1746ms
2025-05-12 12:54:39.477 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:54:39.477 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:54:39.484 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:54:39.488 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:54:39.489 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:54:39.490 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:54:39.493 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:54:39.495 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:54:39.499 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:54:39.503 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:54:39.506 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:54:39.508 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:54:39.511 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:54:39.511 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:54:39.516 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 16.7024ms
2025-05-12 12:54:39.519 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 15.6408ms
2025-05-12 12:54:39.521 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:54:39.525 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:54:39.530 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 53.0174ms
2025-05-12 12:54:39.534 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 57.2929ms
2025-05-12 12:55:48.384 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:55:48.388 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:55:48.391 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:55:48.397 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:55:48.400 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 16.14ms
2025-05-12 12:55:48.401 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 13.6672ms
2025-05-12 12:55:48.414 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:55:48.420 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:55:48.428 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:55:48.431 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:55:48.433 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:55:48.434 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:55:48.435 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:55:48.436 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:55:48.440 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:55:48.445 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:55:48.449 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:55:48.449 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:55:48.451 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:55:48.452 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:55:48.454 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 9.5246ms
2025-05-12 12:55:48.461 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 21.0615ms
2025-05-12 12:55:48.463 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:55:48.465 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:55:48.467 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 46.8842ms
2025-05-12 12:55:48.468 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 54.0777ms
2025-05-12 12:57:09.308 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:57:09.311 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:57:09.317 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:57:09.326 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:57:09.329 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 20.5471ms
2025-05-12 12:57:09.331 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 20.2348ms
2025-05-12 12:57:09.343 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:57:09.350 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:57:09.357 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:57:09.362 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:57:09.364 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:57:09.367 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:57:09.369 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:57:09.374 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:57:09.377 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:57:09.381 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:57:09.383 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:57:09.386 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:57:09.386 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:57:09.389 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:57:09.392 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 14.2221ms
2025-05-12 12:57:09.395 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 14.5399ms
2025-05-12 12:57:09.397 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:57:09.400 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:57:09.402 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 59.1398ms
2025-05-12 12:57:09.406 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 55.17ms
2025-05-12 12:57:23.821 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:57:23.824 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:57:23.826 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:57:23.831 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:57:23.835 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 10.0177ms
2025-05-12 12:57:23.833 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 12.2291ms
2025-05-12 12:57:23.840 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:57:23.847 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:57:23.851 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:57:23.856 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:57:23.857 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:57:23.859 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:57:23.865 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:57:23.869 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:57:23.873 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:57:23.876 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:57:23.885 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:57:23.889 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:57:23.889 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:57:23.891 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:57:23.897 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 24.3404ms
2025-05-12 12:57:23.901 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 24.6624ms
2025-05-12 12:57:23.904 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:57:23.906 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:57:23.909 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 68.4079ms
2025-05-12 12:57:23.913 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 66.3119ms
2025-05-12 12:57:48.268 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:57:48.273 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:57:48.279 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:57:48.285 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:57:48.287 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 19.6412ms
2025-05-12 12:57:48.291 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 17.8116ms
2025-05-12 12:57:48.302 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:57:48.309 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:57:48.315 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:57:48.320 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:57:48.320 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:57:48.325 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:57:48.328 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:57:48.329 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:57:48.333 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:57:48.337 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:57:48.344 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:57:48.345 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:57:48.346 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:57:48.347 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:57:48.350 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 17.1301ms
2025-05-12 12:57:48.354 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 17.7218ms
2025-05-12 12:57:48.362 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:57:48.364 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:57:48.366 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 63.8195ms
2025-05-12 12:57:48.368 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 58.5642ms
2025-05-12 12:58:08.504 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 12:58:08.519 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:58:08.522 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 17.8479ms
2025-05-12 12:58:08.529 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 103
2025-05-12 12:58:08.535 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:58:08.537 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:58:08.539 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:58:08.543 +05:30 [INF] Starting allocation calculation...
2025-05-12 12:58:08.546 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 12:58:08.547 +05:30 [INF] Looking up base allocation for key: High+Short
2025-05-12 12:58:08.550 +05:30 [INF] Base allocation found: {"equity":30,"fixedIncome":30,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 12:58:08.552 +05:30 [INF] Looking up age adjustment rules for key: 45-60
2025-05-12 12:58:08.554 +05:30 [INF] Age adjustments found: {"equity":-10,"fixedIncome":10}
2025-05-12 12:58:08.556 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 12:58:08.560 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 12:58:08.563 +05:30 [INF] Sub-allocations for equity: {"Large Cap":5,"Mid Cap":6.67,"Small Cap":8.33}
2025-05-12 12:58:08.566 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":5.83,"Corp Bonds":23.33,"Fixed Dep":5.83}
2025-05-12 12:58:08.569 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}
2025-05-12 12:58:08.573 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12.5,"Savings Acc":6.25,"T. Bill":6.25}
2025-05-12 12:58:08.578 +05:30 [INF] Sub-allocations for realEstate: {"REITs":2.22,"Residential Prop":2.22,"Commercial Prop":5.56}
2025-05-12 12:58:08.583 +05:30 [INF] Added sub-assets for equity: {"Large Cap":5,"Mid Cap":6.67,"Small Cap":8.33}
2025-05-12 12:58:08.587 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":5.83,"Corp Bonds":23.33,"Fixed Dep":5.83}
2025-05-12 12:58:08.592 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}
2025-05-12 12:58:08.596 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12.5,"Savings Acc":6.25,"T. Bill":6.25}
2025-05-12 12:58:08.603 +05:30 [INF] Added sub-assets for realEstate: {"REITs":2.22,"Residential Prop":2.22,"Commercial Prop":5.56}
2025-05-12 12:58:08.607 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":20,"subAssets":{"Large Cap":5,"Mid Cap":6.67,"Small Cap":8.33}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":5.83,"Corp Bonds":23.33,"Fixed Dep":5.83}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}},"cash":{"percentage":25,"subAssets":{"Liquid Mutual Funds":12.5,"Savings Acc":6.25,"T. Bill":6.25}},"realEstate":{"percentage":10,"subAssets":{"REITs":2.22,"Residential Prop":2.22,"Commercial Prop":5.56}}}
2025-05-12 12:58:08.619 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 12:58:08.621 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":20,"subAssets":{"Large Cap":5,"Mid Cap":6.67,"Small Cap":8.33}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":5.83,"Corp Bonds":23.33,"Fixed Dep":5.83}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}},"cash":{"percentage":25,"subAssets":{"Liquid Mutual Funds":12.5,"Savings Acc":6.25,"T. Bill":6.25}},"realEstate":{"percentage":10,"subAssets":{"REITs":2.22,"Residential Prop":2.22,"Commercial Prop":5.56}}}
2025-05-12 12:58:08.625 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 12:58:08.629 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 85.8224ms
2025-05-12 12:58:08.632 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 12:58:08.635 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 106.0512ms
2025-05-12 12:58:08.658 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:58:08.661 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:58:08.662 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:58:08.670 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:58:08.672 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 14.4572ms
2025-05-12 12:58:08.674 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 13.4256ms
2025-05-12 12:58:08.681 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:58:08.686 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:58:08.689 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:58:08.696 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:58:08.698 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:58:08.701 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:58:08.705 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:58:08.708 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:58:08.715 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:58:08.722 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:58:08.727 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:58:08.730 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:58:08.737 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:58:08.737 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:58:08.745 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 30.3855ms
2025-05-12 12:58:08.751 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 29.5824ms
2025-05-12 12:58:08.755 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:58:08.758 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:58:08.760 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 79.7755ms
2025-05-12 12:58:08.763 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 77.0674ms
2025-05-12 12:59:09.617 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:59:09.618 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:59:09.622 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:59:09.626 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:59:09.627 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 10.3884ms
2025-05-12 12:59:09.629 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 11.4592ms
2025-05-12 12:59:09.643 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 12:59:09.644 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 12:59:09.648 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:59:09.651 +05:30 [INF] CORS policy execution successful.
2025-05-12 12:59:09.652 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:59:09.654 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:59:09.657 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 12:59:09.659 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 12:59:09.664 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 12:59:09.669 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 12:59:09.674 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 12:59:09.676 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 12:59:09.678 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:59:09.680 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 12:59:09.684 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 19.7952ms
2025-05-12 12:59:09.689 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 19.963ms
2025-05-12 12:59:09.692 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 12:59:09.695 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 12:59:09.698 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 54.9003ms
2025-05-12 12:59:09.705 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 61.0127ms
2025-05-12 13:00:34.332 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 13:00:34.333 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 13:00:34.344 +05:30 [INF] CORS policy execution successful.
2025-05-12 13:00:34.354 +05:30 [INF] CORS policy execution successful.
2025-05-12 13:00:34.357 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 24.6771ms
2025-05-12 13:00:34.361 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 27.8546ms
2025-05-12 13:00:34.368 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 13:00:34.375 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 13:00:34.380 +05:30 [INF] CORS policy execution successful.
2025-05-12 13:00:34.385 +05:30 [INF] CORS policy execution successful.
2025-05-12 13:00:34.387 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 13:00:34.388 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 13:00:34.394 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 13:00:34.396 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 13:00:34.401 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 13:00:34.405 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 13:00:34.408 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 13:00:34.410 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 13:00:34.411 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 13:00:34.414 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 13:00:34.416 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 15.2573ms
2025-05-12 13:00:34.420 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 15.0426ms
2025-05-12 13:00:34.422 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 13:00:34.425 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 13:00:34.428 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 59.9426ms
2025-05-12 13:00:34.430 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 55.2592ms
2025-05-12 13:49:38.866 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 13:49:38.870 +05:30 [INF] CORS policy execution successful.
2025-05-12 13:49:38.871 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 4.5399ms
2025-05-12 13:49:38.875 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 13:49:38.885 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 7:48:58 AM', Current time (UTC): '5/12/2025 8:19:38 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 13:49:38.886 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 13:49:38.912 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 7:48:58 AM', Current time (UTC): '5/12/2025 8:19:38 AM'.
2025-05-12 13:49:38.914 +05:30 [INF] CORS policy execution successful.
2025-05-12 13:49:38.917 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 31.2893ms
2025-05-12 13:49:38.916 +05:30 [INF] CORS policy execution successful.
2025-05-12 13:49:38.930 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 13:49:38.951 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 7:48:58 AM', Current time (UTC): '5/12/2025 8:19:38 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 13:49:38.950 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 13:49:38.956 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 7:48:58 AM', Current time (UTC): '5/12/2025 8:19:38 AM'.
2025-05-12 13:49:38.964 +05:30 [INF] CORS policy execution successful.
2025-05-12 13:49:38.965 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 13:49:38.967 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 13:49:38.973 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 13:49:38.975 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 13:49:38.980 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 13:49:38.989 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 15.8295ms
2025-05-12 13:49:38.991 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 13:49:38.992 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 62.3649ms
2025-05-12 13:49:39.014 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 13:49:39.060 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 401 0 null 185.2043ms
2025-05-12 13:59:07.269 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 13:59:07.269 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 13:59:07.272 +05:30 [INF] CORS policy execution successful.
2025-05-12 13:59:07.274 +05:30 [INF] CORS policy execution successful.
2025-05-12 13:59:07.275 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 6.1752ms
2025-05-12 13:59:07.277 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 8.3407ms
2025-05-12 13:59:07.282 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 13:59:07.286 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 13:59:07.289 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 7:48:58 AM', Current time (UTC): '5/12/2025 8:29:07 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 13:59:07.298 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 7:48:58 AM', Current time (UTC): '5/12/2025 8:29:07 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 13:59:07.300 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 7:48:58 AM', Current time (UTC): '5/12/2025 8:29:07 AM'.
2025-05-12 13:59:07.307 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 7:48:58 AM', Current time (UTC): '5/12/2025 8:29:07 AM'.
2025-05-12 13:59:07.307 +05:30 [INF] CORS policy execution successful.
2025-05-12 13:59:07.311 +05:30 [INF] CORS policy execution successful.
2025-05-12 13:59:07.312 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 13:59:07.313 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 13:59:07.315 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 13:59:07.316 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 13:59:07.317 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 401 0 null 34.3552ms
2025-05-12 13:59:07.320 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 13:59:07.325 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 13:59:07.328 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 13:59:07.330 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 10.8814ms
2025-05-12 13:59:07.332 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 13:59:07.334 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 48.0367ms
2025-05-12 14:00:19.133 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:00:19.134 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:00:19.137 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:00:19.140 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:00:19.141 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 7.7728ms
2025-05-12 14:00:19.142 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 7.7463ms
2025-05-12 14:00:19.159 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:00:19.159 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:00:19.163 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 7:48:58 AM', Current time (UTC): '5/12/2025 8:30:19 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 14:00:19.167 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 7:48:58 AM', Current time (UTC): '5/12/2025 8:30:19 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 14:00:19.173 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 7:48:58 AM', Current time (UTC): '5/12/2025 8:30:19 AM'.
2025-05-12 14:00:19.176 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 7:48:58 AM', Current time (UTC): '5/12/2025 8:30:19 AM'.
2025-05-12 14:00:19.177 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:00:19.181 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 14:00:19.179 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:00:19.183 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:00:19.182 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 14:00:19.187 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:00:19.189 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 401 0 null 30.119ms
2025-05-12 14:00:19.193 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:00:19.201 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:00:19.227 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:00:19.232 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 38.6715ms
2025-05-12 14:00:19.242 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:00:19.246 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 86.8459ms
2025-05-12 14:01:06.348 +05:30 [INF] Application is shutting down...
2025-05-12 14:01:10.971 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 14:01:11.099 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 14:01:11.104 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 14:01:11.106 +05:30 [INF] Hosting environment: Development
2025-05-12 14:01:11.107 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 14:01:14.217 +05:30 [INF] Application is shutting down...
2025-05-12 14:01:22.706 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 14:01:22.962 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 14:01:22.969 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 14:01:22.974 +05:30 [INF] Hosting environment: Development
2025-05-12 14:01:22.976 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 14:01:27.887 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 14:01:27.957 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:01:27.970 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 83.9017ms
2025-05-12 14:01:27.984 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 14:01:27.993 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:01:27.998 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 14:01:28.022 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 14:01:28.099 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 14:01:28.101 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 14:01:28.102 +05:30 [INF] Users loaded successfully from JSON file.
2025-05-12 14:01:28.226 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:01:28.247 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 217.6709ms
2025-05-12 14:01:28.250 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 14:01:28.251 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 267.5169ms
2025-05-12 14:01:46.586 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 14:01:46.595 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:01:46.598 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 12.2301ms
2025-05-12 14:01:46.605 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 105
2025-05-12 14:01:46.665 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:01:46.671 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 14:01:46.679 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:01:46.703 +05:30 [INF] Starting allocation calculation...
2025-05-12 14:01:46.728 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 14:01:46.729 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 14:01:46.733 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 14:01:46.735 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 14:01:46.738 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 14:01:46.740 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 14:01:46.746 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 14:01:46.762 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 14:01:46.765 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 14:01:46.767 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 14:01:46.769 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 14:01:46.771 +05:30 [INF] Sub-allocations for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 14:01:46.773 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 14:01:46.775 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 14:01:46.777 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 14:01:46.779 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 14:01:46.781 +05:30 [INF] Added sub-assets for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 14:01:46.802 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 14:01:46.812 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 14:01:46.815 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 14:01:46.820 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 14:01:46.825 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 141.8674ms
2025-05-12 14:01:46.829 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 14:01:46.832 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 226.5497ms
2025-05-12 14:01:46.857 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:01:46.862 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:01:46.864 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 6.7607ms
2025-05-12 14:01:46.866 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:01:46.871 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:01:46.874 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:01:46.878 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 12.9145ms
2025-05-12 14:01:46.883 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:01:46.886 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:01:46.889 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:01:46.891 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:01:46.891 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:01:46.900 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:01:46.901 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:01:46.910 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:01:46.916 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:01:46.918 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:01:46.920 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:01:46.923 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:01:46.926 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:01:46.928 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 14.004ms
2025-05-12 14:01:46.930 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:01:46.931 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 47.6566ms
2025-05-12 14:01:46.933 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 26.8842ms
2025-05-12 14:01:46.940 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:01:46.942 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 70.9516ms
2025-05-12 14:02:13.282 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:02:13.283 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:02:13.285 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:02:13.288 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:02:13.289 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 6.7964ms
2025-05-12 14:02:13.290 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 6.1832ms
2025-05-12 14:02:13.293 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:02:13.298 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:02:13.301 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:02:13.304 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:02:13.306 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:02:13.306 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:02:13.307 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:02:13.309 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:02:13.312 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:02:13.318 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:02:13.318 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:02:13.320 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:02:13.322 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:02:13.322 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:02:13.326 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 14.6823ms
2025-05-12 14:02:13.327 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 11.009ms
2025-05-12 14:02:13.330 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:02:13.332 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:02:13.333 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 35.6731ms
2025-05-12 14:02:13.335 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 42.2025ms
2025-05-12 14:03:14.198 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:03:14.198 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:03:14.202 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:03:14.205 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:03:14.207 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 8.8133ms
2025-05-12 14:03:14.209 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 10.6795ms
2025-05-12 14:03:14.213 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:03:14.218 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:03:14.222 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:03:14.227 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:03:14.227 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:03:14.228 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:03:14.230 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:03:14.231 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:03:14.235 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:03:14.240 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:03:14.244 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:03:14.246 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:03:14.249 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:03:14.254 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:03:14.252 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 17.8263ms
2025-05-12 14:03:14.262 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 24.8396ms
2025-05-12 14:03:14.264 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:03:14.265 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:03:14.267 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 54.0287ms
2025-05-12 14:03:14.268 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 50.2825ms
2025-05-12 14:03:51.960 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:03:51.963 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:03:51.974 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:03:51.966 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:03:51.977 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 14.095ms
2025-05-12 14:03:51.980 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 19.2647ms
2025-05-12 14:03:51.987 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:03:51.993 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:03:51.998 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:03:52.002 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:03:52.004 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:03:52.005 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:03:52.010 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:03:52.011 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:03:52.020 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:03:52.028 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:03:52.035 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:03:52.037 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:03:52.039 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:03:52.040 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:03:52.062 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 41.4375ms
2025-05-12 14:03:52.071 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:03:52.075 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 87.8277ms
2025-05-12 14:03:52.065 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 37.5697ms
2025-05-12 14:03:52.103 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:03:52.115 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 121.6637ms
2025-05-12 14:04:05.581 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:04:05.587 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:04:05.599 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:04:05.606 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 18.4613ms
2025-05-12 14:04:05.591 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:04:05.615 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:04:05.619 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 37.4071ms
2025-05-12 14:04:05.627 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:04:05.636 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:04:05.638 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:04:05.645 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:04:05.646 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:04:05.649 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:04:05.655 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:04:05.660 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:04:05.676 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:04:05.680 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:04:05.680 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:04:05.685 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:04:05.687 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:04:05.690 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 34.8588ms
2025-05-12 14:04:05.697 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:04:05.703 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 87.7132ms
2025-05-12 14:04:05.695 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 19.0233ms
2025-05-12 14:04:05.765 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:04:05.774 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 137.5378ms
2025-05-12 14:07:33.974 +05:30 [INF] Application is shutting down...
2025-05-12 14:07:38.626 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 14:07:38.770 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 14:07:38.775 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 14:07:38.777 +05:30 [INF] Hosting environment: Development
2025-05-12 14:07:38.778 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 14:07:53.441 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 14:07:53.502 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:07:53.509 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 69.4656ms
2025-05-12 14:07:53.521 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 115
2025-05-12 14:07:53.597 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:07:53.604 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 14:07:53.631 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:07:53.717 +05:30 [INF] Starting allocation calculation...
2025-05-12 14:07:53.750 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 14:07:53.752 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 14:07:53.760 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 14:07:53.763 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-12 14:07:53.764 +05:30 [INF] Age adjustments found: {}
2025-05-12 14:07:53.765 +05:30 [INF] Looking up goal tuning for goal: Wealth Accumulation
2025-05-12 14:07:53.770 +05:30 [INF] Goal tuning found: {"equity_priority":true,"equity_boost":2,"equity_threshold":40}
2025-05-12 14:07:53.786 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 14:07:53.788 +05:30 [WRN] No sub-allocation rules found for asset class: fixedIncome
2025-05-12 14:07:53.790 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":3,"Energy":2.25,"Agriculture":2.25}
2025-05-12 14:07:53.791 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":6.75,"Savings Acc":6.75,"T. Bill":9}
2025-05-12 14:07:53.793 +05:30 [WRN] No sub-allocation rules found for asset class: RealEstate
2025-05-12 14:07:53.794 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 14:07:53.795 +05:30 [WRN] No sub-assets for fixedIncome. Added empty sub-assets.
2025-05-12 14:07:53.796 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":3,"Energy":2.25,"Agriculture":2.25}
2025-05-12 14:07:53.798 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":6.75,"Savings Acc":6.75,"T. Bill":9}
2025-05-12 14:07:53.801 +05:30 [WRN] No sub-assets for realEstate. Added empty sub-assets.
2025-05-12 14:07:53.823 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":37.5,"subAssets":{}},"commodities":{"percentage":7.5,"subAssets":{"Precious Metals":3,"Energy":2.25,"Agriculture":2.25}},"cash":{"percentage":22.5,"subAssets":{"Liquid Mutual Funds":6.75,"Savings Acc":6.75,"T. Bill":9}},"realEstate":{"percentage":2.5,"subAssets":{}}}
2025-05-12 14:07:53.834 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 14:07:53.837 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":37.5,"subAssets":{}},"commodities":{"percentage":7.5,"subAssets":{"Precious Metals":3,"Energy":2.25,"Agriculture":2.25}},"cash":{"percentage":22.5,"subAssets":{"Liquid Mutual Funds":6.75,"Savings Acc":6.75,"T. Bill":9}},"realEstate":{"percentage":2.5,"subAssets":{}}}
2025-05-12 14:07:53.844 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 14:07:53.858 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 219.8082ms
2025-05-12 14:07:53.863 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 14:07:53.867 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 345.4641ms
2025-05-12 14:07:53.895 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:07:53.896 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:07:53.908 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:07:53.908 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:07:53.910 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 15.4972ms
2025-05-12 14:07:53.912 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 16.0093ms
2025-05-12 14:07:53.933 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:07:53.933 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:07:53.946 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:07:53.947 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:07:53.949 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:07:53.949 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:07:53.954 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:07:53.955 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:07:53.959 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:07:53.962 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:07:53.962 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:07:53.965 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:07:53.966 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:07:53.971 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 13.7752ms
2025-05-12 14:07:53.974 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:07:53.975 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 42.3706ms
2025-05-12 14:07:53.982 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:07:53.990 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 29.9721ms
2025-05-12 14:07:53.992 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:07:53.994 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 60.7522ms
2025-05-12 14:09:59.436 +05:30 [INF] Application is shutting down...
2025-05-12 14:10:08.760 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 14:10:08.871 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 14:10:08.876 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 14:10:08.878 +05:30 [INF] Hosting environment: Development
2025-05-12 14:10:08.880 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 14:10:21.533 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 14:10:21.603 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:10:21.611 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 79.6777ms
2025-05-12 14:10:21.623 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 14:10:21.714 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:10:21.723 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 14:10:21.753 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:10:21.843 +05:30 [INF] Starting allocation calculation...
2025-05-12 14:10:21.870 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 14:10:21.871 +05:30 [INF] Looking up base allocation for key: High+Mod
2025-05-12 14:10:21.882 +05:30 [INF] Base allocation found: {"equity":60,"fixedIncome":20,"commodities":10,"cash":5,"realEstate":5}
2025-05-12 14:10:21.885 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 14:10:21.887 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 14:10:21.888 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 14:10:21.894 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 14:10:21.908 +05:30 [INF] Sub-allocations for equity: {"Large Cap":13.75,"Mid Cap":18.33,"Small Cap":22.92}
2025-05-12 14:10:21.911 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":4.17,"Corp Bonds":16.67,"Fixed Dep":4.17}
2025-05-12 14:10:21.913 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}
2025-05-12 14:10:21.914 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":0,"Savings Acc":0,"T. Bill":0}
2025-05-12 14:10:21.916 +05:30 [WRN] No sub-allocation rules found for asset class: RealEstate
2025-05-12 14:10:21.916 +05:30 [INF] Added sub-assets for equity: {"Large Cap":13.75,"Mid Cap":18.33,"Small Cap":22.92}
2025-05-12 14:10:21.919 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":4.17,"Corp Bonds":16.67,"Fixed Dep":4.17}
2025-05-12 14:10:21.921 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}
2025-05-12 14:10:21.922 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":0,"Savings Acc":0,"T. Bill":0}
2025-05-12 14:10:21.924 +05:30 [WRN] No sub-assets for realEstate. Added empty sub-assets.
2025-05-12 14:10:21.946 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":55,"subAssets":{"Large Cap":13.75,"Mid Cap":18.33,"Small Cap":22.92}},"fixedIncome":{"percentage":25,"subAssets":{"Gov Bonds":4.17,"Corp Bonds":16.67,"Fixed Dep":4.17}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}},"cash":{"percentage":0,"subAssets":{"Liquid Mutual Funds":0,"Savings Acc":0,"T. Bill":0}},"realEstate":{"percentage":10,"subAssets":{}}}
2025-05-12 14:10:21.958 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 14:10:21.960 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":55,"subAssets":{"Large Cap":13.75,"Mid Cap":18.33,"Small Cap":22.92}},"fixedIncome":{"percentage":25,"subAssets":{"Gov Bonds":4.17,"Corp Bonds":16.67,"Fixed Dep":4.17}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":1.67,"Energy":4.17,"Agriculture":4.17}},"cash":{"percentage":0,"subAssets":{"Liquid Mutual Funds":0,"Savings Acc":0,"T. Bill":0}},"realEstate":{"percentage":10,"subAssets":{}}}
2025-05-12 14:10:21.968 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 14:10:21.983 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 223.0902ms
2025-05-12 14:10:21.986 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 14:10:21.989 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 366.5912ms
2025-05-12 14:10:22.008 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:10:22.015 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:10:22.021 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:10:22.021 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:10:22.022 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 7.1994ms
2025-05-12 14:10:22.024 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 16.0676ms
2025-05-12 14:10:22.029 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:10:22.035 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:10:22.046 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:10:22.046 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:10:22.050 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:10:22.050 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:10:22.057 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:10:22.057 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:10:22.064 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:10:22.066 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:10:22.066 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:10:22.073 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:10:22.076 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:10:22.081 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 17.4572ms
2025-05-12 14:10:22.084 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:10:22.086 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 51.413ms
2025-05-12 14:10:22.088 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:10:22.099 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 37.8865ms
2025-05-12 14:10:22.113 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:10:22.116 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 86.9282ms
2025-05-12 14:13:25.486 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 14:13:25.491 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:13:25.493 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 6.9457ms
2025-05-12 14:13:25.499 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 104
2025-05-12 14:13:25.505 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:13:25.509 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 14:13:25.513 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:13:25.521 +05:30 [INF] Starting allocation calculation...
2025-05-12 14:13:25.525 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 14:13:25.527 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 14:13:25.529 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 14:13:25.532 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-12 14:13:25.534 +05:30 [INF] Age adjustments found: {}
2025-05-12 14:13:25.535 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 14:13:25.538 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 14:13:25.541 +05:30 [INF] Sub-allocations for equity: {"Large Cap":8,"Mid Cap":6,"Small Cap":6}
2025-05-12 14:13:25.543 +05:30 [WRN] No sub-allocation rules found for asset class: fixedIncome
2025-05-12 14:13:25.546 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 14:13:25.548 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":7.5,"Savings Acc":7.5,"T. Bill":10}
2025-05-12 14:13:25.550 +05:30 [WRN] No sub-allocation rules found for asset class: RealEstate
2025-05-12 14:13:25.551 +05:30 [INF] Added sub-assets for equity: {"Large Cap":8,"Mid Cap":6,"Small Cap":6}
2025-05-12 14:13:25.553 +05:30 [WRN] No sub-assets for fixedIncome. Added empty sub-assets.
2025-05-12 14:13:25.555 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 14:13:25.557 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":7.5,"Savings Acc":7.5,"T. Bill":10}
2025-05-12 14:13:25.558 +05:30 [WRN] No sub-assets for realEstate. Added empty sub-assets.
2025-05-12 14:13:25.560 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":20,"subAssets":{"Large Cap":8,"Mid Cap":6,"Small Cap":6}},"fixedIncome":{"percentage":35,"subAssets":{}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":25,"subAssets":{"Liquid Mutual Funds":7.5,"Savings Acc":7.5,"T. Bill":10}},"realEstate":{"percentage":10,"subAssets":{}}}
2025-05-12 14:13:25.564 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 14:13:25.565 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":20,"subAssets":{"Large Cap":8,"Mid Cap":6,"Small Cap":6}},"fixedIncome":{"percentage":35,"subAssets":{}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":25,"subAssets":{"Liquid Mutual Funds":7.5,"Savings Acc":7.5,"T. Bill":10}},"realEstate":{"percentage":10,"subAssets":{}}}
2025-05-12 14:13:25.568 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 14:13:25.570 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 52.087ms
2025-05-12 14:13:25.573 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 14:13:25.574 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 74.9163ms
2025-05-12 14:13:25.596 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:13:25.598 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:13:25.601 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 4.5099ms
2025-05-12 14:13:25.605 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:13:25.610 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:13:25.613 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:13:25.616 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:13:25.617 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 11.8486ms
2025-05-12 14:13:25.618 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:13:25.632 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:13:25.633 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:13:25.645 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:13:25.648 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:13:25.648 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:13:25.651 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:13:25.652 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:13:25.654 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:13:25.656 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:13:25.656 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:13:25.660 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 13.115ms
2025-05-12 14:13:25.661 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:13:25.662 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:13:25.664 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 9.9648ms
2025-05-12 14:13:25.665 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 54.2823ms
2025-05-12 14:13:25.666 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:13:25.670 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 38.5883ms
2025-05-12 14:14:04.150 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 14:14:04.157 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:14:04.159 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 8.6981ms
2025-05-12 14:14:04.168 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 109
2025-05-12 14:14:04.173 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:14:04.174 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 14:14:04.175 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:14:04.180 +05:30 [INF] Starting allocation calculation...
2025-05-12 14:14:04.183 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 14:14:04.184 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 14:14:04.185 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 14:14:04.187 +05:30 [INF] Looking up age adjustment rules for key: 60+
2025-05-12 14:14:04.189 +05:30 [INF] Age adjustments found: {"equity":-20,"fixedIncome":15,"realEstate":-5,"cash":10}
2025-05-12 14:14:04.191 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-12 14:14:04.192 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-12 14:14:04.194 +05:30 [INF] Sub-allocations for equity: {"Large Cap":-0.5,"Mid Cap":-0.38,"Small Cap":-0.38}
2025-05-12 14:14:04.196 +05:30 [WRN] No sub-allocation rules found for asset class: fixedIncome
2025-05-12 14:14:04.198 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":3.5,"Energy":2.62,"Agriculture":2.62}
2025-05-12 14:14:04.202 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-12 14:14:04.204 +05:30 [WRN] No sub-allocation rules found for asset class: RealEstate
2025-05-12 14:14:04.205 +05:30 [INF] Added sub-assets for equity: {"Large Cap":-0.5,"Mid Cap":-0.38,"Small Cap":-0.38}
2025-05-12 14:14:04.206 +05:30 [WRN] No sub-assets for fixedIncome. Added empty sub-assets.
2025-05-12 14:14:04.207 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":3.5,"Energy":2.62,"Agriculture":2.62}
2025-05-12 14:14:04.208 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-12 14:14:04.209 +05:30 [WRN] No sub-assets for realEstate. Added empty sub-assets.
2025-05-12 14:14:04.210 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":-1.25,"subAssets":{"Large Cap":-0.5,"Mid Cap":-0.38,"Small Cap":-0.38}},"fixedIncome":{"percentage":53.75,"subAssets":{}},"commodities":{"percentage":8.75,"subAssets":{"Precious Metals":3.5,"Energy":2.62,"Agriculture":2.62}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-1.25,"subAssets":{}}}
2025-05-12 14:14:04.214 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 14:14:04.216 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":-1.25,"subAssets":{"Large Cap":-0.5,"Mid Cap":-0.38,"Small Cap":-0.38}},"fixedIncome":{"percentage":53.75,"subAssets":{}},"commodities":{"percentage":8.75,"subAssets":{"Precious Metals":3.5,"Energy":2.62,"Agriculture":2.62}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-1.25,"subAssets":{}}}
2025-05-12 14:14:04.218 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 14:14:04.220 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 40.6566ms
2025-05-12 14:14:04.222 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 14:14:04.223 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 54.9544ms
2025-05-12 14:14:04.241 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:14:04.245 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:14:04.289 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:14:04.246 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:14:04.362 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 117.4603ms
2025-05-12 14:14:04.363 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 122.6583ms
2025-05-12 14:14:04.367 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:14:04.370 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:14:04.373 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:14:04.376 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:14:04.376 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:14:04.377 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:14:04.379 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:14:04.380 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:14:04.384 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:14:04.387 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:14:04.389 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:14:04.385 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:14:04.395 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:14:04.396 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:14:04.395 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 13.0805ms
2025-05-12 14:14:04.399 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 13.9325ms
2025-05-12 14:14:04.400 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:14:04.402 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:14:04.404 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 37.0281ms
2025-05-12 14:14:04.405 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 34.9741ms
2025-05-12 14:14:44.641 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 14:14:44.645 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:14:44.647 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 6.2558ms
2025-05-12 14:14:44.653 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 104
2025-05-12 14:14:44.659 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:14:44.661 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 14:14:44.663 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:14:44.667 +05:30 [INF] Starting allocation calculation...
2025-05-12 14:14:44.670 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 14:14:44.671 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 14:14:44.673 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 14:14:44.676 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 14:14:44.678 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 14:14:44.680 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 14:14:44.681 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 14:14:44.683 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 14:14:44.685 +05:30 [WRN] No sub-allocation rules found for asset class: fixedIncome
2025-05-12 14:14:44.686 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 14:14:44.687 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 14:14:44.688 +05:30 [WRN] No sub-allocation rules found for asset class: RealEstate
2025-05-12 14:14:44.690 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 14:14:44.692 +05:30 [WRN] No sub-assets for fixedIncome. Added empty sub-assets.
2025-05-12 14:14:44.693 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 14:14:44.695 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 14:14:44.697 +05:30 [WRN] No sub-assets for realEstate. Added empty sub-assets.
2025-05-12 14:14:44.699 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{}}}
2025-05-12 14:14:44.704 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 14:14:44.706 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{}}}
2025-05-12 14:14:44.709 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 14:14:44.711 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 44.462ms
2025-05-12 14:14:44.714 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 14:14:44.716 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 63.42ms
2025-05-12 14:14:44.736 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:14:44.742 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:14:44.742 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:14:44.750 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:14:44.750 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 14.3901ms
2025-05-12 14:14:44.754 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 12.2733ms
2025-05-12 14:14:44.759 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:14:44.770 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:14:44.771 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:14:44.774 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:14:44.780 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:14:44.763 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:14:44.785 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:14:44.793 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:14:44.793 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:14:44.794 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:14:44.797 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 16.8435ms
2025-05-12 14:14:44.799 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:14:44.800 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:14:44.802 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:14:44.803 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 43.922ms
2025-05-12 14:14:44.805 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:14:44.809 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:14:44.810 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 8.487ms
2025-05-12 14:14:44.812 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:14:44.813 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 49.9469ms
2025-05-12 14:16:22.516 +05:30 [INF] Application is shutting down...
2025-05-12 14:16:29.760 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 14:16:30.005 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 14:16:30.014 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 14:16:30.017 +05:30 [INF] Hosting environment: Development
2025-05-12 14:16:30.020 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 14:16:42.361 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 14:16:42.426 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:16:42.434 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 73.3576ms
2025-05-12 14:16:42.443 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 104
2025-05-12 14:16:42.520 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:16:42.527 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 14:16:42.555 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:16:42.643 +05:30 [INF] Starting allocation calculation...
2025-05-12 14:16:42.669 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 14:16:42.672 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 14:16:42.681 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 14:16:42.684 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 14:16:42.685 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 14:16:42.686 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 14:16:42.692 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 14:16:42.706 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 14:16:42.709 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 14:16:42.710 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 14:16:42.712 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 14:16:42.713 +05:30 [INF] Sub-allocations for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 14:16:42.715 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 14:16:42.717 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 14:16:42.718 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 14:16:42.719 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 14:16:42.721 +05:30 [INF] Added sub-assets for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 14:16:42.744 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 14:16:42.756 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 14:16:42.758 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 14:16:42.766 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 14:16:42.783 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 219.3028ms
2025-05-12 14:16:42.785 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 14:16:42.789 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 346.3128ms
2025-05-12 14:16:42.809 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:16:42.810 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:16:42.817 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:16:42.818 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:16:42.819 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 10.5496ms
2025-05-12 14:16:42.829 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:16:42.824 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 14.0599ms
2025-05-12 14:16:42.841 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:16:42.846 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:16:42.850 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:16:42.852 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:16:42.855 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:16:42.858 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:16:42.862 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:16:42.863 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:16:42.868 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:16:42.868 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:16:42.871 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:16:42.872 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:16:42.877 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 16.0498ms
2025-05-12 14:16:42.879 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:16:42.881 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 52.7611ms
2025-05-12 14:16:42.885 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:16:42.897 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 30.814ms
2025-05-12 14:16:42.903 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:16:42.910 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 63.61ms
2025-05-12 14:18:23.091 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:18:23.092 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:18:23.098 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:18:23.101 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:18:23.103 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 11.8533ms
2025-05-12 14:18:23.104 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 11.6203ms
2025-05-12 14:18:23.111 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:18:23.116 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:18:23.121 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:18:23.126 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:18:23.127 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:18:23.129 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:18:23.131 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:18:23.134 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:18:23.139 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:18:23.141 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:18:23.144 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:18:23.148 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:18:23.148 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:18:23.152 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 15.69ms
2025-05-12 14:18:23.156 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:18:23.156 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:18:23.158 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 47.0079ms
2025-05-12 14:18:23.199 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 59.039ms
2025-05-12 14:18:23.206 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:18:23.209 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 92.4432ms
2025-05-12 14:21:52.209 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:21:52.234 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:21:52.266 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:21:52.283 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:21:52.293 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 83.8032ms
2025-05-12 14:21:52.301 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 66.7727ms
2025-05-12 14:21:53.249 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:21:59.235 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:21:59.348 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:21:59.361 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:21:59.375 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:21:59.398 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:21:59.454 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:22:01.455 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:22:03.716 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:22:03.715 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:22:03.740 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:22:03.758 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:22:03.774 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:22:03.822 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:22:03.847 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 107.0944ms
2025-05-12 14:22:03.852 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 4455.369ms
2025-05-12 14:22:03.875 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:22:03.890 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:22:03.907 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 10657.3182ms
2025-05-12 14:22:03.927 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 4691.4678ms
2025-05-12 14:25:44.842 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:25:45.413 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:25:48.784 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:25:48.944 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:25:48.951 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 4108.2534ms
2025-05-12 14:25:48.969 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 3565.1236ms
2025-05-12 14:25:49.083 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:25:49.250 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:25:49.277 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:25:49.420 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:25:49.426 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:25:49.486 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:25:49.477 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:25:49.518 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:25:49.716 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:25:49.734 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:25:49.777 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:25:49.790 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:25:49.847 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:25:49.860 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 342.5272ms
2025-05-12 14:25:49.868 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:25:49.883 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:25:49.904 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 127.5986ms
2025-05-12 14:25:49.917 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 833.8535ms
2025-05-12 14:25:49.940 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:25:50.009 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 758.4982ms
2025-05-12 14:25:57.892 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:25:58.134 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:25:59.736 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:25:59.761 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:25:59.769 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 1877.0639ms
2025-05-12 14:25:59.779 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 1645.0572ms
2025-05-12 14:25:59.839 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:25:59.913 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:25:59.984 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:26:00.034 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:26:00.043 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:26:00.056 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:26:00.072 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:26:00.124 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:26:00.097 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:26:00.144 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:26:00.165 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:26:00.175 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:26:00.204 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 79.8309ms
2025-05-12 14:26:00.205 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:26:00.222 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:26:00.237 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:26:00.246 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 406.6931ms
2025-05-12 14:26:00.280 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 115.7089ms
2025-05-12 14:26:00.321 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:26:00.349 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 436.1006ms
2025-05-12 14:30:43.425 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:30:45.605 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:30:52.669 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:30:50.713 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:30:52.631 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:30:50.566 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:30:52.680 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 7074.9731ms
2025-05-12 14:30:52.775 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:30:52.784 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 9359.2331ms
2025-05-12 14:30:53.943 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:30:53.986 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 3273.1036ms
2025-05-12 14:30:54.154 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 3588.3739ms
2025-05-12 14:30:54.239 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:30:58.473 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:31:03.430 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:31:07.759 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:31:07.813 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:31:11.632 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:31:11.693 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:31:11.720 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:31:11.746 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:31:11.752 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:31:12.176 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:31:12.339 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 4579.8362ms
2025-05-12 14:31:12.893 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:31:12.689 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:31:12.972 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:31:12.676 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 4862.4372ms
2025-05-12 14:31:12.948 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:31:12.862 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:31:13.048 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:31:13.105 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:31:13.347 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:31:13.505 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:31:14.192 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:31:14.237 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:31:14.511 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:31:14.522 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:31:14.565 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:31:14.585 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:31:14.617 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:31:14.670 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 1808.6761ms
2025-05-12 14:31:14.674 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 1702.4801ms
2025-05-12 14:31:14.683 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:31:14.698 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:31:14.715 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:31:14.731 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:31:14.743 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:31:14.758 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:31:14.765 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 499 null application/json; charset=utf-8 20526.0155ms
2025-05-12 14:31:14.785 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 499 null application/json; charset=utf-8 16312.4359ms
2025-05-12 14:31:14.818 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 252.4408ms
2025-05-12 14:31:14.825 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:31:14.954 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 255.9878ms
2025-05-12 14:31:14.933 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:31:15.014 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:31:15.043 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 2149.9004ms
2025-05-12 14:31:15.085 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 2037.4449ms
2025-05-12 14:36:13.680 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 14:36:13.752 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:36:13.769 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 89.5353ms
2025-05-12 14:36:13.865 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 105
2025-05-12 14:36:13.902 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:36:13.930 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 14:36:13.948 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:36:13.987 +05:30 [INF] Starting allocation calculation...
2025-05-12 14:36:14.014 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 14:36:14.026 +05:30 [INF] Looking up base allocation for key: Low+Mod
2025-05-12 14:36:14.036 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":50,"commodities":10,"cash":15,"realEstate":5}
2025-05-12 14:36:14.049 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-12 14:36:14.062 +05:30 [INF] Age adjustments found: {}
2025-05-12 14:36:14.079 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 14:36:14.093 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 14:36:14.113 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}
2025-05-12 14:36:14.135 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":22.5,"Corp Bonds":9,"Fixed Dep":13.5}
2025-05-12 14:36:14.161 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}
2025-05-12 14:36:14.185 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":3.46,"Savings Acc":5.77,"T. Bill":5.77}
2025-05-12 14:36:14.200 +05:30 [INF] Sub-allocations for realEstate: {"REITs":4,"Residential Prop":4,"Commercial Prop":2}
2025-05-12 14:36:14.214 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}
2025-05-12 14:36:14.534 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":22.5,"Corp Bonds":9,"Fixed Dep":13.5}
2025-05-12 14:36:14.593 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}
2025-05-12 14:36:14.627 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":3.46,"Savings Acc":5.77,"T. Bill":5.77}
2025-05-12 14:36:14.661 +05:30 [INF] Added sub-assets for realEstate: {"REITs":4,"Residential Prop":4,"Commercial Prop":2}
2025-05-12 14:36:14.685 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":20,"subAssets":{"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}},"fixedIncome":{"percentage":45,"subAssets":{"Gov Bonds":22.5,"Corp Bonds":9,"Fixed Dep":13.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}},"cash":{"percentage":15,"subAssets":{"Liquid Mutual Funds":3.46,"Savings Acc":5.77,"T. Bill":5.77}},"realEstate":{"percentage":10,"subAssets":{"REITs":4,"Residential Prop":4,"Commercial Prop":2}}}
2025-05-12 14:36:14.829 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 14:36:14.849 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":20,"subAssets":{"Large Cap":12.5,"Mid Cap":5,"Small Cap":2.5}},"fixedIncome":{"percentage":45,"subAssets":{"Gov Bonds":22.5,"Corp Bonds":9,"Fixed Dep":13.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}},"cash":{"percentage":15,"subAssets":{"Liquid Mutual Funds":3.46,"Savings Acc":5.77,"T. Bill":5.77}},"realEstate":{"percentage":10,"subAssets":{"REITs":4,"Residential Prop":4,"Commercial Prop":2}}}
2025-05-12 14:36:14.897 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 14:36:14.920 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 942.7941ms
2025-05-12 14:36:14.965 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 14:36:14.981 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 1115.8723ms
2025-05-12 14:36:15.243 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:36:15.578 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:36:15.603 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:36:15.736 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:36:15.744 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 502.1114ms
2025-05-12 14:36:15.755 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 177.2506ms
2025-05-12 14:36:15.789 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:36:15.928 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:36:15.943 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:36:16.037 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:36:16.045 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:36:16.078 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:36:16.091 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:36:16.246 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:36:16.200 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:36:16.283 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:36:16.432 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:36:16.443 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:36:16.504 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 258.5943ms
2025-05-12 14:36:16.505 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:36:16.552 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:36:16.570 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:36:16.598 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 809.8556ms
2025-05-12 14:36:16.660 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 228.7111ms
2025-05-12 14:36:17.608 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:36:17.645 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 1716.7366ms
2025-05-12 14:36:36.407 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:36:36.411 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:36:36.806 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:36:36.884 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:36:36.889 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 481.953ms
2025-05-12 14:36:37.013 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 603.6469ms
2025-05-12 14:36:37.050 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:36:37.099 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:36:37.123 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:36:37.179 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:36:37.183 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:36:37.192 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:36:37.203 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:36:37.218 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:36:37.238 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:36:37.266 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:36:37.283 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:36:37.305 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:36:37.310 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:36:37.322 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 84.3562ms
2025-05-12 14:36:37.377 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:36:37.387 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:36:37.391 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 341.6694ms
2025-05-12 14:36:37.713 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 447.2635ms
2025-05-12 14:36:38.005 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:36:38.078 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 979.0133ms
2025-05-12 14:40:22.286 +05:30 [INF] Application is shutting down...
2025-05-12 14:41:33.005 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 14:41:34.637 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 14:41:34.831 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 14:41:34.868 +05:30 [INF] Hosting environment: Development
2025-05-12 14:41:34.896 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 14:42:03.641 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:42:03.636 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:42:04.177 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:42:04.177 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:42:04.311 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 684.7934ms
2025-05-12 14:42:04.373 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 708.9871ms
2025-05-12 14:42:04.477 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:42:04.485 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:42:05.621 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:42:05.622 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:42:05.712 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:42:05.712 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:42:05.998 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:42:05.998 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:42:06.082 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:42:06.115 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:42:06.167 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:42:06.171 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:42:06.738 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:42:07.035 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 963.8443ms
2025-05-12 14:42:07.078 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:42:07.079 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:42:07.151 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 2673.8907ms
2025-05-12 14:42:07.248 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 1163.5175ms
2025-05-12 14:42:07.274 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:42:07.297 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 2812.0618ms
2025-05-12 14:42:15.289 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:42:15.292 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:42:15.372 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:42:15.455 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 165.1991ms
2025-05-12 14:42:15.457 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:42:15.549 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 14:42:15.569 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 276.0062ms
2025-05-12 14:42:15.648 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:42:15.706 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 14:42:15.742 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:42:15.802 +05:30 [INF] CORS policy execution successful.
2025-05-12 14:42:15.812 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 14:42:15.824 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:42:15.884 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 14:42:15.897 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 14:42:15.917 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 14:42:15.949 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 14:42:15.978 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 14:42:15.981 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:42:15.993 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 14:42:16.031 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 151.2526ms
2025-05-12 14:42:16.045 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 98.5588ms
2025-05-12 14:42:16.135 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 14:42:16.150 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 14:42:16.163 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 613.2873ms
2025-05-12 14:42:16.180 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 473.3472ms
2025-05-12 15:06:41.217 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 15:06:41.217 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 15:06:41.220 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:06:41.223 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:06:41.225 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 8.5101ms
2025-05-12 15:06:41.227 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 10.4903ms
2025-05-12 15:06:41.231 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 15:06:41.235 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 15:06:41.243 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:36:41 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 15:06:41.243 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:36:41 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 15:06:41.264 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:36:41 AM'.
2025-05-12 15:06:41.267 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:36:41 AM'.
2025-05-12 15:06:41.268 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:06:41.271 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:06:41.272 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 15:06:41.273 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 15:06:41.278 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 15:06:41.278 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 15:06:41.280 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 401 0 null 48.9467ms
2025-05-12 15:06:41.282 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 401 0 null 46.36ms
2025-05-12 15:08:00.121 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 15:08:00.127 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:08:00.129 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 7.9175ms
2025-05-12 15:08:00.134 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 15:08:00.140 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:00 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 15:08:00.144 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:00 AM'.
2025-05-12 15:08:00.145 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:08:00.146 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 15:08:00.147 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 15:08:00.148 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 401 0 null 14.302ms
2025-05-12 15:08:00.957 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 15:08:00.961 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:00 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 15:08:00.965 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:00 AM'.
2025-05-12 15:08:00.966 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:08:00.966 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 15:08:00.967 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 15:08:00.969 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 401 0 null 12.1137ms
2025-05-12 15:08:02.651 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 15:08:02.656 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:02 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 15:08:02.660 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:02 AM'.
2025-05-12 15:08:02.662 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:08:02.664 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 15:08:02.666 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 15:08:02.667 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 401 0 null 15.9435ms
2025-05-12 15:08:07.099 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 15:08:07.106 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:08:07.109 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 10.1327ms
2025-05-12 15:08:07.114 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 15:08:07.118 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:07 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 15:08:07.124 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:07 AM'.
2025-05-12 15:08:07.125 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:08:07.126 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 15:08:07.128 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 15:08:07.129 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 401 0 null 15.1068ms
2025-05-12 15:08:08.649 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 15:08:08.656 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:08 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 15:08:08.660 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:08 AM'.
2025-05-12 15:08:08.662 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:08:08.663 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 15:08:08.666 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 15:08:08.667 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 401 0 null 18.1624ms
2025-05-12 15:08:08.815 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 15:08:08.818 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:08 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 15:08:08.822 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:08 AM'.
2025-05-12 15:08:08.824 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:08:08.825 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 15:08:08.826 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 15:08:08.827 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 401 0 null 12.8105ms
2025-05-12 15:08:10.552 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 15:08:10.558 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:10 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 15:08:10.563 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:10 AM'.
2025-05-12 15:08:10.566 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:08:10.567 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 15:08:10.569 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 15:08:10.570 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 401 0 null 17.9655ms
2025-05-12 15:08:10.739 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 15:08:10.744 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:10 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 15:08:10.748 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:10 AM'.
2025-05-12 15:08:10.751 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:08:10.752 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 15:08:10.753 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 15:08:10.754 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 401 0 null 14.4834ms
2025-05-12 15:08:11.754 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 15:08:11.760 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:11 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 15:08:11.765 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:11 AM'.
2025-05-12 15:08:11.766 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:08:11.767 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 15:08:11.769 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 15:08:11.771 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 401 0 null 16.7595ms
2025-05-12 15:08:11.920 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 15:08:11.925 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:11 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 15:08:11.930 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:11 AM'.
2025-05-12 15:08:11.932 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:08:11.933 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 15:08:11.935 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 15:08:11.936 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 401 0 null 16.2294ms
2025-05-12 15:08:13.486 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 15:08:13.490 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:08:13.492 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 6.5914ms
2025-05-12 15:08:13.497 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 15:08:13.499 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:13 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 15:08:13.502 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:13 AM'.
2025-05-12 15:08:13.503 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:08:13.504 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 15:08:13.505 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 15:08:13.506 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 401 0 null 9.434ms
2025-05-12 15:08:13.946 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 15:08:13.949 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:13 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 15:08:13.953 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:13 AM'.
2025-05-12 15:08:13.956 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:08:13.957 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 15:08:13.961 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 15:08:13.962 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 401 0 null 16.0254ms
2025-05-12 15:08:14.099 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 15:08:14.102 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:14 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 15:08:14.106 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 9:31:28 AM', Current time (UTC): '5/12/2025 9:38:14 AM'.
2025-05-12 15:08:14.108 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:08:14.110 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 15:08:14.112 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 15:08:14.113 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 401 0 null 14.147ms
2025-05-12 15:08:47.126 +05:30 [INF] Application is shutting down...
2025-05-12 15:08:54.778 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 15:08:54.974 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 15:08:54.982 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 15:08:54.984 +05:30 [INF] Hosting environment: Development
2025-05-12 15:08:54.985 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 15:09:11.368 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 15:09:11.418 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:09:11.425 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 59.6386ms
2025-05-12 15:09:11.440 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 15:09:11.446 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:09:11.451 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 15:09:11.471 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 15:09:11.537 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 15:09:11.539 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 15:09:11.540 +05:30 [INF] Users loaded successfully from JSON file.
2025-05-12 15:09:11.669 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 15:09:11.692 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 214.8615ms
2025-05-12 15:09:11.694 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 15:09:11.696 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 256.7602ms
2025-05-12 15:09:28.719 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 15:09:28.727 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:09:28.729 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 10.0163ms
2025-05-12 15:09:28.736 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 15:09:28.830 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:09:28.834 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 15:09:28.842 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 15:09:28.863 +05:30 [INF] Starting allocation calculation...
2025-05-12 15:09:28.882 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 15:09:28.883 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 15:09:28.887 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 15:09:28.892 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-12 15:09:28.894 +05:30 [INF] Age adjustments found: {}
2025-05-12 15:09:28.895 +05:30 [INF] Looking up goal tuning for goal: Big Purchase
2025-05-12 15:09:28.899 +05:30 [INF] Goal tuning found: {"balanced":true}
2025-05-12 15:09:28.914 +05:30 [INF] Sub-allocations for equity: {"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}
2025-05-12 15:09:28.916 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 15:09:28.918 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}
2025-05-12 15:09:28.919 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}
2025-05-12 15:09:28.921 +05:30 [INF] Sub-allocations for realEstate: {"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}
2025-05-12 15:09:28.924 +05:30 [INF] Added sub-assets for equity: {"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}
2025-05-12 15:09:28.927 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 15:09:28.928 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}
2025-05-12 15:09:28.931 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}
2025-05-12 15:09:28.932 +05:30 [INF] Added sub-assets for realEstate: {"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}
2025-05-12 15:09:28.952 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":22.5,"subAssets":{"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":12.5,"subAssets":{"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}},"cash":{"percentage":27.5,"subAssets":{"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}},"realEstate":{"percentage":7.5,"subAssets":{"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}}}
2025-05-12 15:09:28.964 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 15:09:28.965 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":22.5,"subAssets":{"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":12.5,"subAssets":{"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}},"cash":{"percentage":27.5,"subAssets":{"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}},"realEstate":{"percentage":7.5,"subAssets":{"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}}}
2025-05-12 15:09:28.970 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 15:09:28.976 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 131.8427ms
2025-05-12 15:09:28.980 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 15:09:28.984 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 247.7442ms
2025-05-12 15:09:29.070 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 15:09:29.071 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 15:09:29.119 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:09:29.123 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:09:29.124 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 53.7216ms
2025-05-12 15:09:29.125 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 53.4833ms
2025-05-12 15:09:29.130 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 15:09:29.141 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 15:09:29.165 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:09:29.165 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:09:29.168 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 15:09:29.168 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 15:09:29.173 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 15:09:29.174 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 15:09:29.178 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 15:09:29.179 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 15:09:29.180 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 15:09:29.181 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 15:09:29.183 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 15:09:29.186 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 15:09:29.186 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 8.5981ms
2025-05-12 15:09:29.191 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 15:09:29.192 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 62.091ms
2025-05-12 15:09:29.194 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 18.2801ms
2025-05-12 15:09:29.198 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 15:09:29.200 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 59.1216ms
2025-05-12 15:14:41.983 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=Moderate - application/json 800
2025-05-12 15:14:41.989 +05:30 [INF] CORS policy execution failed.
2025-05-12 15:14:41.990 +05:30 [INF] Request origin http://localhost:5251 does not have permission to access the resource.
2025-05-12 15:14:41.995 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 15:14:42.001 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 15:14:42.003 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=10000&investmentHorizon=Moderate - 401 0 null 19.3969ms
2025-05-12 15:14:59.802 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/swagger/index.html - null null
2025-05-12 15:14:59.856 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/swagger/index.html - 200 null text/html;charset=utf-8 54.0007ms
2025-05-12 15:15:00.086 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/swagger/v1/swagger.json - null null
2025-05-12 15:15:00.166 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 79.949ms
2025-05-12 15:18:38.778 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 15:18:38.785 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:18:38.787 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 9.2238ms
2025-05-12 15:18:38.792 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 15:18:38.795 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:18:38.797 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 15:18:38.800 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 15:18:38.805 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 15:18:38.808 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 15:18:38.810 +05:30 [INF] Users loaded successfully from JSON file.
2025-05-12 15:18:38.890 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 15:18:38.893 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 89.1395ms
2025-05-12 15:18:38.895 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 15:18:38.897 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 104.2981ms
2025-05-12 15:19:29.323 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 15:19:29.328 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:19:29.329 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 5.9566ms
2025-05-12 15:19:29.341 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 15:19:29.347 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:19:29.348 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 15:19:29.352 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 15:19:29.359 +05:30 [INF] Starting allocation calculation...
2025-05-12 15:19:29.361 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 15:19:29.363 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 15:19:29.364 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 15:19:29.367 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-12 15:19:29.369 +05:30 [INF] Age adjustments found: {}
2025-05-12 15:19:29.371 +05:30 [INF] Looking up goal tuning for goal: Big Purchase
2025-05-12 15:19:29.373 +05:30 [INF] Goal tuning found: {"balanced":true}
2025-05-12 15:19:29.378 +05:30 [INF] Sub-allocations for equity: {"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}
2025-05-12 15:19:29.381 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 15:19:29.383 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}
2025-05-12 15:19:29.385 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}
2025-05-12 15:19:29.388 +05:30 [INF] Sub-allocations for realEstate: {"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}
2025-05-12 15:19:29.391 +05:30 [INF] Added sub-assets for equity: {"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}
2025-05-12 15:19:29.393 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 15:19:29.394 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}
2025-05-12 15:19:29.396 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}
2025-05-12 15:19:29.397 +05:30 [INF] Added sub-assets for realEstate: {"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}
2025-05-12 15:19:29.399 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":22.5,"subAssets":{"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":12.5,"subAssets":{"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}},"cash":{"percentage":27.5,"subAssets":{"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}},"realEstate":{"percentage":7.5,"subAssets":{"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}}}
2025-05-12 15:19:29.406 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 15:19:29.408 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":22.5,"subAssets":{"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":12.5,"subAssets":{"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}},"cash":{"percentage":27.5,"subAssets":{"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}},"realEstate":{"percentage":7.5,"subAssets":{"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}}}
2025-05-12 15:19:29.410 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 15:19:29.411 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 54.6759ms
2025-05-12 15:19:29.413 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 15:19:29.416 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 74.7755ms
2025-05-12 15:19:29.440 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 15:19:29.444 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:19:29.446 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 5.3368ms
2025-05-12 15:19:29.450 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 15:19:29.450 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 15:19:29.454 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:19:29.457 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:19:29.457 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 6.9374ms
2025-05-12 15:19:29.458 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 15:19:29.462 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 15:19:29.464 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 15:19:29.467 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:19:29.470 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 15:19:29.470 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 15:19:29.472 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 15:19:29.473 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 15:19:29.474 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 15:19:29.476 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 15:19:29.482 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 12.912ms
2025-05-12 15:19:29.485 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 15:19:29.486 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 15:19:29.488 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 15:19:29.490 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 39.6866ms
2025-05-12 15:19:29.493 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 17.4097ms
2025-05-12 15:19:29.500 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 15:19:29.511 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 49.2704ms
2025-05-12 15:45:58.508 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 15:45:58.511 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 15:45:58.518 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:45:58.520 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:45:58.521 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 12.614ms
2025-05-12 15:45:58.522 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 11.3178ms
2025-05-12 15:45:58.538 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 15:45:58.542 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 15:45:58.546 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:45:58.551 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:45:58.556 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 15:45:58.557 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 15:45:58.558 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 15:45:58.560 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 15:45:58.567 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 15:45:58.652 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 15:45:58.659 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 15:45:58.662 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 15:45:58.661 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 15:45:58.676 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 109.4487ms
2025-05-12 15:45:58.683 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 15:45:58.691 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 153.5715ms
2025-05-12 15:45:58.678 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 15:45:58.716 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 144.9422ms
2025-05-12 15:45:58.724 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 15:45:58.726 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 184.5953ms
2025-05-12 15:47:07.095 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Auth/register - null null
2025-05-12 15:47:07.101 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:47:07.103 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Auth/register - 204 null null 8.3733ms
2025-05-12 15:47:07.109 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Auth/register - application/json 53
2025-05-12 15:47:07.113 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:47:07.115 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Register (WisVest)'
2025-05-12 15:47:07.118 +05:30 [INF] Route matched with {action = "Register", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Register(UserRegisterRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 15:47:07.126 +05:30 [INF] Checking if user with email testac@gmail.com exists.
2025-05-12 15:47:07.128 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 15:47:07.130 +05:30 [INF] Users loaded successfully from JSON file.
2025-05-12 15:47:07.302 +05:30 [INF] Attempting to add a new user.
2025-05-12 15:47:07.305 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 15:47:07.308 +05:30 [INF] Users loaded successfully from JSON file.
2025-05-12 15:47:07.315 +05:30 [INF] Attempting to save all users to JSON file.
2025-05-12 15:47:07.326 +05:30 [INF] Users saved successfully to JSON file.
2025-05-12 15:47:07.329 +05:30 [INF] User added successfully with ID 6.
2025-05-12 15:47:07.334 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType0`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 15:47:07.340 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Register (WisVest) in 219.1188ms
2025-05-12 15:47:07.345 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Register (WisVest)'
2025-05-12 15:47:07.350 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Auth/register - 200 null application/json; charset=utf-8 241.3625ms
2025-05-12 15:47:15.175 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 15:47:15.183 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:47:15.186 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 11.2119ms
2025-05-12 15:47:15.193 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 15:47:15.199 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:47:15.201 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 15:47:15.202 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 15:47:15.206 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 15:47:15.207 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 15:47:15.209 +05:30 [INF] Users loaded successfully from JSON file.
2025-05-12 15:47:15.381 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 15:47:15.386 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 181.0912ms
2025-05-12 15:47:15.390 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 15:47:15.394 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 201.5883ms
2025-05-12 15:47:27.754 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - null null
2025-05-12 15:47:27.762 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:47:27.766 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - 204 null null 11.9747ms
2025-05-12 15:47:27.776 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Products/products - null null
2025-05-12 15:47:27.782 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:47:27.785 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-12 15:47:27.799 +05:30 [INF] Route matched with {action = "LoadProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LoadProducts() on controller WisVestAPI.Controllers.ProductsController (WisVest).
2025-05-12 15:47:27.823 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[WisVestAPI.Models.DTOs.ProductDTO, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-05-12 15:47:27.835 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest) in 30.0412ms
2025-05-12 15:47:27.840 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-12 15:47:27.845 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Products/products - 200 null application/json; charset=utf-8 69.2957ms
2025-05-12 15:48:47.715 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - null null
2025-05-12 15:48:47.719 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:48:47.720 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - 204 null null 5.8011ms
2025-05-12 15:49:34.435 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 15:49:34.447 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:49:34.452 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 17.3362ms
2025-05-12 15:49:34.459 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 111
2025-05-12 15:49:34.465 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:49:34.466 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 15:49:34.468 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 15:49:34.474 +05:30 [INF] Starting allocation calculation...
2025-05-12 15:49:34.479 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 15:49:34.482 +05:30 [INF] Looking up base allocation for key: Low+Mod
2025-05-12 15:49:34.484 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":50,"commodities":10,"cash":15,"realEstate":5}
2025-05-12 15:49:34.487 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 15:49:34.490 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 15:49:34.495 +05:30 [INF] Looking up goal tuning for goal: Child's Education
2025-05-12 15:49:34.498 +05:30 [WRN] No goal tuning found for goal: Child's Education
2025-05-12 15:49:34.503 +05:30 [INF] Sub-allocations for equity: {"Large Cap":18.75,"Mid Cap":7.5,"Small Cap":3.75}
2025-05-12 15:49:34.507 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":22.5,"Corp Bonds":9,"Fixed Dep":13.5}
2025-05-12 15:49:34.512 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}
2025-05-12 15:49:34.518 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":2.31,"Savings Acc":3.85,"T. Bill":3.85}
2025-05-12 15:49:34.521 +05:30 [INF] Sub-allocations for realEstate: {"REITs":2,"Residential Prop":2,"Commercial Prop":1}
2025-05-12 15:49:34.524 +05:30 [INF] Added sub-assets for equity: {"Large Cap":18.75,"Mid Cap":7.5,"Small Cap":3.75}
2025-05-12 15:49:34.530 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":22.5,"Corp Bonds":9,"Fixed Dep":13.5}
2025-05-12 15:49:34.534 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}
2025-05-12 15:49:34.538 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":2.31,"Savings Acc":3.85,"T. Bill":3.85}
2025-05-12 15:49:34.542 +05:30 [INF] Added sub-assets for realEstate: {"REITs":2,"Residential Prop":2,"Commercial Prop":1}
2025-05-12 15:49:34.548 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":18.75,"Mid Cap":7.5,"Small Cap":3.75}},"fixedIncome":{"percentage":45,"subAssets":{"Gov Bonds":22.5,"Corp Bonds":9,"Fixed Dep":13.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}},"cash":{"percentage":10,"subAssets":{"Liquid Mutual Funds":2.31,"Savings Acc":3.85,"T. Bill":3.85}},"realEstate":{"percentage":5,"subAssets":{"REITs":2,"Residential Prop":2,"Commercial Prop":1}}}
2025-05-12 15:49:34.557 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 15:49:34.563 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":18.75,"Mid Cap":7.5,"Small Cap":3.75}},"fixedIncome":{"percentage":45,"subAssets":{"Gov Bonds":22.5,"Corp Bonds":9,"Fixed Dep":13.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":6.25,"Energy":2.5,"Agriculture":1.25}},"cash":{"percentage":10,"subAssets":{"Liquid Mutual Funds":2.31,"Savings Acc":3.85,"T. Bill":3.85}},"realEstate":{"percentage":5,"subAssets":{"REITs":2,"Residential Prop":2,"Commercial Prop":1}}}
2025-05-12 15:49:34.568 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 15:49:34.574 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 100.7378ms
2025-05-12 15:49:34.579 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 15:49:34.583 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 124.3296ms
2025-05-12 15:49:34.615 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 15:49:34.619 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 15:49:34.624 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:49:34.635 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:49:34.638 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 22.3926ms
2025-05-12 15:49:34.642 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 22.4021ms
2025-05-12 15:49:34.655 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 15:49:34.660 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 15:49:34.665 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:49:34.671 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:49:34.672 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 15:49:34.676 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 15:49:34.674 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 15:49:34.681 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 15:49:34.683 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 15:49:34.686 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 15:49:34.692 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 15:49:34.696 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 15:49:34.700 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 15:49:34.702 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 21.7022ms
2025-05-12 15:49:34.705 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 15:49:34.708 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 15:49:34.713 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 20.8039ms
2025-05-12 15:49:34.714 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 59.8197ms
2025-05-12 15:49:34.717 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 15:49:34.725 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 64.9658ms
2025-05-12 15:51:46.183 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 15:51:46.187 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:51:46.189 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 5.5768ms
2025-05-12 15:51:46.194 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 15:51:46.197 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:51:46.200 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 15:51:46.204 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 15:51:46.213 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 15:51:46.216 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 15:51:46.221 +05:30 [INF] Users loaded successfully from JSON file.
2025-05-12 15:51:46.463 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 15:51:46.469 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 257.3538ms
2025-05-12 15:51:46.474 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 15:51:46.477 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 283.3776ms
2025-05-12 15:51:52.636 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 15:51:52.646 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:51:52.651 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 14.9671ms
2025-05-12 15:51:52.659 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 15:51:52.665 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:51:52.666 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 15:51:52.668 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 15:51:52.672 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 15:51:52.674 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 15:51:52.677 +05:30 [INF] Users loaded successfully from JSON file.
2025-05-12 15:51:52.885 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 15:51:52.892 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 219.9351ms
2025-05-12 15:51:52.895 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 15:51:52.898 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 239.0755ms
2025-05-12 15:52:07.878 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 15:52:07.891 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:52:07.895 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 16.4832ms
2025-05-12 15:52:07.905 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 15:52:07.909 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:52:07.911 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 15:52:07.913 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 15:52:07.917 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 15:52:07.919 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 15:52:07.922 +05:30 [INF] Users loaded successfully from JSON file.
2025-05-12 15:52:08.134 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 15:52:08.139 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 223.3831ms
2025-05-12 15:52:08.144 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 15:52:08.149 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 243.9413ms
2025-05-12 15:52:11.728 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - null null
2025-05-12 15:52:11.733 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:52:11.734 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - 204 null null 6.0509ms
2025-05-12 15:52:11.742 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Products/products - null null
2025-05-12 15:52:11.746 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:52:11.748 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-12 15:52:11.750 +05:30 [INF] Route matched with {action = "LoadProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LoadProducts() on controller WisVestAPI.Controllers.ProductsController (WisVest).
2025-05-12 15:52:11.755 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[WisVestAPI.Models.DTOs.ProductDTO, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-05-12 15:52:11.758 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest) in 4.9211ms
2025-05-12 15:52:11.761 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-12 15:52:11.763 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Products/products - 200 null application/json; charset=utf-8 21.5691ms
2025-05-12 15:52:20.358 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - null null
2025-05-12 15:52:20.363 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:52:20.364 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - 204 null null 6.2277ms
2025-05-12 15:52:32.820 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - null null
2025-05-12 15:52:32.824 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:52:32.826 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - 204 null null 6.417ms
2025-05-12 15:52:42.762 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - null null
2025-05-12 15:52:42.771 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:52:42.774 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - 204 null null 11.819ms
2025-05-12 15:53:10.427 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - null null
2025-05-12 15:53:10.434 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:53:10.437 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - 204 null null 9.8778ms
2025-05-12 15:53:10.443 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Products/products - null null
2025-05-12 15:53:10.449 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:53:10.451 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-12 15:53:10.455 +05:30 [INF] Route matched with {action = "LoadProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LoadProducts() on controller WisVestAPI.Controllers.ProductsController (WisVest).
2025-05-12 15:53:10.464 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[WisVestAPI.Models.DTOs.ProductDTO, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-05-12 15:53:10.468 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest) in 6.3074ms
2025-05-12 15:53:10.470 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-12 15:53:10.474 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Products/products - 200 null application/json; charset=utf-8 30.8327ms
2025-05-12 15:53:19.515 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - null null
2025-05-12 15:53:19.519 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:53:19.521 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - 204 null null 5.9055ms
2025-05-12 15:53:42.351 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - null null
2025-05-12 15:53:42.359 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:53:42.361 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - 204 null null 9.6701ms
2025-05-12 15:53:42.368 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Products/products - null null
2025-05-12 15:53:42.375 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:53:42.377 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-12 15:53:42.384 +05:30 [INF] Route matched with {action = "LoadProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LoadProducts() on controller WisVestAPI.Controllers.ProductsController (WisVest).
2025-05-12 15:53:42.395 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[WisVestAPI.Models.DTOs.ProductDTO, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-05-12 15:53:42.401 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest) in 10.1955ms
2025-05-12 15:53:42.406 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-12 15:53:42.410 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Products/products - 200 null application/json; charset=utf-8 41.0113ms
2025-05-12 15:53:45.741 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 15:53:45.747 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:53:45.750 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 8.8316ms
2025-05-12 15:53:45.756 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 15:53:45.761 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:53:45.763 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 15:53:45.765 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 15:53:45.772 +05:30 [INF] Fetching user with email Chikku@gmail.com.
2025-05-12 15:53:45.774 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 15:53:45.778 +05:30 [INF] Users loaded successfully from JSON file.
2025-05-12 15:53:46.040 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 15:53:46.045 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 275.4631ms
2025-05-12 15:53:46.050 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 15:53:46.056 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 300.2226ms
2025-05-12 15:53:53.082 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - null null
2025-05-12 15:53:53.101 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:53:53.110 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - 204 null null 25.6533ms
2025-05-12 15:53:53.135 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Products/products - null null
2025-05-12 15:53:53.153 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:53:53.160 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-12 15:53:53.167 +05:30 [INF] Route matched with {action = "LoadProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LoadProducts() on controller WisVestAPI.Controllers.ProductsController (WisVest).
2025-05-12 15:53:53.189 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[WisVestAPI.Models.DTOs.ProductDTO, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-05-12 15:53:53.196 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest) in 12.3344ms
2025-05-12 15:53:53.202 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-12 15:53:53.205 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Products/products - 200 null application/json; charset=utf-8 69.5731ms
2025-05-12 15:55:46.726 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - null null
2025-05-12 15:55:46.734 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:55:46.736 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - 204 null null 9.7881ms
2025-05-12 15:55:46.742 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Products/products - null null
2025-05-12 15:55:46.747 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:55:46.749 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-12 15:55:46.752 +05:30 [INF] Route matched with {action = "LoadProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LoadProducts() on controller WisVestAPI.Controllers.ProductsController (WisVest).
2025-05-12 15:55:46.760 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[WisVestAPI.Models.DTOs.ProductDTO, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-05-12 15:55:46.765 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest) in 7.3339ms
2025-05-12 15:55:46.769 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-12 15:55:46.772 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Products/products - 200 null application/json; charset=utf-8 30.312ms
2025-05-12 15:56:56.293 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Auth/register - null null
2025-05-12 15:56:56.298 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:56:56.300 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Auth/register - 204 null null 7.3272ms
2025-05-12 15:56:56.305 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Auth/register - application/json 47
2025-05-12 15:56:56.310 +05:30 [INF] CORS policy execution successful.
2025-05-12 15:56:56.313 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Register (WisVest)'
2025-05-12 15:56:56.315 +05:30 [INF] Route matched with {action = "Register", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Register(UserRegisterRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 15:56:56.320 +05:30 [INF] Checking if user with email dfd@xyz.com exists.
2025-05-12 15:56:56.321 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 15:56:56.323 +05:30 [INF] Users loaded successfully from JSON file.
2025-05-12 15:56:56.520 +05:30 [INF] Attempting to add a new user.
2025-05-12 15:56:56.522 +05:30 [INF] Attempting to load all users from JSON file.
2025-05-12 15:56:56.526 +05:30 [INF] Users loaded successfully from JSON file.
2025-05-12 15:56:56.529 +05:30 [INF] Attempting to save all users to JSON file.
2025-05-12 15:56:56.538 +05:30 [INF] Users saved successfully to JSON file.
2025-05-12 15:56:56.540 +05:30 [INF] User added successfully with ID 7.
2025-05-12 15:56:56.544 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType0`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 15:56:56.549 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Register (WisVest) in 229.337ms
2025-05-12 15:56:56.554 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Register (WisVest)'
2025-05-12 15:56:56.558 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Auth/register - 200 null application/json; charset=utf-8 252.8256ms
2025-05-12 16:01:11.887 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - null null
2025-05-12 16:01:11.891 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:01:11.893 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - 204 null null 5.0965ms
2025-05-12 16:02:22.450 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 16:02:22.454 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:02:22.455 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 5.6102ms
2025-05-12 16:02:22.462 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 109
2025-05-12 16:02:22.468 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:02:22.471 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 16:02:22.474 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 16:02:22.481 +05:30 [INF] Starting allocation calculation...
2025-05-12 16:02:22.488 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 16:02:22.490 +05:30 [INF] Looking up base allocation for key: High+Mod
2025-05-12 16:02:22.492 +05:30 [INF] Base allocation found: {"equity":60,"fixedIncome":20,"commodities":10,"cash":5,"realEstate":5}
2025-05-12 16:02:22.494 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-12 16:02:22.496 +05:30 [INF] Age adjustments found: {}
2025-05-12 16:02:22.497 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-12 16:02:22.499 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-12 16:02:22.503 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12.81,"Mid Cap":17.08,"Small Cap":21.35}
2025-05-12 16:02:22.507 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":1.88,"Corp Bonds":7.5,"Fixed Dep":1.88}
2025-05-12 16:02:22.512 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0.21,"Energy":0.52,"Agriculture":0.52}
2025-05-12 16:02:22.515 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":20,"Savings Acc":10,"T. Bill":10}
2025-05-12 16:02:22.519 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-0.83,"Residential Prop":-0.83,"Commercial Prop":-2.08}
2025-05-12 16:02:22.522 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12.81,"Mid Cap":17.08,"Small Cap":21.35}
2025-05-12 16:02:22.526 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":1.88,"Corp Bonds":7.5,"Fixed Dep":1.88}
2025-05-12 16:02:22.530 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0.21,"Energy":0.52,"Agriculture":0.52}
2025-05-12 16:02:22.534 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":20,"Savings Acc":10,"T. Bill":10}
2025-05-12 16:02:22.538 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-0.83,"Residential Prop":-0.83,"Commercial Prop":-2.08}
2025-05-12 16:02:22.541 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":51.25,"subAssets":{"Large Cap":12.81,"Mid Cap":17.08,"Small Cap":21.35}},"fixedIncome":{"percentage":11.25,"subAssets":{"Gov Bonds":1.88,"Corp Bonds":7.5,"Fixed Dep":1.88}},"commodities":{"percentage":1.25,"subAssets":{"Precious Metals":0.21,"Energy":0.52,"Agriculture":0.52}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":20,"Savings Acc":10,"T. Bill":10}},"realEstate":{"percentage":-3.75,"subAssets":{"REITs":-0.83,"Residential Prop":-0.83,"Commercial Prop":-2.08}}}
2025-05-12 16:02:22.562 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 16:02:22.565 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":51.25,"subAssets":{"Large Cap":12.81,"Mid Cap":17.08,"Small Cap":21.35}},"fixedIncome":{"percentage":11.25,"subAssets":{"Gov Bonds":1.88,"Corp Bonds":7.5,"Fixed Dep":1.88}},"commodities":{"percentage":1.25,"subAssets":{"Precious Metals":0.21,"Energy":0.52,"Agriculture":0.52}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":20,"Savings Acc":10,"T. Bill":10}},"realEstate":{"percentage":-3.75,"subAssets":{"REITs":-0.83,"Residential Prop":-0.83,"Commercial Prop":-2.08}}}
2025-05-12 16:02:22.569 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 16:02:22.574 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 93.3342ms
2025-05-12 16:02:22.577 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 16:02:22.581 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 119.5843ms
2025-05-12 16:02:22.597 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 16:02:22.600 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 16:02:22.603 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:02:22.607 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:02:22.609 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 11.7928ms
2025-05-12 16:02:22.611 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 11.3066ms
2025-05-12 16:02:22.616 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 16:02:22.622 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 16:02:22.627 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:02:22.631 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:02:22.633 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 16:02:22.634 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 16:02:22.635 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 16:02:22.637 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 16:02:22.640 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 16:02:22.644 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 16:02:22.646 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 16:02:22.647 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 16:02:22.649 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 16:02:22.650 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 16:02:22.654 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 14.4364ms
2025-05-12 16:02:22.657 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 12.7677ms
2025-05-12 16:02:22.662 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 16:02:22.660 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 16:02:22.664 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 41.7179ms
2025-05-12 16:02:22.666 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 49.6674ms
2025-05-12 16:04:01.638 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - null null
2025-05-12 16:04:01.645 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:04:01.648 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - 204 null null 9.0919ms
2025-05-12 16:04:01.655 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Products/products - null null
2025-05-12 16:04:01.660 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:04:01.662 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-12 16:04:01.665 +05:30 [INF] Route matched with {action = "LoadProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LoadProducts() on controller WisVestAPI.Controllers.ProductsController (WisVest).
2025-05-12 16:04:01.674 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[WisVestAPI.Models.DTOs.ProductDTO, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-05-12 16:04:01.679 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest) in 7.2397ms
2025-05-12 16:04:01.681 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-12 16:04:01.684 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Products/products - 200 null application/json; charset=utf-8 29.7283ms
2025-05-12 16:17:50.419 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 16:17:50.428 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:17:50.431 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 11.3069ms
2025-05-12 16:17:50.438 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 112
2025-05-12 16:17:50.446 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:17:50.449 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 16:17:50.452 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 16:17:50.457 +05:30 [INF] Starting allocation calculation...
2025-05-12 16:17:50.463 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 16:17:50.465 +05:30 [INF] Looking up base allocation for key: Mid+Mod
2025-05-12 16:17:50.468 +05:30 [INF] Base allocation found: {"equity":40,"fixedIncome":35,"commodities":10,"cash":10,"realEstate":5}
2025-05-12 16:17:50.471 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 16:17:50.474 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 16:17:50.477 +05:30 [INF] Looking up goal tuning for goal: Emergency Fund
2025-05-12 16:17:50.480 +05:30 [INF] Goal tuning found: {"cash_min":40}
2025-05-12 16:17:50.485 +05:30 [INF] Sub-allocations for equity: {"Large Cap":16.5,"Mid Cap":12.38,"Small Cap":12.38}
2025-05-12 16:17:50.488 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":6.38,"Corp Bonds":8.5,"Fixed Dep":6.38}
2025-05-12 16:17:50.492 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":0.5,"Energy":0.38,"Agriculture":0.38}
2025-05-12 16:17:50.497 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-12 16:17:50.501 +05:30 [INF] Sub-allocations for realEstate: {"REITs":-1.41,"Residential Prop":-0.94,"Commercial Prop":-1.41}
2025-05-12 16:17:50.504 +05:30 [INF] Added sub-assets for equity: {"Large Cap":16.5,"Mid Cap":12.38,"Small Cap":12.38}
2025-05-12 16:17:50.508 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":6.38,"Corp Bonds":8.5,"Fixed Dep":6.38}
2025-05-12 16:17:50.512 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":0.5,"Energy":0.38,"Agriculture":0.38}
2025-05-12 16:17:50.516 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}
2025-05-12 16:17:50.519 +05:30 [INF] Added sub-assets for realEstate: {"REITs":-1.41,"Residential Prop":-0.94,"Commercial Prop":-1.41}
2025-05-12 16:17:50.523 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":41.25,"subAssets":{"Large Cap":16.5,"Mid Cap":12.38,"Small Cap":12.38}},"fixedIncome":{"percentage":21.25,"subAssets":{"Gov Bonds":6.38,"Corp Bonds":8.5,"Fixed Dep":6.38}},"commodities":{"percentage":1.25,"subAssets":{"Precious Metals":0.5,"Energy":0.38,"Agriculture":0.38}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-3.75,"subAssets":{"REITs":-1.41,"Residential Prop":-0.94,"Commercial Prop":-1.41}}}
2025-05-12 16:17:50.532 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 16:17:50.536 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":41.25,"subAssets":{"Large Cap":16.5,"Mid Cap":12.38,"Small Cap":12.38}},"fixedIncome":{"percentage":21.25,"subAssets":{"Gov Bonds":6.38,"Corp Bonds":8.5,"Fixed Dep":6.38}},"commodities":{"percentage":1.25,"subAssets":{"Precious Metals":0.5,"Energy":0.38,"Agriculture":0.38}},"cash":{"percentage":40,"subAssets":{"Liquid Mutual Funds":12,"Savings Acc":12,"T. Bill":16}},"realEstate":{"percentage":-3.75,"subAssets":{"REITs":-1.41,"Residential Prop":-0.94,"Commercial Prop":-1.41}}}
2025-05-12 16:17:50.540 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 16:17:50.545 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 89.2181ms
2025-05-12 16:17:50.549 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 16:17:50.552 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 113.8329ms
2025-05-12 16:17:50.568 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 16:17:50.570 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 16:17:50.572 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:17:50.577 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:17:50.578 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 10.1314ms
2025-05-12 16:17:50.580 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 10.2389ms
2025-05-12 16:17:50.587 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 16:17:50.594 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 16:17:50.599 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:17:50.605 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:17:50.607 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 16:17:50.611 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 16:17:50.612 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 16:17:50.614 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 16:17:50.620 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 16:17:50.628 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 16:17:50.633 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 16:17:50.636 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 16:17:50.638 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 16:17:50.640 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 16:17:50.647 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 27.4233ms
2025-05-12 16:17:50.652 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 24.4988ms
2025-05-12 16:17:50.656 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 16:17:50.661 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 16:17:50.665 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 77.979ms
2025-05-12 16:17:50.668 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 73.9183ms
2025-05-12 16:20:27.704 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - null null
2025-05-12 16:20:27.711 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:20:27.713 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - 204 null null 8.7682ms
2025-05-12 16:20:27.719 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Products/products - null null
2025-05-12 16:20:27.724 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:20:27.726 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-12 16:20:27.728 +05:30 [INF] Route matched with {action = "LoadProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LoadProducts() on controller WisVestAPI.Controllers.ProductsController (WisVest).
2025-05-12 16:20:27.737 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[WisVestAPI.Models.DTOs.ProductDTO, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-05-12 16:20:27.740 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest) in 5.876ms
2025-05-12 16:20:27.744 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-12 16:20:27.748 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Products/products - 200 null application/json; charset=utf-8 28.5044ms
2025-05-12 16:21:07.739 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 16:21:07.757 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:21:07.762 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 23.4601ms
2025-05-12 16:21:07.781 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 117
2025-05-12 16:21:07.798 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:21:07.803 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 16:21:07.810 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 16:21:07.824 +05:30 [INF] Starting allocation calculation...
2025-05-12 16:21:07.832 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 16:21:07.839 +05:30 [INF] Looking up base allocation for key: Mid+Mod
2025-05-12 16:21:07.844 +05:30 [INF] Base allocation found: {"equity":40,"fixedIncome":35,"commodities":10,"cash":10,"realEstate":5}
2025-05-12 16:21:07.850 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-12 16:21:07.857 +05:30 [INF] Age adjustments found: {}
2025-05-12 16:21:07.862 +05:30 [INF] Looking up goal tuning for goal: Wealth Accumulation
2025-05-12 16:21:07.867 +05:30 [INF] Goal tuning found: {"equity_priority":true,"equity_boost":2,"equity_threshold":40}
2025-05-12 16:21:07.891 +05:30 [INF] Sub-allocations for equity: {"Large Cap":16,"Mid Cap":12,"Small Cap":12}
2025-05-12 16:21:07.899 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":10.5,"Corp Bonds":14,"Fixed Dep":10.5}
2025-05-12 16:21:07.907 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 16:21:07.914 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":3,"Savings Acc":3,"T. Bill":4}
2025-05-12 16:21:07.923 +05:30 [INF] Sub-allocations for realEstate: {"REITs":1.88,"Residential Prop":1.25,"Commercial Prop":1.88}
2025-05-12 16:21:07.930 +05:30 [INF] Added sub-assets for equity: {"Large Cap":16,"Mid Cap":12,"Small Cap":12}
2025-05-12 16:21:07.939 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":10.5,"Corp Bonds":14,"Fixed Dep":10.5}
2025-05-12 16:21:07.946 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 16:21:07.952 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":3,"Savings Acc":3,"T. Bill":4}
2025-05-12 16:21:07.960 +05:30 [INF] Added sub-assets for realEstate: {"REITs":1.88,"Residential Prop":1.25,"Commercial Prop":1.88}
2025-05-12 16:21:07.968 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":40,"subAssets":{"Large Cap":16,"Mid Cap":12,"Small Cap":12}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":10.5,"Corp Bonds":14,"Fixed Dep":10.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":10,"subAssets":{"Liquid Mutual Funds":3,"Savings Acc":3,"T. Bill":4}},"realEstate":{"percentage":5,"subAssets":{"REITs":1.88,"Residential Prop":1.25,"Commercial Prop":1.88}}}
2025-05-12 16:21:07.982 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 16:21:07.989 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":40,"subAssets":{"Large Cap":16,"Mid Cap":12,"Small Cap":12}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":10.5,"Corp Bonds":14,"Fixed Dep":10.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":10,"subAssets":{"Liquid Mutual Funds":3,"Savings Acc":3,"T. Bill":4}},"realEstate":{"percentage":5,"subAssets":{"REITs":1.88,"Residential Prop":1.25,"Commercial Prop":1.88}}}
2025-05-12 16:21:07.998 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 16:21:08.006 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 183.5606ms
2025-05-12 16:21:08.014 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 16:21:08.021 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 239.766ms
2025-05-12 16:21:08.070 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 16:21:08.084 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 16:21:08.092 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:21:08.114 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 44.4151ms
2025-05-12 16:21:08.110 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:21:08.125 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 16:21:08.127 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 42.3212ms
2025-05-12 16:21:08.133 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:21:08.138 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 16:21:08.139 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 16:21:08.145 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:21:08.148 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 16:21:08.151 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 16:21:08.157 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 16:21:08.161 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 16:21:08.167 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 16:21:08.173 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 16:21:08.177 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 16:21:08.181 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 16:21:08.187 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 29.7958ms
2025-05-12 16:21:08.190 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 16:21:08.195 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 16:21:08.201 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 28.0469ms
2025-05-12 16:21:08.203 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 78.5602ms
2025-05-12 16:21:08.205 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 16:21:08.216 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 78.368ms
2025-05-12 16:22:36.383 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - null null
2025-05-12 16:22:36.390 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:22:36.393 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - 204 null null 10.3782ms
2025-05-12 16:22:36.399 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Products/products - null null
2025-05-12 16:22:36.404 +05:30 [INF] CORS policy execution successful.
2025-05-12 16:22:36.407 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-12 16:22:36.412 +05:30 [INF] Route matched with {action = "LoadProducts", controller = "Products"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LoadProducts() on controller WisVestAPI.Controllers.ProductsController (WisVest).
2025-05-12 16:22:36.420 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[WisVestAPI.Models.DTOs.ProductDTO, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-05-12 16:22:36.423 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest) in 6.0544ms
2025-05-12 16:22:36.426 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductsController.LoadProducts (WisVest)'
2025-05-12 16:22:36.430 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Products/products - 200 null application/json; charset=utf-8 30.761ms
2025-05-12 17:21:39.852 +05:30 [INF] Application is shutting down...
2025-05-12 17:22:33.767 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 17:22:33.917 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 17:22:33.922 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 17:22:33.923 +05:30 [INF] Hosting environment: Development
2025-05-12 17:22:33.925 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 17:22:40.334 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/swagger/index.html - null null
2025-05-12 17:22:40.462 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/swagger/index.html - 200 null text/html;charset=utf-8 128.5941ms
2025-05-12 17:22:40.561 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/swagger/v1/swagger.json - null null
2025-05-12 17:22:40.662 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 101.5995ms
2025-05-12 17:22:43.338 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/swagger/index.html - null null
2025-05-12 17:22:43.346 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/swagger/index.html - 200 null text/html;charset=utf-8 7.7004ms
2025-05-12 17:22:43.456 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/swagger/v1/swagger.json - null null
2025-05-12 17:22:43.465 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 9.1675ms
2025-05-12 17:23:23.055 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 129
2025-05-12 17:23:23.068 +05:30 [INF] CORS policy execution failed.
2025-05-12 17:23:23.070 +05:30 [INF] Request origin http://localhost:5251 does not have permission to access the resource.
2025-05-12 17:23:23.078 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 17:23:23.084 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 17:23:23.087 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 401 0 null 31.4716ms
2025-05-12 17:23:44.819 +05:30 [INF] Application is shutting down...
2025-05-12 17:23:48.627 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 17:23:48.848 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 17:23:48.854 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 17:23:48.856 +05:30 [INF] Hosting environment: Development
2025-05-12 17:23:48.858 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 17:23:49.643 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 129
2025-05-12 17:23:49.708 +05:30 [INF] CORS policy execution failed.
2025-05-12 17:23:49.710 +05:30 [INF] Request origin http://localhost:5251 does not have permission to access the resource.
2025-05-12 17:23:49.716 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 17:23:49.722 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 17:23:49.730 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 401 0 null 87.9624ms
2025-05-12 17:23:52.537 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 129
2025-05-12 17:23:52.547 +05:30 [INF] CORS policy execution failed.
2025-05-12 17:23:52.549 +05:30 [INF] Request origin http://localhost:5251 does not have permission to access the resource.
2025-05-12 17:23:52.553 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 17:23:52.556 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 17:23:52.558 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 401 0 null 21.2023ms
2025-05-12 17:23:53.798 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 129
2025-05-12 17:23:53.810 +05:30 [INF] CORS policy execution failed.
2025-05-12 17:23:53.815 +05:30 [INF] Request origin http://localhost:5251 does not have permission to access the resource.
2025-05-12 17:23:53.819 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 17:23:53.822 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 17:23:53.824 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 401 0 null 26.4169ms
2025-05-12 17:23:57.632 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 129
2025-05-12 17:23:57.637 +05:30 [INF] CORS policy execution failed.
2025-05-12 17:23:57.638 +05:30 [INF] Request origin http://localhost:5251 does not have permission to access the resource.
2025-05-12 17:23:57.640 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 17:23:57.642 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 17:23:57.644 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 401 0 null 11.8973ms
2025-05-12 17:25:01.806 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Moderate - application/json 808
2025-05-12 17:25:01.820 +05:30 [INF] CORS policy execution failed.
2025-05-12 17:25:01.821 +05:30 [INF] Request origin http://localhost:5251 does not have permission to access the resource.
2025-05-12 17:25:01.827 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 17:25:01.857 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, System.String) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 17:25:01.972 +05:30 [INF] Starting product allocation calculation.
2025-05-12 17:25:01.975 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-12 17:25:01.979 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-12 17:25:02.061 +05:30 [INF] Product data loaded successfully.
2025-05-12 17:25:02.078 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-12 17:25:02.082 +05:30 [INF] Calculating investment amount with PercentageSplit: 8.33, TargetAmount: 100000, AnnualReturn: 10, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.084 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.085 +05:30 [INF] Calculated investment amount: 5172.27.
2025-05-12 17:25:02.087 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.67, TargetAmount: 100000, AnnualReturn: 9.2, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.090 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.091 +05:30 [INF] Calculated investment amount: 4939.49.
2025-05-12 17:25:02.092 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-12 17:25:02.094 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.38, TargetAmount: 100000, AnnualReturn: 12.5, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.097 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.099 +05:30 [INF] Calculated investment amount: 3540.45.
2025-05-12 17:25:02.100 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.62, TargetAmount: 100000, AnnualReturn: 11, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.101 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.103 +05:30 [INF] Calculated investment amount: 3335.2.
2025-05-12 17:25:02.104 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-12 17:25:02.108 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.18, TargetAmount: 100000, AnnualReturn: 14, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.111 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.112 +05:30 [INF] Calculated investment amount: 3209.7.
2025-05-12 17:25:02.113 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.82, TargetAmount: 100000, AnnualReturn: 13.2, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.115 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.116 +05:30 [INF] Calculated investment amount: 3131.06.
2025-05-12 17:25:02.117 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-12 17:25:02.118 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.36, TargetAmount: 100000, AnnualReturn: 5, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.122 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.123 +05:30 [INF] Calculated investment amount: 4199.7.
2025-05-12 17:25:02.124 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.14, TargetAmount: 100000, AnnualReturn: 4.8, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.126 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.128 +05:30 [INF] Calculated investment amount: 4065.9.
2025-05-12 17:25:02.130 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-12 17:25:02.131 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.85, TargetAmount: 100000, AnnualReturn: 6.8, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.133 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.134 +05:30 [INF] Calculated investment amount: 4929.86.
2025-05-12 17:25:02.135 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.15, TargetAmount: 100000, AnnualReturn: 7.1, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.138 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.140 +05:30 [INF] Calculated investment amount: 5074.1.
2025-05-12 17:25:02.141 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-12 17:25:02.142 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.16, TargetAmount: 100000, AnnualReturn: 5.5, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.144 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.145 +05:30 [INF] Calculated investment amount: 3948.09.
2025-05-12 17:25:02.145 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.34, TargetAmount: 100000, AnnualReturn: 5.7, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.147 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.148 +05:30 [INF] Calculated investment amount: 4047.31.
2025-05-12 17:25:02.149 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-12 17:25:02.150 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 100000, AnnualReturn: 7.8, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.152 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.153 +05:30 [INF] Calculated investment amount: 1518.09.
2025-05-12 17:25:02.155 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.79, TargetAmount: 100000, AnnualReturn: 6.3, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.158 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.159 +05:30 [INF] Calculated investment amount: 1318.82.
2025-05-12 17:25:02.159 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-12 17:25:02.161 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.42, TargetAmount: 100000, AnnualReturn: 9.2, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.162 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.163 +05:30 [INF] Calculated investment amount: 914.48.
2025-05-12 17:25:02.164 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.58, TargetAmount: 100000, AnnualReturn: 10.3, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.166 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.167 +05:30 [INF] Calculated investment amount: 967.79.
2025-05-12 17:25:02.168 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-12 17:25:02.169 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.65, TargetAmount: 100000, AnnualReturn: 8.5, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.171 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.173 +05:30 [INF] Calculated investment amount: 1097.32.
2025-05-12 17:25:02.174 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.35, TargetAmount: 100000, AnnualReturn: 7, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.176 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.177 +05:30 [INF] Calculated investment amount: 962.53.
2025-05-12 17:25:02.178 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-12 17:25:02.179 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.53, TargetAmount: 100000, AnnualReturn: 5.2, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.180 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.181 +05:30 [INF] Calculated investment amount: 1187.44.
2025-05-12 17:25:02.182 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.47, TargetAmount: 100000, AnnualReturn: 5, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.184 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.185 +05:30 [INF] Calculated investment amount: 1151.78.
2025-05-12 17:25:02.187 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-12 17:25:02.190 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.4, TargetAmount: 100000, AnnualReturn: 3.5, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.192 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.193 +05:30 [INF] Calculated investment amount: 1178.76.
2025-05-12 17:25:02.194 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.6, TargetAmount: 100000, AnnualReturn: 4, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.196 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.197 +05:30 [INF] Calculated investment amount: 1315.08.
2025-05-12 17:25:02.198 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-12 17:25:02.199 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.94, TargetAmount: 100000, AnnualReturn: 5.1, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.201 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.202 +05:30 [INF] Calculated investment amount: 1512.82.
2025-05-12 17:25:02.204 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.06, TargetAmount: 100000, AnnualReturn: 5.4, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.206 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.206 +05:30 [INF] Calculated investment amount: 1583.67.
2025-05-12 17:25:02.208 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-12 17:25:02.209 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.91, TargetAmount: 100000, AnnualReturn: 8.9, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.212 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.213 +05:30 [INF] Calculated investment amount: 594.16.
2025-05-12 17:25:02.214 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.97, TargetAmount: 100000, AnnualReturn: 9.5, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.216 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.217 +05:30 [INF] Calculated investment amount: 616.17.
2025-05-12 17:25:02.218 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-12 17:25:02.219 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.6, TargetAmount: 100000, AnnualReturn: 6.7, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.221 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.222 +05:30 [INF] Calculated investment amount: 433.84.
2025-05-12 17:25:02.223 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.65, TargetAmount: 100000, AnnualReturn: 7.3, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.224 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.226 +05:30 [INF] Calculated investment amount: 457.
2025-05-12 17:25:02.227 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-12 17:25:02.229 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.96, TargetAmount: 100000, AnnualReturn: 10.2, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.230 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.231 +05:30 [INF] Calculated investment amount: 590.69.
2025-05-12 17:25:02.232 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.92, TargetAmount: 100000, AnnualReturn: 9.8, InvestmentHorizon: Moderate.
2025-05-12 17:25:02.235 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:25:02.236 +05:30 [INF] Calculated investment amount: 576.47.
2025-05-12 17:25:02.244 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":8.33,"InvestmentAmount":5172.27},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":7.67,"InvestmentAmount":4939.49}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":6.38,"InvestmentAmount":3540.45},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":5.62,"InvestmentAmount":3335.2}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":6.18,"InvestmentAmount":3209.7},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":5.82,"InvestmentAmount":3131.06}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":5.36,"InvestmentAmount":4199.7},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":5.14,"InvestmentAmount":4065.9}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":6.85,"InvestmentAmount":4929.86},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":7.15,"InvestmentAmount":5074.1}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":5.16,"InvestmentAmount":3948.09},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":5.34,"InvestmentAmount":4047.31}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":2.21,"InvestmentAmount":1518.09},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":1.79,"InvestmentAmount":1318.82}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":1.42,"InvestmentAmount":914.48},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":1.58,"InvestmentAmount":967.79}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":1.65,"InvestmentAmount":1097.32},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":1.35,"InvestmentAmount":962.53}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":1.53,"InvestmentAmount":1187.44},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":1.47,"InvestmentAmount":1151.78}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":1.4,"InvestmentAmount":1178.76},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":1.6,"InvestmentAmount":1315.08}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":1.94,"InvestmentAmount":1512.82},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":2.06,"InvestmentAmount":1583.67}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":0.91,"InvestmentAmount":594.16},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":0.97,"InvestmentAmount":616.17}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":0.6,"InvestmentAmount":433.84},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":0.65,"InvestmentAmount":457}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":0.96,"InvestmentAmount":590.69},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":0.92,"InvestmentAmount":576.47}}}}
2025-05-12 17:25:02.270 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 17:25:02.285 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 421.5076ms
2025-05-12 17:25:02.289 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 17:25:02.293 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Moderate - 200 null application/json; charset=utf-8 486.3904ms
2025-05-12 17:27:20.954 +05:30 [INF] Application is shutting down...
2025-05-12 17:27:25.205 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 17:27:25.390 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 17:27:25.395 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 17:27:25.397 +05:30 [INF] Hosting environment: Development
2025-05-12 17:27:25.398 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 17:27:31.522 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Moderate - application/json 808
2025-05-12 17:27:31.585 +05:30 [INF] CORS policy execution failed.
2025-05-12 17:27:31.587 +05:30 [INF] Request origin http://localhost:5251 does not have permission to access the resource.
2025-05-12 17:27:31.593 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 17:27:31.598 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 17:27:31.604 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Moderate - 401 0 null 84.6046ms
2025-05-12 17:27:39.300 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - null null
2025-05-12 17:27:39.309 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:27:39.314 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Products/products - 204 null null 14.8433ms
2025-05-12 17:27:39.321 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Products/products - null null
2025-05-12 17:27:39.403 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 11:23:46 AM', Current time (UTC): '5/12/2025 11:57:39 AM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 17:27:39.427 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 11:23:46 AM', Current time (UTC): '5/12/2025 11:57:39 AM'.
2025-05-12 17:27:39.436 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:27:39.439 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 17:27:39.442 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 17:27:39.444 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Products/products - 401 0 null 122.8819ms
2025-05-12 17:27:43.425 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 17:27:43.433 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:27:43.435 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 9.5737ms
2025-05-12 17:27:43.439 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 17:27:43.444 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:27:43.449 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 17:27:43.482 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 17:27:43.657 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 17:27:43.677 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 188.7884ms
2025-05-12 17:27:43.680 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 17:27:43.682 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 242.5657ms
2025-05-12 17:27:56.466 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 17:27:56.476 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:27:56.478 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 11.9367ms
2025-05-12 17:27:56.483 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 104
2025-05-12 17:27:56.498 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:27:56.501 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 17:27:56.509 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 17:27:56.529 +05:30 [INF] Starting allocation calculation...
2025-05-12 17:27:56.547 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 17:27:56.549 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 17:27:56.556 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 17:27:56.559 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 17:27:56.560 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 17:27:56.561 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 17:27:56.566 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 17:27:56.580 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 17:27:56.583 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 17:27:56.586 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 17:27:56.589 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 17:27:56.590 +05:30 [INF] Sub-allocations for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 17:27:56.591 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 17:27:56.592 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 17:27:56.595 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 17:27:56.596 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 17:27:56.597 +05:30 [INF] Added sub-assets for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 17:27:56.620 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 17:27:56.629 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 17:27:56.631 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 17:27:56.637 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 17:27:56.642 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 129.583ms
2025-05-12 17:27:56.645 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 17:27:56.648 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 165.2788ms
2025-05-12 17:27:56.661 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 17:27:56.664 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 17:27:56.666 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:27:56.670 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:27:56.671 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 9.9927ms
2025-05-12 17:27:56.673 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 8.4415ms
2025-05-12 17:27:56.678 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 17:27:56.687 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 17:27:56.693 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:27:56.696 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:27:56.698 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 17:27:56.698 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 17:27:56.705 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 17:27:56.705 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 17:27:56.712 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 17:27:56.715 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 17:27:56.715 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 17:27:56.717 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 17:27:56.721 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 17:27:56.724 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 11.7029ms
2025-05-12 17:27:56.727 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 17:27:56.728 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 17:27:56.731 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 44.7261ms
2025-05-12 17:27:56.735 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 25.5839ms
2025-05-12 17:27:56.738 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 17:27:56.741 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 62.742ms
2025-05-12 17:30:33.128 +05:30 [INF] Application is shutting down...
2025-05-12 17:30:37.229 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 17:30:37.390 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 17:30:37.396 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 17:30:37.398 +05:30 [INF] Hosting environment: Development
2025-05-12 17:30:37.400 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 17:30:50.077 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 17:30:50.133 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:30:50.141 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 64.6263ms
2025-05-12 17:30:50.150 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 117
2025-05-12 17:30:50.234 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:30:50.242 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 17:30:50.264 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 17:30:50.345 +05:30 [INF] Starting allocation calculation...
2025-05-12 17:30:50.369 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 17:30:50.371 +05:30 [INF] Looking up base allocation for key: Mid+Mod
2025-05-12 17:30:50.379 +05:30 [INF] Base allocation found: {"equity":40,"fixedIncome":35,"commodities":10,"cash":10,"realEstate":5}
2025-05-12 17:30:50.382 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-12 17:30:50.383 +05:30 [INF] Age adjustments found: {}
2025-05-12 17:30:50.384 +05:30 [INF] Looking up goal tuning for goal: Wealth Accumulation
2025-05-12 17:30:50.388 +05:30 [INF] Goal tuning found: {"equity_priority":true,"equity_boost":2,"equity_threshold":40}
2025-05-12 17:30:50.403 +05:30 [INF] Sub-allocations for equity: {"Large Cap":16,"Mid Cap":12,"Small Cap":12}
2025-05-12 17:30:50.405 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":10.5,"Corp Bonds":14,"Fixed Dep":10.5}
2025-05-12 17:30:50.407 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 17:30:50.408 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":3,"Savings Acc":3,"T. Bill":4}
2025-05-12 17:30:50.410 +05:30 [INF] Sub-allocations for realEstate: {"REITs":1.88,"Residential Prop":1.25,"Commercial Prop":1.88}
2025-05-12 17:30:50.411 +05:30 [INF] Added sub-assets for equity: {"Large Cap":16,"Mid Cap":12,"Small Cap":12}
2025-05-12 17:30:50.412 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":10.5,"Corp Bonds":14,"Fixed Dep":10.5}
2025-05-12 17:30:50.414 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 17:30:50.416 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":3,"Savings Acc":3,"T. Bill":4}
2025-05-12 17:30:50.417 +05:30 [INF] Added sub-assets for realEstate: {"REITs":1.88,"Residential Prop":1.25,"Commercial Prop":1.88}
2025-05-12 17:30:50.445 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":40,"subAssets":{"Large Cap":16,"Mid Cap":12,"Small Cap":12}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":10.5,"Corp Bonds":14,"Fixed Dep":10.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":10,"subAssets":{"Liquid Mutual Funds":3,"Savings Acc":3,"T. Bill":4}},"realEstate":{"percentage":5,"subAssets":{"REITs":1.88,"Residential Prop":1.25,"Commercial Prop":1.88}}}
2025-05-12 17:30:50.456 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 17:30:50.459 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":40,"subAssets":{"Large Cap":16,"Mid Cap":12,"Small Cap":12}},"fixedIncome":{"percentage":35,"subAssets":{"Gov Bonds":10.5,"Corp Bonds":14,"Fixed Dep":10.5}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":10,"subAssets":{"Liquid Mutual Funds":3,"Savings Acc":3,"T. Bill":4}},"realEstate":{"percentage":5,"subAssets":{"REITs":1.88,"Residential Prop":1.25,"Commercial Prop":1.88}}}
2025-05-12 17:30:50.468 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 17:30:50.482 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 211.6344ms
2025-05-12 17:30:50.486 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 17:30:50.489 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 338.4752ms
2025-05-12 17:30:50.502 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 17:30:50.505 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 17:30:50.511 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:30:50.512 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:30:50.514 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 11.8612ms
2025-05-12 17:30:50.516 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 10.9297ms
2025-05-12 17:30:50.523 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 17:30:50.530 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 17:30:50.539 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:30:50.539 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:30:50.543 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 17:30:50.543 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 17:30:50.548 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 17:30:50.549 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 17:30:50.554 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 17:30:50.557 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 17:30:50.557 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 17:30:50.561 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 17:30:50.563 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 17:30:50.567 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 14.657ms
2025-05-12 17:30:50.569 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 17:30:50.570 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 40.6449ms
2025-05-12 17:30:50.575 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 17:30:50.586 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 31.4606ms
2025-05-12 17:30:50.590 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 17:30:50.593 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 70.0837ms
2025-05-12 17:33:25.505 +05:30 [INF] Application is shutting down...
2025-05-12 17:33:40.069 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 17:33:40.198 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 17:33:40.202 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 17:33:40.203 +05:30 [INF] Hosting environment: Development
2025-05-12 17:33:40.204 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 17:34:23.818 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 17:34:23.818 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 17:34:23.876 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:34:23.876 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:34:23.887 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 70.2776ms
2025-05-12 17:34:23.887 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 70.2778ms
2025-05-12 17:34:23.897 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 17:34:23.899 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 17:34:23.982 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:34:23.982 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:34:23.989 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 17:34:23.989 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 17:34:24.010 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 17:34:24.010 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 17:34:24.017 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 17:34:24.019 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 17:34:24.023 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 17:34:24.023 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 17:34:24.072 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 17:34:24.093 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 73.8328ms
2025-05-12 17:34:24.093 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 17:34:24.097 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 17:34:24.102 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 202.5114ms
2025-05-12 17:34:24.108 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 94.5444ms
2025-05-12 17:34:24.111 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 17:34:24.113 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 215.5759ms
2025-05-12 17:35:14.595 +05:30 [INF] Application is shutting down...
2025-05-12 17:35:18.500 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 17:35:18.631 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 17:35:18.635 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 17:35:18.638 +05:30 [INF] Hosting environment: Development
2025-05-12 17:35:18.639 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 17:35:24.958 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Moderate - application/json 808
2025-05-12 17:35:25.015 +05:30 [INF] CORS policy execution failed.
2025-05-12 17:35:25.017 +05:30 [INF] Request origin http://localhost:5251 does not have permission to access the resource.
2025-05-12 17:35:25.022 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 17:35:25.048 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, System.String) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 17:35:25.162 +05:30 [INF] Starting product allocation calculation.
2025-05-12 17:35:25.166 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-12 17:35:25.173 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-12 17:35:25.258 +05:30 [INF] Product data loaded successfully.
2025-05-12 17:35:25.275 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-12 17:35:25.281 +05:30 [INF] Calculating investment amount with PercentageSplit: 8.33, TargetAmount: 100000, AnnualReturn: 10, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.285 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.287 +05:30 [INF] Calculated investment amount: 5172.27.
2025-05-12 17:35:25.289 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.67, TargetAmount: 100000, AnnualReturn: 9.2, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.290 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.291 +05:30 [INF] Calculated investment amount: 4939.49.
2025-05-12 17:35:25.292 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-12 17:35:25.294 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.38, TargetAmount: 100000, AnnualReturn: 12.5, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.295 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.297 +05:30 [INF] Calculated investment amount: 3540.45.
2025-05-12 17:35:25.298 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.62, TargetAmount: 100000, AnnualReturn: 11, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.300 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.301 +05:30 [INF] Calculated investment amount: 3335.2.
2025-05-12 17:35:25.302 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-12 17:35:25.303 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.18, TargetAmount: 100000, AnnualReturn: 14, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.305 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.306 +05:30 [INF] Calculated investment amount: 3209.7.
2025-05-12 17:35:25.307 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.82, TargetAmount: 100000, AnnualReturn: 13.2, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.308 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.309 +05:30 [INF] Calculated investment amount: 3131.06.
2025-05-12 17:35:25.310 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-12 17:35:25.312 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.36, TargetAmount: 100000, AnnualReturn: 5, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.315 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.317 +05:30 [INF] Calculated investment amount: 4199.7.
2025-05-12 17:35:25.319 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.14, TargetAmount: 100000, AnnualReturn: 4.8, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.322 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.323 +05:30 [INF] Calculated investment amount: 4065.9.
2025-05-12 17:35:25.325 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-12 17:35:25.327 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.85, TargetAmount: 100000, AnnualReturn: 6.8, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.328 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.330 +05:30 [INF] Calculated investment amount: 4929.86.
2025-05-12 17:35:25.331 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.15, TargetAmount: 100000, AnnualReturn: 7.1, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.333 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.334 +05:30 [INF] Calculated investment amount: 5074.1.
2025-05-12 17:35:25.335 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-12 17:35:25.336 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.16, TargetAmount: 100000, AnnualReturn: 5.5, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.338 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.339 +05:30 [INF] Calculated investment amount: 3948.09.
2025-05-12 17:35:25.340 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.34, TargetAmount: 100000, AnnualReturn: 5.7, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.342 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.343 +05:30 [INF] Calculated investment amount: 4047.31.
2025-05-12 17:35:25.345 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-12 17:35:25.346 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 100000, AnnualReturn: 7.8, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.348 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.350 +05:30 [INF] Calculated investment amount: 1518.09.
2025-05-12 17:35:25.352 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.79, TargetAmount: 100000, AnnualReturn: 6.3, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.354 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.354 +05:30 [INF] Calculated investment amount: 1318.82.
2025-05-12 17:35:25.355 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-12 17:35:25.356 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.42, TargetAmount: 100000, AnnualReturn: 9.2, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.359 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.360 +05:30 [INF] Calculated investment amount: 914.48.
2025-05-12 17:35:25.361 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.58, TargetAmount: 100000, AnnualReturn: 10.3, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.363 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.367 +05:30 [INF] Calculated investment amount: 967.79.
2025-05-12 17:35:25.369 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-12 17:35:25.372 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.65, TargetAmount: 100000, AnnualReturn: 8.5, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.375 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.377 +05:30 [INF] Calculated investment amount: 1097.32.
2025-05-12 17:35:25.378 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.35, TargetAmount: 100000, AnnualReturn: 7, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.379 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.381 +05:30 [INF] Calculated investment amount: 962.53.
2025-05-12 17:35:25.383 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-12 17:35:25.384 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.53, TargetAmount: 100000, AnnualReturn: 5.2, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.387 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.389 +05:30 [INF] Calculated investment amount: 1187.44.
2025-05-12 17:35:25.391 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.47, TargetAmount: 100000, AnnualReturn: 5, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.392 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.394 +05:30 [INF] Calculated investment amount: 1151.78.
2025-05-12 17:35:25.395 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-12 17:35:25.396 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.4, TargetAmount: 100000, AnnualReturn: 3.5, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.398 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.400 +05:30 [INF] Calculated investment amount: 1178.76.
2025-05-12 17:35:25.401 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.6, TargetAmount: 100000, AnnualReturn: 4, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.405 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.407 +05:30 [INF] Calculated investment amount: 1315.08.
2025-05-12 17:35:25.408 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-12 17:35:25.410 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.94, TargetAmount: 100000, AnnualReturn: 5.1, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.412 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.413 +05:30 [INF] Calculated investment amount: 1512.82.
2025-05-12 17:35:25.415 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.06, TargetAmount: 100000, AnnualReturn: 5.4, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.419 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.420 +05:30 [INF] Calculated investment amount: 1583.67.
2025-05-12 17:35:25.422 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-12 17:35:25.424 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.91, TargetAmount: 100000, AnnualReturn: 8.9, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.426 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.427 +05:30 [INF] Calculated investment amount: 594.16.
2025-05-12 17:35:25.428 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.97, TargetAmount: 100000, AnnualReturn: 9.5, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.430 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.432 +05:30 [INF] Calculated investment amount: 616.17.
2025-05-12 17:35:25.435 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-12 17:35:25.437 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.6, TargetAmount: 100000, AnnualReturn: 6.7, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.440 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.441 +05:30 [INF] Calculated investment amount: 433.84.
2025-05-12 17:35:25.441 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.65, TargetAmount: 100000, AnnualReturn: 7.3, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.443 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.444 +05:30 [INF] Calculated investment amount: 457.
2025-05-12 17:35:25.445 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-12 17:35:25.447 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.96, TargetAmount: 100000, AnnualReturn: 10.2, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.450 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.451 +05:30 [INF] Calculated investment amount: 590.69.
2025-05-12 17:35:25.453 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.92, TargetAmount: 100000, AnnualReturn: 9.8, InvestmentHorizon: Moderate.
2025-05-12 17:35:25.455 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:35:25.456 +05:30 [INF] Calculated investment amount: 576.47.
2025-05-12 17:35:25.462 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":8.33,"InvestmentAmount":5172.27},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":7.67,"InvestmentAmount":4939.49}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":6.38,"InvestmentAmount":3540.45},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":5.62,"InvestmentAmount":3335.2}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":6.18,"InvestmentAmount":3209.7},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":5.82,"InvestmentAmount":3131.06}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":5.36,"InvestmentAmount":4199.7},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":5.14,"InvestmentAmount":4065.9}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":6.85,"InvestmentAmount":4929.86},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":7.15,"InvestmentAmount":5074.1}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":5.16,"InvestmentAmount":3948.09},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":5.34,"InvestmentAmount":4047.31}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":2.21,"InvestmentAmount":1518.09},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":1.79,"InvestmentAmount":1318.82}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":1.42,"InvestmentAmount":914.48},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":1.58,"InvestmentAmount":967.79}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":1.65,"InvestmentAmount":1097.32},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":1.35,"InvestmentAmount":962.53}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":1.53,"InvestmentAmount":1187.44},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":1.47,"InvestmentAmount":1151.78}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":1.4,"InvestmentAmount":1178.76},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":1.6,"InvestmentAmount":1315.08}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":1.94,"InvestmentAmount":1512.82},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":2.06,"InvestmentAmount":1583.67}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":0.91,"InvestmentAmount":594.16},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":0.97,"InvestmentAmount":616.17}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":0.6,"InvestmentAmount":433.84},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":0.65,"InvestmentAmount":457}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":0.96,"InvestmentAmount":590.69},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":0.92,"InvestmentAmount":576.47}}}}
2025-05-12 17:35:25.488 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 17:35:25.504 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 450.3515ms
2025-05-12 17:35:25.507 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 17:35:25.510 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Moderate - 200 null application/json; charset=utf-8 553.0781ms
2025-05-12 17:36:28.752 +05:30 [INF] Application is shutting down...
2025-05-12 17:36:32.063 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 17:36:32.213 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 17:36:32.223 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 17:36:32.225 +05:30 [INF] Hosting environment: Development
2025-05-12 17:36:32.226 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 17:36:37.580 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Moderate - application/json 808
2025-05-12 17:36:37.640 +05:30 [INF] CORS policy execution failed.
2025-05-12 17:36:37.644 +05:30 [INF] Request origin http://localhost:5251 does not have permission to access the resource.
2025-05-12 17:36:37.649 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 17:36:37.677 +05:30 [INF] Route matched with {action = "CalculateProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CalculateProductAllocations(WisVestAPI.Models.DTOs.AllocationResultDTO, Double, System.String) on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 17:36:37.793 +05:30 [INF] Starting product allocation calculation.
2025-05-12 17:36:37.797 +05:30 [INF] Loading product data from JSON file: Repositories/Matrix/product_json.json
2025-05-12 17:36:37.802 +05:30 [INF] Raw JSON Content: {
  "Equity": {
    "Large Cap": [
      {
        "product_name": "BlueChip Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 10.0,
        "liquidity": "High",
        "pros": [
          "Stable returns",
          "Low risk"
        ],
        "cons": [
          "Lower growth"
        ],
        "description":"A low-risk fund investing in established blue-chip companies offering stable returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Index Fund ",
        "asset_class": "Equity",
        "sub_asset_class": "Large Cap",
        "annual_return": 9.2,
        "liquidity": "High",
        "pros": [
          "Diversified",
          "Low cost"
        ],
        "cons": [
          "Market dependent"
        ],
        "description":"Tracks major indices, providing diversified exposure with low management cost.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Mid Cap": [
      {
        "product_name": "Mid Cap Growth ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 12.5,
        "liquidity": "Medium",
        "pros": [
          "High growth potential"
        ],
        "cons": [
          "Volatile"
        ],
        "description":"Targets growing mid-sized companies with high return potential but increased risk.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "MidCap Blend ",
        "asset_class": "Equity",
        "sub_asset_class": "Mid Cap",
        "annual_return": 11.0,
        "liquidity": "Medium",
        "pros": [
          "Balanced approach"
        ],
        "cons": [
          "Moderate risk"
        ],
        "description":"Balances growth and risk by investing in a mix of mid-cap stocks.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Small Cap": [
      {
        "product_name": "SmallCap Aggressive ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 14.0,
        "liquidity": "Medium",
        "pros": [
          "High return potential"
        ],
        "cons": [
          "Very volatile"
        ],
        "description":"An aggressive fund focusing on small companies with strong growth prospects.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Emerging Companies ",
        "asset_class": "Equity",
        "sub_asset_class": "Small Cap",
        "annual_return": 13.2,
        "liquidity": "Low",
        "pros": [
          "Growth stocks"
        ],
        "cons": [
          "Liquidity risk"
        ],
        "description":"Invests in emerging businesses offering growth but with limited liquidity.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Fixed Income": {
    "Gov Bonds": [
      {
        "product_name": "Government Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 5.0,
        "liquidity": "Low",
        "pros": [
          "Very safe",
          "Guaranteed return"
        ],
        "cons": [
          "Low return"
        ],
        "description":"Safe investment backed by the government, ideal for conservative investors.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Sovereign Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Gov Bonds",
        "annual_return": 4.8,
        "liquidity": "Low",
        "pros": [
          "Stable income"
        ],
        "cons": [
          "Interest rate sensitive"
        ],
        "description":"Government-issued bond offering steady income with minimal default risk.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ],
    "Corp Bonds": [
      {
        "product_name": "Corporate Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 6.8,
        "liquidity": "Medium",
        "pros": [
          "Better return"
        ],
        "cons": [
          "Company risk"
        ],
        "description":"Offers higher returns than government bonds with moderate corporate risk.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Private Corp Bond ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Corp Bonds",
        "annual_return": 7.1,
        "liquidity": "Medium",
        "pros": [
          "Good yield"
        ],
        "cons": [
          "Credit risk"
        ],
        "description":"High-yield bond from private corporations with higher associated credit risk.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Fixed Dep": [
      {
        "product_name": "Fixed Deposit ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.5,
        "liquidity": "High",
        "pros": [
          "Capital safety"
        ],
        "cons": [
          "Low returns"
        ],
        "description":"Bank deposit product ensuring principal safety and steady but lower returns.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Bank FD ",
        "asset_class": "Fixed Income",
        "sub_asset_class": "Fixed Dep",
        "annual_return": 5.7,
        "liquidity": "High",
        "pros": [
          "Easy access"
        ],
        "cons": [
          "Taxable"
        ],
        "description":"Secure savings product offering fixed interest and high liquidity.",
        "risk_level": "Low",
        "percentage_split": 0
      }
    ]
  },
  "Real Estate": {
    "REITs": [
      {
        "product_name": "REITs Trust ",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 8.9,
        "liquidity": "Moderate",
        "pros": [
          "Stable returns",
          "Diversified portfolio"
        ],
        "cons": [
          "Sensitive to interest rates",
          "Limited growth"
        ],
        "description":"A high-liquidity REIT focusing on tax-efficient income generation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Vanguad Real Estate",
        "asset_class": "Real Estate",
        "sub_asset_class": "REITs",
        "annual_return": 9.5,
        "liquidity": "High",
        "pros": [
          "Tax efficiency",
          "Regular income"
        ],
        "cons": [
          "Market volatility",
          "Fees"
        ],
        "description":"A diversified real estate investment trust offering stable returns.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Residential Prop": [
      {
        "product_name": "Residential Scheme ",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 6.7,
        "liquidity": "Low",
        "pros": [
          "Stable income",
          "Low volatility"
        ],
        "cons": [
          "Low liquidity",
          "Maintenance costs"
        ],
        "description":"Invests in residential properties for stable rental income.",
        "risk_level": "Low",
        "percentage_split": 0
      },
      {
        "product_name": "Housing Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Residential Prop",
        "annual_return": 7.3,
        "liquidity": "Moderate",
        "pros": [
          "Tax benefits",
          "Long-term growth"
        ],
        "cons": [
          "Location dependent",
          "Slow ROI"
        ],
        "description":"Focuses on long-term growth through residential property investments.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Commercial Prop": [
      {
        "product_name": "Commercial Plaza",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 10.2,
        "liquidity": "Low",
        "pros": [
          "High rental yields",
          "Strong appreciation"
        ],
        "cons": [
          "High initial cost",
          "Vacancy risk"
        ],
        "description":"Targets high rental yields from commercial real estate.",
        "risk_level": "High",
        "percentage_split": 0
      },
      {
        "product_name": "Office Fund",
        "asset_class": "Real Estate",
        "sub_asset_class": "Commercial Prop",
        "annual_return": 9.8,
        "liquidity": "Moderate",
        "pros": [
          "Steady returns",
          "Long leases"
        ],
        "cons": [
          "Tenant turnover",
          "High maintenance"
        ],
        "description":"Invests in office spaces with steady returns and long leases.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ]
  },
  "Commodities": {
    "Precious Metals": [
      {
        "product_name": "Gold ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 7.8,
        "liquidity": "High",
        "pros": [
          "Inflation hedge",
          "Safe haven asset"
        ],
        "cons": [
          "No income generation",
          "Price volatility"
        ],
        "description":"Invests in gold to provide a hedge against inflation.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Silver Trust",
        "asset_class": "Commodities",
        "sub_asset_class": "Precious Metals",
        "annual_return": 6.3,
        "liquidity": "High",
        "pros": [
          "Alternative investment",
          "Deflation hedge"
        ],
        "cons": [
          "Subject to price swings",
          "Not income-producing"
        ],
        "description":"Focuses on silver as an alternative investment for diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ],
    "Energy": [
      {
        "product_name": "Energy Fund",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 9.2,
        "liquidity": "Medium",
        "pros": [
          "High demand",
          "Diversified exposure"
        ],
        "cons": [
          "Subject to price fluctuations",
          "Geopolitical risks"
        ],
        "description":"Provides exposure to energy markets with diversified assets.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Oil & Gas ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Energy",
        "annual_return": 10.3,
        "liquidity": "Medium",
        "pros": [
          "Strong returns",
          "Global demand"
        ],
        "cons": [
          "Environmental impact",
          "Political risk"
        ],
        "description":"Targets oil and gas sectors for strong returns and global demand.",
        "risk_level": "High",
        "percentage_split": 0
      }
    ],
    "Agriculture": [
      {
        "product_name": "Agricultural ETF",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 8.5,
        "liquidity": "Low",
        "pros": [
          "Diversification",
          "Growth potential"
        ],
        "cons": [
          "Weather dependent",
          "Global supply issues"
        ],
        "description":"Invests in agricultural commodities for growth and diversification.",
        "risk_level": "Moderate",
        "percentage_split": 0
      },
      {
        "product_name": "Crop Futures B",
        "asset_class": "Commodities",
        "sub_asset_class": "Agriculture",
        "annual_return": 7.0,
        "liquidity": "Low",
        "pros": [
          "Alternative to stocks",
          "Hedge against inflation"
        ],
        "cons": [
          "Market volatility",
          "Weather sensitivity"
        ],
        "description":"Focuses on crop futures to hedge against inflation and market volatility.",
        "risk_level": "Moderate",
        "percentage_split": 0
      }
    ]
  },
  "Cash": {
    "Liquid Mutual Funds": [

{

"product_name": "Liquid Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.2,

"liquidity": "High",

"pros": ["Quick redemption", "Low risk"],

"cons": ["Lower returns", "Short-term horizon"],
"description":"Provides quick redemption and low-risk short-term investment.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "Ultra Short Fund",

"asset_class": "Cash",

"sub_asset_class": "Liquid Mutual Funds",

"annual_return": 5.0,
"liquidity": "High",

"pros": ["Better returns than savings", "High liquidity"],

"cons": ["Interest rate risk", "Short-term only"],
"description":"Offers slightly better returns with high liquidity for short-term needs.",

"risk_level": "Low",

"percentage_split": 0

}

],

"Savings Acc": [

{

"product_name": "Standard Savings Account",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 3.5,

"liquidity": "High",

"pros": ["Very liquid", "Capital safety"],

"cons": ["Very low returns", "Not suitable for growth"],
"description":"Ensures capital safety with very high liquidity for daily needs.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "High Interest Savings",

"asset_class": "Cash",

"sub_asset_class": "Savings Acc",

"annual_return": 4.0,

"liquidity": "High",

"pros": ["Slightly higher returns", "Safe and accessible"],
"cons": ["Still low returns", "Inflation risk"],
"description":"Provides higher interest rates while maintaining accessibility and safety.",

"risk_level": "Low",

"percentage_split": 0

}

],

"T. Bill": [

{

"product_name": "91-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.1,

"liquidity": "Moderate",

"pros": ["Government backed", "Low risk"],

"cons": ["Fixed tenure", "Lower yield"],
"description":"Short-term government-backed investment with moderate liquidity.",

"risk_level": "Low",

"percentage_split": 0

},

{

"product_name": "182-Day T-Bill",

"asset_class": "Cash",

"sub_asset_class": "T. Bill",

"annual_return": 5.4,

"liquidity": "Moderate",

"pros": ["Safe investment", "Short maturity"],

"cons": ["Not liquid before maturity", "Limited returns"],
"description":"Safe short-term investment with slightly higher returns and fixed tenure.",

"risk_level": "Low",
"percentage_split": 0
}
]
}
}

2025-05-12 17:36:37.886 +05:30 [INF] Product data loaded successfully.
2025-05-12 17:36:37.902 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Large Cap.
2025-05-12 17:36:37.907 +05:30 [INF] Calculating investment amount with PercentageSplit: 8.33, TargetAmount: 100000, AnnualReturn: 10, InvestmentHorizon: Moderate.
2025-05-12 17:36:37.913 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:37.914 +05:30 [INF] Calculated investment amount: 5172.27.
2025-05-12 17:36:37.915 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.67, TargetAmount: 100000, AnnualReturn: 9.2, InvestmentHorizon: Moderate.
2025-05-12 17:36:37.917 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:37.918 +05:30 [INF] Calculated investment amount: 4939.49.
2025-05-12 17:36:37.919 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Mid Cap.
2025-05-12 17:36:37.920 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.38, TargetAmount: 100000, AnnualReturn: 12.5, InvestmentHorizon: Moderate.
2025-05-12 17:36:37.922 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:37.923 +05:30 [INF] Calculated investment amount: 3540.45.
2025-05-12 17:36:37.925 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.62, TargetAmount: 100000, AnnualReturn: 11, InvestmentHorizon: Moderate.
2025-05-12 17:36:37.927 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:37.928 +05:30 [INF] Calculated investment amount: 3335.2.
2025-05-12 17:36:37.929 +05:30 [INF] Fetching products for Asset Class: equity, Sub-Asset Class: Small Cap.
2025-05-12 17:36:37.931 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.18, TargetAmount: 100000, AnnualReturn: 14, InvestmentHorizon: Moderate.
2025-05-12 17:36:37.933 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:37.935 +05:30 [INF] Calculated investment amount: 3209.7.
2025-05-12 17:36:37.936 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.82, TargetAmount: 100000, AnnualReturn: 13.2, InvestmentHorizon: Moderate.
2025-05-12 17:36:37.938 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:37.939 +05:30 [INF] Calculated investment amount: 3131.06.
2025-05-12 17:36:37.940 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Gov Bonds.
2025-05-12 17:36:37.941 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.36, TargetAmount: 100000, AnnualReturn: 5, InvestmentHorizon: Moderate.
2025-05-12 17:36:37.943 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:37.944 +05:30 [INF] Calculated investment amount: 4199.7.
2025-05-12 17:36:37.946 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.14, TargetAmount: 100000, AnnualReturn: 4.8, InvestmentHorizon: Moderate.
2025-05-12 17:36:37.949 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:37.950 +05:30 [INF] Calculated investment amount: 4065.9.
2025-05-12 17:36:37.951 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Corp Bonds.
2025-05-12 17:36:37.952 +05:30 [INF] Calculating investment amount with PercentageSplit: 6.85, TargetAmount: 100000, AnnualReturn: 6.8, InvestmentHorizon: Moderate.
2025-05-12 17:36:37.954 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:37.955 +05:30 [INF] Calculated investment amount: 4929.86.
2025-05-12 17:36:37.956 +05:30 [INF] Calculating investment amount with PercentageSplit: 7.15, TargetAmount: 100000, AnnualReturn: 7.1, InvestmentHorizon: Moderate.
2025-05-12 17:36:37.958 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:37.959 +05:30 [INF] Calculated investment amount: 5074.1.
2025-05-12 17:36:37.961 +05:30 [INF] Fetching products for Asset Class: fixedincome, Sub-Asset Class: Fixed Dep.
2025-05-12 17:36:37.962 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.16, TargetAmount: 100000, AnnualReturn: 5.5, InvestmentHorizon: Moderate.
2025-05-12 17:36:37.964 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:37.965 +05:30 [INF] Calculated investment amount: 3948.09.
2025-05-12 17:36:37.966 +05:30 [INF] Calculating investment amount with PercentageSplit: 5.34, TargetAmount: 100000, AnnualReturn: 5.7, InvestmentHorizon: Moderate.
2025-05-12 17:36:37.968 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:37.969 +05:30 [INF] Calculated investment amount: 4047.31.
2025-05-12 17:36:37.970 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Precious Metals.
2025-05-12 17:36:37.971 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.21, TargetAmount: 100000, AnnualReturn: 7.8, InvestmentHorizon: Moderate.
2025-05-12 17:36:37.973 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:37.975 +05:30 [INF] Calculated investment amount: 1518.09.
2025-05-12 17:36:37.976 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.79, TargetAmount: 100000, AnnualReturn: 6.3, InvestmentHorizon: Moderate.
2025-05-12 17:36:37.979 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:37.980 +05:30 [INF] Calculated investment amount: 1318.82.
2025-05-12 17:36:37.981 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Energy.
2025-05-12 17:36:37.984 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.42, TargetAmount: 100000, AnnualReturn: 9.2, InvestmentHorizon: Moderate.
2025-05-12 17:36:37.987 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:37.988 +05:30 [INF] Calculated investment amount: 914.48.
2025-05-12 17:36:37.989 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.58, TargetAmount: 100000, AnnualReturn: 10.3, InvestmentHorizon: Moderate.
2025-05-12 17:36:37.991 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:37.994 +05:30 [INF] Calculated investment amount: 967.79.
2025-05-12 17:36:37.996 +05:30 [INF] Fetching products for Asset Class: commodities, Sub-Asset Class: Agriculture.
2025-05-12 17:36:37.998 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.65, TargetAmount: 100000, AnnualReturn: 8.5, InvestmentHorizon: Moderate.
2025-05-12 17:36:38.003 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:38.005 +05:30 [INF] Calculated investment amount: 1097.32.
2025-05-12 17:36:38.006 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.35, TargetAmount: 100000, AnnualReturn: 7, InvestmentHorizon: Moderate.
2025-05-12 17:36:38.009 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:38.011 +05:30 [INF] Calculated investment amount: 962.53.
2025-05-12 17:36:38.013 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Liquid Mutual Funds.
2025-05-12 17:36:38.016 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.53, TargetAmount: 100000, AnnualReturn: 5.2, InvestmentHorizon: Moderate.
2025-05-12 17:36:38.020 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:38.022 +05:30 [INF] Calculated investment amount: 1187.44.
2025-05-12 17:36:38.023 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.47, TargetAmount: 100000, AnnualReturn: 5, InvestmentHorizon: Moderate.
2025-05-12 17:36:38.026 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:38.028 +05:30 [INF] Calculated investment amount: 1151.78.
2025-05-12 17:36:38.029 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: Savings Acc.
2025-05-12 17:36:38.031 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.4, TargetAmount: 100000, AnnualReturn: 3.5, InvestmentHorizon: Moderate.
2025-05-12 17:36:38.035 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:38.037 +05:30 [INF] Calculated investment amount: 1178.76.
2025-05-12 17:36:38.039 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.6, TargetAmount: 100000, AnnualReturn: 4, InvestmentHorizon: Moderate.
2025-05-12 17:36:38.040 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:38.042 +05:30 [INF] Calculated investment amount: 1315.08.
2025-05-12 17:36:38.044 +05:30 [INF] Fetching products for Asset Class: cash, Sub-Asset Class: T. Bill.
2025-05-12 17:36:38.045 +05:30 [INF] Calculating investment amount with PercentageSplit: 1.94, TargetAmount: 100000, AnnualReturn: 5.1, InvestmentHorizon: Moderate.
2025-05-12 17:36:38.049 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:38.051 +05:30 [INF] Calculated investment amount: 1512.82.
2025-05-12 17:36:38.052 +05:30 [INF] Calculating investment amount with PercentageSplit: 2.06, TargetAmount: 100000, AnnualReturn: 5.4, InvestmentHorizon: Moderate.
2025-05-12 17:36:38.055 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:38.056 +05:30 [INF] Calculated investment amount: 1583.67.
2025-05-12 17:36:38.057 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: REITs.
2025-05-12 17:36:38.059 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.91, TargetAmount: 100000, AnnualReturn: 8.9, InvestmentHorizon: Moderate.
2025-05-12 17:36:38.064 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:38.065 +05:30 [INF] Calculated investment amount: 594.16.
2025-05-12 17:36:38.067 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.97, TargetAmount: 100000, AnnualReturn: 9.5, InvestmentHorizon: Moderate.
2025-05-12 17:36:38.068 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:38.069 +05:30 [INF] Calculated investment amount: 616.17.
2025-05-12 17:36:38.070 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Residential Prop.
2025-05-12 17:36:38.072 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.6, TargetAmount: 100000, AnnualReturn: 6.7, InvestmentHorizon: Moderate.
2025-05-12 17:36:38.074 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:38.077 +05:30 [INF] Calculated investment amount: 433.84.
2025-05-12 17:36:38.079 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.65, TargetAmount: 100000, AnnualReturn: 7.3, InvestmentHorizon: Moderate.
2025-05-12 17:36:38.082 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:38.083 +05:30 [INF] Calculated investment amount: 457.
2025-05-12 17:36:38.084 +05:30 [INF] Fetching products for Asset Class: realestate, Sub-Asset Class: Commercial Prop.
2025-05-12 17:36:38.085 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.96, TargetAmount: 100000, AnnualReturn: 10.2, InvestmentHorizon: Moderate.
2025-05-12 17:36:38.087 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:38.088 +05:30 [INF] Calculated investment amount: 590.69.
2025-05-12 17:36:38.089 +05:30 [INF] Calculating investment amount with PercentageSplit: 0.92, TargetAmount: 100000, AnnualReturn: 9.8, InvestmentHorizon: Moderate.
2025-05-12 17:36:38.092 +05:30 [INF] Parsed investment horizon: 5 years.
2025-05-12 17:36:38.094 +05:30 [INF] Calculated investment amount: 576.47.
2025-05-12 17:36:38.112 +05:30 [INF] Product allocations saved successfully to ProductAllocations.json
2025-05-12 17:36:38.115 +05:30 [INF] Final Product Allocations: {"equity":{"Large Cap":{"BlueChip Fund ":{"product_name":"BlueChip Fund ","annual_return":10,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Stable returns","Low risk"],"cons":["Lower growth"],"risk_level":"Low","percentage_split":8.33,"InvestmentAmount":5172.27},"Index Fund ":{"product_name":"Index Fund ","annual_return":9.2,"asset_class":"Equity","sub_asset_class":"Large Cap","liquidity":"High","pros":["Diversified","Low cost"],"cons":["Market dependent"],"risk_level":"Moderate","percentage_split":7.67,"InvestmentAmount":4939.49}},"Mid Cap":{"Mid Cap Growth ":{"product_name":"Mid Cap Growth ","annual_return":12.5,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["High growth potential"],"cons":["Volatile"],"risk_level":"High","percentage_split":6.38,"InvestmentAmount":3540.45},"MidCap Blend ":{"product_name":"MidCap Blend ","annual_return":11,"asset_class":"Equity","sub_asset_class":"Mid Cap","liquidity":"Medium","pros":["Balanced approach"],"cons":["Moderate risk"],"risk_level":"Moderate","percentage_split":5.62,"InvestmentAmount":3335.2}},"Small Cap":{"SmallCap Aggressive ":{"product_name":"SmallCap Aggressive ","annual_return":14,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Medium","pros":["High return potential"],"cons":["Very volatile"],"risk_level":"High","percentage_split":6.18,"InvestmentAmount":3209.7},"Emerging Companies ":{"product_name":"Emerging Companies ","annual_return":13.2,"asset_class":"Equity","sub_asset_class":"Small Cap","liquidity":"Low","pros":["Growth stocks"],"cons":["Liquidity risk"],"risk_level":"High","percentage_split":5.82,"InvestmentAmount":3131.06}}},"fixedIncome":{"Gov Bonds":{"Government Bond ":{"product_name":"Government Bond ","annual_return":5,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Very safe","Guaranteed return"],"cons":["Low return"],"risk_level":"Low","percentage_split":5.36,"InvestmentAmount":4199.7},"Sovereign Bond ":{"product_name":"Sovereign Bond ","annual_return":4.8,"asset_class":"Fixed Income","sub_asset_class":"Gov Bonds","liquidity":"Low","pros":["Stable income"],"cons":["Interest rate sensitive"],"risk_level":"Low","percentage_split":5.14,"InvestmentAmount":4065.9}},"Corp Bonds":{"Corporate Bond ":{"product_name":"Corporate Bond ","annual_return":6.8,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Better return"],"cons":["Company risk"],"risk_level":"Moderate","percentage_split":6.85,"InvestmentAmount":4929.86},"Private Corp Bond ":{"product_name":"Private Corp Bond ","annual_return":7.1,"asset_class":"Fixed Income","sub_asset_class":"Corp Bonds","liquidity":"Medium","pros":["Good yield"],"cons":["Credit risk"],"risk_level":"High","percentage_split":7.15,"InvestmentAmount":5074.1}},"Fixed Dep":{"Fixed Deposit ":{"product_name":"Fixed Deposit ","annual_return":5.5,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Capital safety"],"cons":["Low returns"],"risk_level":"Low","percentage_split":5.16,"InvestmentAmount":3948.09},"Bank FD ":{"product_name":"Bank FD ","annual_return":5.7,"asset_class":"Fixed Income","sub_asset_class":"Fixed Dep","liquidity":"High","pros":["Easy access"],"cons":["Taxable"],"risk_level":"Low","percentage_split":5.34,"InvestmentAmount":4047.31}}},"commodities":{"Precious Metals":{"Gold ETF":{"product_name":"Gold ETF","annual_return":7.8,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Inflation hedge","Safe haven asset"],"cons":["No income generation","Price volatility"],"risk_level":"Moderate","percentage_split":2.21,"InvestmentAmount":1518.09},"Silver Trust":{"product_name":"Silver Trust","annual_return":6.3,"asset_class":"Commodities","sub_asset_class":"Precious Metals","liquidity":"High","pros":["Alternative investment","Deflation hedge"],"cons":["Subject to price swings","Not income-producing"],"risk_level":"Moderate","percentage_split":1.79,"InvestmentAmount":1318.82}},"Energy":{"Energy Fund":{"product_name":"Energy Fund","annual_return":9.2,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["High demand","Diversified exposure"],"cons":["Subject to price fluctuations","Geopolitical risks"],"risk_level":"Moderate","percentage_split":1.42,"InvestmentAmount":914.48},"Oil \u0026 Gas ETF":{"product_name":"Oil \u0026 Gas ETF","annual_return":10.3,"asset_class":"Commodities","sub_asset_class":"Energy","liquidity":"Medium","pros":["Strong returns","Global demand"],"cons":["Environmental impact","Political risk"],"risk_level":"High","percentage_split":1.58,"InvestmentAmount":967.79}},"Agriculture":{"Agricultural ETF":{"product_name":"Agricultural ETF","annual_return":8.5,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Diversification","Growth potential"],"cons":["Weather dependent","Global supply issues"],"risk_level":"Moderate","percentage_split":1.65,"InvestmentAmount":1097.32},"Crop Futures B":{"product_name":"Crop Futures B","annual_return":7,"asset_class":"Commodities","sub_asset_class":"Agriculture","liquidity":"Low","pros":["Alternative to stocks","Hedge against inflation"],"cons":["Market volatility","Weather sensitivity"],"risk_level":"Moderate","percentage_split":1.35,"InvestmentAmount":962.53}}},"cash":{"Liquid Mutual Funds":{"Liquid Fund":{"product_name":"Liquid Fund","annual_return":5.2,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Quick redemption","Low risk"],"cons":["Lower returns","Short-term horizon"],"risk_level":"Low","percentage_split":1.53,"InvestmentAmount":1187.44},"Ultra Short Fund":{"product_name":"Ultra Short Fund","annual_return":5,"asset_class":"Cash","sub_asset_class":"Liquid Mutual Funds","liquidity":"High","pros":["Better returns than savings","High liquidity"],"cons":["Interest rate risk","Short-term only"],"risk_level":"Low","percentage_split":1.47,"InvestmentAmount":1151.78}},"Savings Acc":{"Standard Savings Account":{"product_name":"Standard Savings Account","annual_return":3.5,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Very liquid","Capital safety"],"cons":["Very low returns","Not suitable for growth"],"risk_level":"Low","percentage_split":1.4,"InvestmentAmount":1178.76},"High Interest Savings":{"product_name":"High Interest Savings","annual_return":4,"asset_class":"Cash","sub_asset_class":"Savings Acc","liquidity":"High","pros":["Slightly higher returns","Safe and accessible"],"cons":["Still low returns","Inflation risk"],"risk_level":"Low","percentage_split":1.6,"InvestmentAmount":1315.08}},"T. Bill":{"91-Day T-Bill":{"product_name":"91-Day T-Bill","annual_return":5.1,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Government backed","Low risk"],"cons":["Fixed tenure","Lower yield"],"risk_level":"Low","percentage_split":1.94,"InvestmentAmount":1512.82},"182-Day T-Bill":{"product_name":"182-Day T-Bill","annual_return":5.4,"asset_class":"Cash","sub_asset_class":"T. Bill","liquidity":"Moderate","pros":["Safe investment","Short maturity"],"cons":["Not liquid before maturity","Limited returns"],"risk_level":"Low","percentage_split":2.06,"InvestmentAmount":1583.67}}},"realEstate":{"REITs":{"REITs Trust ":{"product_name":"REITs Trust ","annual_return":8.9,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"Moderate","pros":["Stable returns","Diversified portfolio"],"cons":["Sensitive to interest rates","Limited growth"],"risk_level":"Moderate","percentage_split":0.91,"InvestmentAmount":594.16},"Vanguad Real Estate":{"product_name":"Vanguad Real Estate","annual_return":9.5,"asset_class":"Real Estate","sub_asset_class":"REITs","liquidity":"High","pros":["Tax efficiency","Regular income"],"cons":["Market volatility","Fees"],"risk_level":"High","percentage_split":0.97,"InvestmentAmount":616.17}},"Residential Prop":{"Residential Scheme ":{"product_name":"Residential Scheme ","annual_return":6.7,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Low","pros":["Stable income","Low volatility"],"cons":["Low liquidity","Maintenance costs"],"risk_level":"Low","percentage_split":0.6,"InvestmentAmount":433.84},"Housing Fund":{"product_name":"Housing Fund","annual_return":7.3,"asset_class":"Real Estate","sub_asset_class":"Residential Prop","liquidity":"Moderate","pros":["Tax benefits","Long-term growth"],"cons":["Location dependent","Slow ROI"],"risk_level":"Moderate","percentage_split":0.65,"InvestmentAmount":457}},"Commercial Prop":{"Commercial Plaza":{"product_name":"Commercial Plaza","annual_return":10.2,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Low","pros":["High rental yields","Strong appreciation"],"cons":["High initial cost","Vacancy risk"],"risk_level":"High","percentage_split":0.96,"InvestmentAmount":590.69},"Office Fund":{"product_name":"Office Fund","annual_return":9.8,"asset_class":"Real Estate","sub_asset_class":"Commercial Prop","liquidity":"Moderate","pros":["Steady returns","Long leases"],"cons":["Tenant turnover","High maintenance"],"risk_level":"High","percentage_split":0.92,"InvestmentAmount":576.47}}}}
2025-05-12 17:36:38.139 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 17:36:38.157 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest) in 473.0938ms
2025-05-12 17:36:38.160 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.CalculateProductAllocations (WisVest)'
2025-05-12 17:36:38.166 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/ProductAllocation/calculate-product-allocations?targetAmount=100000&investmentHorizon=Moderate - 200 null application/json; charset=utf-8 586.5701ms
2025-05-12 17:36:58.751 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 17:36:58.751 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 17:36:58.762 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:36:58.765 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:36:58.766 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 15.3576ms
2025-05-12 17:36:58.768 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 16.9443ms
2025-05-12 17:36:58.777 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 17:36:58.783 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 17:36:58.859 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:36:58.859 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:36:58.862 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 17:36:58.864 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 17:36:58.867 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 17:36:58.868 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 17:36:58.872 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 17:36:58.876 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 17:36:58.876 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 17:36:58.881 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 17:36:58.882 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 17:36:58.886 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 17:36:58.887 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 16.2789ms
2025-05-12 17:36:58.891 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 17:36:58.893 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 109.4436ms
2025-05-12 17:36:58.895 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 22.2902ms
2025-05-12 17:36:58.901 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 17:36:58.902 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 125.5154ms
2025-05-12 17:37:13.892 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 17:37:13.896 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:37:13.898 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 6.2613ms
2025-05-12 17:37:13.905 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 105
2025-05-12 17:37:13.909 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:37:13.911 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 17:37:13.917 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 17:37:13.940 +05:30 [INF] Starting allocation calculation...
2025-05-12 17:37:13.948 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 17:37:13.950 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 17:37:13.952 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 17:37:13.953 +05:30 [INF] Looking up age adjustment rules for key: <30
2025-05-12 17:37:13.954 +05:30 [INF] Age adjustments found: {"equity":10,"fixedIncome":-5,"cash":-5}
2025-05-12 17:37:13.955 +05:30 [INF] Looking up goal tuning for goal: Retirement
2025-05-12 17:37:13.957 +05:30 [INF] Goal tuning found: {"fixedIncome_boost":10,"realEstate_boost":5}
2025-05-12 17:37:13.975 +05:30 [INF] Sub-allocations for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 17:37:13.977 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 17:37:13.978 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 17:37:13.979 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 17:37:13.981 +05:30 [INF] Sub-allocations for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 17:37:13.984 +05:30 [INF] Added sub-assets for equity: {"Large Cap":12,"Mid Cap":9,"Small Cap":9}
2025-05-12 17:37:13.985 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 17:37:13.986 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":4,"Energy":3,"Agriculture":3}
2025-05-12 17:37:13.988 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}
2025-05-12 17:37:13.989 +05:30 [INF] Added sub-assets for realEstate: {"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}
2025-05-12 17:37:14.010 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 17:37:14.021 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 17:37:14.024 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":30,"subAssets":{"Large Cap":12,"Mid Cap":9,"Small Cap":9}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":10,"subAssets":{"Precious Metals":4,"Energy":3,"Agriculture":3}},"cash":{"percentage":20,"subAssets":{"Liquid Mutual Funds":6,"Savings Acc":6,"T. Bill":8}},"realEstate":{"percentage":10,"subAssets":{"REITs":3.75,"Residential Prop":2.5,"Commercial Prop":3.75}}}
2025-05-12 17:37:14.026 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 17:37:14.029 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 107.8146ms
2025-05-12 17:37:14.032 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 17:37:14.035 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 130.4875ms
2025-05-12 17:37:14.047 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 17:37:14.050 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 17:37:14.053 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:37:14.057 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:37:14.058 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 11.2757ms
2025-05-12 17:37:14.061 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 10.6534ms
2025-05-12 17:37:14.069 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 17:37:14.073 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 17:37:14.076 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:37:14.081 +05:30 [INF] CORS policy execution successful.
2025-05-12 17:37:14.082 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 17:37:14.084 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 17:37:14.085 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 17:37:14.087 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 17:37:14.091 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 17:37:14.094 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 17:37:14.094 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 17:37:14.096 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 17:37:14.097 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 17:37:14.099 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 17:37:14.102 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 13.3437ms
2025-05-12 17:37:14.104 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 12.636ms
2025-05-12 17:37:14.106 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 17:37:14.107 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 17:37:14.108 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 38.941ms
2025-05-12 17:37:14.109 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 36.3019ms
2025-05-12 18:03:18.835 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 18:03:18.840 +05:30 [INF] CORS policy execution successful.
2025-05-12 18:03:18.843 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 7.7136ms
2025-05-12 18:03:18.847 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 18:03:18.854 +05:30 [INF] CORS policy execution successful.
2025-05-12 18:03:18.855 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 18:03:18.856 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 18:03:18.860 +05:30 [INF] Starting allocation calculation...
2025-05-12 18:03:18.861 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 18:03:18.862 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 18:03:18.863 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 18:03:18.865 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-12 18:03:18.868 +05:30 [INF] Age adjustments found: {}
2025-05-12 18:03:18.870 +05:30 [INF] Looking up goal tuning for goal: Big Purchase
2025-05-12 18:03:18.871 +05:30 [INF] Goal tuning found: {"balanced":true}
2025-05-12 18:03:18.875 +05:30 [INF] Sub-allocations for equity: {"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}
2025-05-12 18:03:18.876 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 18:03:18.878 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}
2025-05-12 18:03:18.879 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}
2025-05-12 18:03:18.881 +05:30 [INF] Sub-allocations for realEstate: {"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}
2025-05-12 18:03:18.883 +05:30 [INF] Added sub-assets for equity: {"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}
2025-05-12 18:03:18.885 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 18:03:18.887 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}
2025-05-12 18:03:18.888 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}
2025-05-12 18:03:18.890 +05:30 [INF] Added sub-assets for realEstate: {"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}
2025-05-12 18:03:18.892 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":22.5,"subAssets":{"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":12.5,"subAssets":{"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}},"cash":{"percentage":27.5,"subAssets":{"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}},"realEstate":{"percentage":7.5,"subAssets":{"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}}}
2025-05-12 18:03:18.894 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 18:03:18.895 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":22.5,"subAssets":{"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":12.5,"subAssets":{"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}},"cash":{"percentage":27.5,"subAssets":{"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}},"realEstate":{"percentage":7.5,"subAssets":{"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}}}
2025-05-12 18:03:18.898 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 18:03:18.900 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 40.8931ms
2025-05-12 18:03:18.902 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 18:03:18.903 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 56.1074ms
2025-05-12 18:03:18.920 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 18:03:18.921 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 18:03:18.924 +05:30 [INF] CORS policy execution successful.
2025-05-12 18:03:18.927 +05:30 [INF] CORS policy execution successful.
2025-05-12 18:03:18.928 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 8.6785ms
2025-05-12 18:03:18.929 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 8.2251ms
2025-05-12 18:03:18.937 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 18:03:18.941 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 18:03:18.944 +05:30 [INF] CORS policy execution successful.
2025-05-12 18:03:18.947 +05:30 [INF] CORS policy execution successful.
2025-05-12 18:03:18.948 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 18:03:18.950 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 18:03:18.952 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 18:03:18.955 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 18:03:18.958 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 18:03:18.961 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 18:03:18.964 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 18:03:18.966 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 18:03:18.966 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 18:03:18.968 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 18:03:18.971 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 12.6067ms
2025-05-12 18:03:18.974 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 12.7566ms
2025-05-12 18:03:18.975 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 18:03:18.976 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 18:03:18.977 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 39.8272ms
2025-05-12 18:03:18.978 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 37.0264ms
2025-05-12 18:04:09.324 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - null null
2025-05-12 18:04:09.330 +05:30 [INF] CORS policy execution successful.
2025-05-12 18:04:09.333 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/compute - 204 null null 8.8606ms
2025-05-12 18:04:09.344 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - application/json 106
2025-05-12 18:04:09.348 +05:30 [INF] CORS policy execution successful.
2025-05-12 18:04:09.350 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 18:04:09.351 +05:30 [INF] Route matched with {action = "GetAllocation", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[WisVestAPI.Models.DTOs.AllocationResultDTO]] GetAllocation(WisVestAPI.Models.DTOs.UserInputDTO) on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 18:04:09.353 +05:30 [INF] Starting allocation calculation...
2025-05-12 18:04:09.356 +05:30 [INF] Allocation matrix loaded successfully.
2025-05-12 18:04:09.357 +05:30 [INF] Looking up base allocation for key: Mid+Short
2025-05-12 18:04:09.359 +05:30 [INF] Base allocation found: {"equity":20,"fixedIncome":40,"commodities":10,"cash":25,"realEstate":5}
2025-05-12 18:04:09.361 +05:30 [INF] Looking up age adjustment rules for key: 30-45
2025-05-12 18:04:09.363 +05:30 [INF] Age adjustments found: {}
2025-05-12 18:04:09.365 +05:30 [INF] Looking up goal tuning for goal: Big Purchase
2025-05-12 18:04:09.366 +05:30 [INF] Goal tuning found: {"balanced":true}
2025-05-12 18:04:09.369 +05:30 [INF] Sub-allocations for equity: {"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}
2025-05-12 18:04:09.370 +05:30 [INF] Sub-allocations for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 18:04:09.371 +05:30 [INF] Sub-allocations for commodities: {"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}
2025-05-12 18:04:09.372 +05:30 [INF] Sub-allocations for cash: {"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}
2025-05-12 18:04:09.374 +05:30 [INF] Sub-allocations for realEstate: {"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}
2025-05-12 18:04:09.376 +05:30 [INF] Added sub-assets for equity: {"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}
2025-05-12 18:04:09.379 +05:30 [INF] Added sub-assets for fixedIncome: {"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}
2025-05-12 18:04:09.380 +05:30 [INF] Added sub-assets for commodities: {"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}
2025-05-12 18:04:09.382 +05:30 [INF] Added sub-assets for cash: {"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}
2025-05-12 18:04:09.383 +05:30 [INF] Added sub-assets for realEstate: {"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}
2025-05-12 18:04:09.384 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":22.5,"subAssets":{"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":12.5,"subAssets":{"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}},"cash":{"percentage":27.5,"subAssets":{"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}},"realEstate":{"percentage":7.5,"subAssets":{"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}}}
2025-05-12 18:04:09.388 +05:30 [INF] Final allocation saved successfully to FinalAllocation.json
2025-05-12 18:04:09.389 +05:30 [INF] Final formatted allocation: {"equity":{"percentage":22.5,"subAssets":{"Large Cap":9,"Mid Cap":6.75,"Small Cap":6.75}},"fixedIncome":{"percentage":30,"subAssets":{"Gov Bonds":9,"Corp Bonds":12,"Fixed Dep":9}},"commodities":{"percentage":12.5,"subAssets":{"Precious Metals":5,"Energy":3.75,"Agriculture":3.75}},"cash":{"percentage":27.5,"subAssets":{"Liquid Mutual Funds":8.25,"Savings Acc":8.25,"T. Bill":11}},"realEstate":{"percentage":7.5,"subAssets":{"REITs":2.81,"Residential Prop":1.88,"Commercial Prop":2.81}}}
2025-05-12 18:04:09.391 +05:30 [INF] Executing OkObjectResult, writing value of type 'WisVestAPI.Models.DTOs.AllocationResultDTO'.
2025-05-12 18:04:09.394 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest) in 40.6878ms
2025-05-12 18:04:09.397 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetAllocation (WisVest)'
2025-05-12 18:04:09.398 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Allocation/compute - 200 null application/json; charset=utf-8 54.5584ms
2025-05-12 18:04:09.411 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 18:04:09.413 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 18:04:09.415 +05:30 [INF] CORS policy execution successful.
2025-05-12 18:04:09.418 +05:30 [INF] CORS policy execution successful.
2025-05-12 18:04:09.419 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 8.2046ms
2025-05-12 18:04:09.422 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 8.4374ms
2025-05-12 18:04:09.429 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 18:04:09.433 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 18:04:09.436 +05:30 [INF] CORS policy execution successful.
2025-05-12 18:04:09.440 +05:30 [INF] CORS policy execution successful.
2025-05-12 18:04:09.441 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 18:04:09.442 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 18:04:09.444 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 18:04:09.445 +05:30 [INF] Route matched with {action = "GetCalculatedAllocations", controller = "Allocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetCalculatedAllocations() on controller WisVestAPI.Controllers.AllocationController (WisVest).
2025-05-12 18:04:09.447 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 18:04:09.449 +05:30 [INF] Attempting to read final allocation from JSON file: FinalAllocation.json
2025-05-12 18:04:09.451 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 18:04:09.451 +05:30 [INF] Final allocation JSON read successfully.
2025-05-12 18:04:09.452 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 18:04:09.453 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 18:04:09.455 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 7.5232ms
2025-05-12 18:04:09.456 +05:30 [INF] Executed action WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest) in 7.1375ms
2025-05-12 18:04:09.459 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 18:04:09.460 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AllocationController.GetCalculatedAllocations (WisVest)'
2025-05-12 18:04:09.461 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 32.6363ms
2025-05-12 18:04:09.463 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 200 null application/json; charset=utf-8 29.6765ms
2025-05-12 22:21:52.141 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 22:21:52.143 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 22:21:52.147 +05:30 [INF] CORS policy execution successful.
2025-05-12 22:21:52.151 +05:30 [INF] CORS policy execution successful.
2025-05-12 22:21:52.152 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 10.5914ms
2025-05-12 22:21:52.153 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 9.9724ms
2025-05-12 22:21:52.163 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 22:21:52.166 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 22:21:52.182 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 12:57:43 PM', Current time (UTC): '5/12/2025 4:51:52 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 22:21:52.182 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 12:57:43 PM', Current time (UTC): '5/12/2025 4:51:52 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 22:21:52.251 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 12:57:43 PM', Current time (UTC): '5/12/2025 4:51:52 PM'.
2025-05-12 22:21:52.255 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 12:57:43 PM', Current time (UTC): '5/12/2025 4:51:52 PM'.
2025-05-12 22:21:52.262 +05:30 [INF] CORS policy execution successful.
2025-05-12 22:21:52.262 +05:30 [INF] CORS policy execution successful.
2025-05-12 22:21:52.266 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 22:21:52.268 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 22:21:52.270 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 22:21:52.271 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 22:21:52.281 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 22:21:52.283 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 22:21:52.283 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 22:21:52.285 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 401 0 null 122.4869ms
2025-05-12 22:21:52.288 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 17.5613ms
2025-05-12 22:21:52.294 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 22:21:52.296 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 129.9492ms
2025-05-12 22:23:27.085 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 22:23:27.094 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 22:23:27.277 +05:30 [INF] CORS policy execution successful.
2025-05-12 22:23:27.289 +05:30 [INF] CORS policy execution successful.
2025-05-12 22:23:27.294 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/ProductAllocation/get-product-allocations - 204 null null 209.7542ms
2025-05-12 22:23:27.328 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Allocation/get-calculated-allocations - 204 null null 234.4934ms
2025-05-12 22:23:27.338 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - null null
2025-05-12 22:23:27.345 +05:30 [INF] Request starting HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - null null
2025-05-12 22:23:27.349 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 12:57:43 PM', Current time (UTC): '5/12/2025 4:53:27 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 22:23:27.356 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 12:57:43 PM', Current time (UTC): '5/12/2025 4:53:27 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 22:23:27.362 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 12:57:43 PM', Current time (UTC): '5/12/2025 4:53:27 PM'.
2025-05-12 22:23:27.370 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 12:57:43 PM', Current time (UTC): '5/12/2025 4:53:27 PM'.
2025-05-12 22:23:27.387 +05:30 [INF] CORS policy execution successful.
2025-05-12 22:23:27.371 +05:30 [INF] CORS policy execution successful.
2025-05-12 22:23:27.389 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2025-05-12 22:23:27.390 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 22:23:27.395 +05:30 [INF] Route matched with {action = "GetProductAllocations", controller = "ProductAllocation"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetProductAllocations() on controller WisVestAPI.Controllers.ProductAllocationController (WisVest).
2025-05-12 22:23:27.394 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2025-05-12 22:23:27.407 +05:30 [INF] Attempting to read product allocations from JSON file: ProductAllocations.json
2025-05-12 22:23:27.414 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/Allocation/get-calculated-allocations - 401 0 null 68.6265ms
2025-05-12 22:23:27.418 +05:30 [INF] Product allocations JSON read successfully.
2025-05-12 22:23:27.423 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[WisVestAPI.Services.Product, WisVest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 22:23:27.439 +05:30 [INF] Executed action WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest) in 31.8027ms
2025-05-12 22:23:27.441 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.ProductAllocationController.GetProductAllocations (WisVest)'
2025-05-12 22:23:27.465 +05:30 [INF] Request finished HTTP/1.1 GET http://localhost:5251/api/ProductAllocation/get-product-allocations - 200 null application/json; charset=utf-8 126.4358ms
2025-05-12 22:46:13.539 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/Auth/register - null null
2025-05-12 22:46:13.543 +05:30 [INF] CORS policy execution successful.
2025-05-12 22:46:13.557 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/Auth/register - 204 null null 18.1682ms
2025-05-12 22:46:13.572 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/Auth/register - application/json 86
2025-05-12 22:46:13.579 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 12:57:43 PM', Current time (UTC): '5/12/2025 5:16:13 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 22:46:13.588 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 12:57:43 PM', Current time (UTC): '5/12/2025 5:16:13 PM'.
2025-05-12 22:46:13.590 +05:30 [INF] CORS policy execution successful.
2025-05-12 22:46:13.592 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Register (WisVest)'
2025-05-12 22:46:13.599 +05:30 [INF] Route matched with {action = "Register", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Register(UserRegisterRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 22:46:13.930 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType0`1[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 22:46:13.941 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Register (WisVest) in 337.4927ms
2025-05-12 22:46:13.946 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Register (WisVest)'
2025-05-12 22:46:13.949 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/Auth/register - 200 null application/json; charset=utf-8 377.2178ms
2025-05-12 23:24:53.583 +05:30 [INF] Application is shutting down...
2025-05-12 23:32:07.336 +05:30 [INF] User profile is available. Using 'C:\Users\divya.t1\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-05-12 23:32:07.568 +05:30 [INF] Now listening on: http://localhost:5251
2025-05-12 23:32:07.572 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2025-05-12 23:32:07.576 +05:30 [INF] Hosting environment: Development
2025-05-12 23:32:07.578 +05:30 [INF] Content root path: C:\Users\divya.t1\Desktop\7-5-25-WisVest-Backend-main
2025-05-12 23:32:10.539 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 23:32:10.653 +05:30 [INF] CORS policy execution successful.
2025-05-12 23:32:10.673 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 135.4604ms
2025-05-12 23:32:10.695 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 23:32:10.820 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 12:57:43 PM', Current time (UTC): '5/12/2025 6:02:10 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-05-12 23:32:10.854 +05:30 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '5/12/2025 12:57:43 PM', Current time (UTC): '5/12/2025 6:02:10 PM'.
2025-05-12 23:32:10.858 +05:30 [INF] CORS policy execution successful.
2025-05-12 23:32:10.863 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 23:32:10.890 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 23:32:11.086 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 23:32:11.107 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 208.0143ms
2025-05-12 23:32:11.115 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 23:32:11.121 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 427.5492ms
2025-05-12 23:32:26.007 +05:30 [INF] Request starting HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - null null
2025-05-12 23:32:26.040 +05:30 [INF] CORS policy execution successful.
2025-05-12 23:32:26.050 +05:30 [INF] Request finished HTTP/1.1 OPTIONS http://localhost:5251/api/auth/login - 204 null null 42.2495ms
2025-05-12 23:32:26.075 +05:30 [INF] Request starting HTTP/1.1 POST http://localhost:5251/api/auth/login - application/json 53
2025-05-12 23:32:26.148 +05:30 [INF] CORS policy execution successful.
2025-05-12 23:32:26.152 +05:30 [INF] Executing endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 23:32:26.157 +05:30 [INF] Route matched with {action = "Login", controller = "Auth"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(LoginRequest) on controller WisVestAPI.Controllers.AuthController (WisVest).
2025-05-12 23:32:26.390 +05:30 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType1`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2025-05-12 23:32:26.396 +05:30 [INF] Executed action WisVestAPI.Controllers.AuthController.Login (WisVest) in 231.7822ms
2025-05-12 23:32:26.402 +05:30 [INF] Executed endpoint 'WisVestAPI.Controllers.AuthController.Login (WisVest)'
2025-05-12 23:32:26.406 +05:30 [INF] Request finished HTTP/1.1 POST http://localhost:5251/api/auth/login - 200 null application/json; charset=utf-8 330.6388ms
